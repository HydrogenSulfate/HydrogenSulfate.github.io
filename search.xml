<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>POJ 1286 Necklace of Beads（Polya入门）</title>
      <link href="/2019/10/15/POJ-1286/"/>
      <url>/2019/10/15/POJ-1286/</url>
      
        <content type="html"><![CDATA[<p>Necklace of Beads<br>Time Limit: 1000MS        Memory Limit: 10000K<br>Total Submissions: 10622        Accepted: 4293<br>Description</p><a id="more"></a><p>Beads of red, blue or green colors are connected together into a circular necklace of n beads ( n &lt; 24 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there?</p><p>Input</p><p>The input has several lines, and each line contains the input data n.<br>-1 denotes the end of the input file.<br>Output</p><p>The output should contain the output data: Number of different forms, in each line correspondent to the input data.<br>Sample Input</p><p>4<br>5<br>-1<br>Sample Output</p><p>21<br>39</p><p>题目链接：<a href="http://poj.org/problem?id=1286" target="_blank" rel="noopener">POJ 1286</a></p><p>题意就一串长为$n$的珠子可以翻转、旋转，每个珠子可以染$3$种颜色，求本质不同的染色方案数。<br>如果用burnside引理，则会有$3^n$次方种染色方案（标号数），非常麻烦。<br>而用Polya定理：</p><script type="math/tex; mode=display">ans=\sum_{i}{m^{c(p_i)}} /|G|</script><p>其中$m$为染色种数，$|G|$为置换操作个数。$c(p_i)$为某一置换$p_i$中循环的个数。用这个定理就大大缩小了标号数，答案非常好统计。</p><p>具体做法：将每个珠子都编号$1…n$，旋转和翻转看成对珠子编号的置换，由于题目中珠子是圆形的，那么可以有旋转和按照一个对称轴翻转两种情况。</p><ol><li>旋转可以是$0$、$\frac{1}{n}<em>360$、$\frac{2}{n}</em>360$……$\frac{n-1}{n}*360$度，每种置换的循环个数为$gcd(i,n)$，共$n$个置换</li><li>翻转分为奇数和偶数两种情况<ol><li>奇数情况每个点和对边中点连线作为作为翻转轴，每个置换均有$(n - 1)/2+1$个循环，共$n$个这样的置换；</li><li>偶数情况每个对边中点连线作为翻转轴，均有$n/2$个循环，有$n/2$个这样的置换；对点两两一组，均有$(n-2)/2+2$个循环，有$n/2$个这样的置换。</li></ol></li></ol><p>所以置换群$G$的总数一定为$2n$，代码中写的麻烦一点是为了方便展示$G$的来源。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            r *= a;</span><br><span class="line">        a *= a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; ~n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll ans = <span class="number">0</span>;</span><br><span class="line">            ll G = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (ll cc = <span class="number">0</span>; cc &lt; n; ++cc)<span class="comment">///旋转的情况</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll cc_n = __gcd(n, cc);</span><br><span class="line">                ans += qpow(<span class="number">3l</span>l, cc_n);</span><br><span class="line">                ++G;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">///翻转的情况</span></span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>) <span class="comment">///奇数每个点和对边作为中心，(n - 1)/2 +1个环，共n个中心</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans += n * (qpow(<span class="number">3l</span>l, (n - <span class="number">1l</span>l) / <span class="number">2l</span>l  + <span class="number">1l</span>l));</span><br><span class="line">                G += n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">///偶数情况每个对边一组，n/2个环，有n/2组；对点一组，(n-2)/2+2个环，有n/2组</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans += (n &gt;&gt; <span class="number">1</span>) * qpow(<span class="number">3l</span>l, ((n - <span class="number">2l</span>l) / <span class="number">2l</span>l + <span class="number">2l</span>l));</span><br><span class="line">                G += (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">                ans += (n &gt;&gt; <span class="number">1</span>) * (qpow(<span class="number">3l</span>l, n &gt;&gt; <span class="number">1</span>));</span><br><span class="line">                G += (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans / G &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> Polya </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 计数 </tag>
            
            <tag> Polya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy.where的两种用法</title>
      <link href="/2019/04/16/numpy-where%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/"/>
      <url>/2019/04/16/numpy-where%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近看NMS的实现的时候发现代码里有个np.where(…)[0]，这个0就显得很有灵性了，以为是取第一个元素，后来发现并不是这样。查了一波后用代码自己写了下，发现某些情况下有点和想象的不一样。尤其是这个函数的两种完全不同的用法。</p><a id="more"></a><h1 id="一、np-where-condition"><a href="#一、np-where-condition" class="headerlink" title="一、np.where(condition)"></a>一、np.where(condition)</h1><p>先来份代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">b = a[::<span class="number">-1</span>]</span><br><span class="line">c = np.where(a &gt; b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'a.shape: '</span>, a.shape)</span><br><span class="line">print(<span class="string">'type(c): '</span>, type(c))</span><br><span class="line">print(<span class="string">'c: '</span>, c)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.shape:  (10,)</span><br><span class="line">type(c):  &lt;class &apos;tuple&apos;&gt;</span><br><span class="line">c:  (array([5, 6, 7, 8, 9], dtype=int64),)</span><br></pre></td></tr></table></figure><p>可以发现输出的类型是<strong>基本元素类型为numpy.ndarray</strong>组成的tuple类（由于单个元素作tuple时，元素后面要加逗号，因此上面的int64括号后有个逗号），那么一维的情况下，得到实际需要的下标就取第一个元素c[0]，像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(c[<span class="number">0</span>]) <span class="comment"># 这里修改成c[0]就可以拿到实际你需要的下表列表</span></span><br></pre></td></tr></table></figure><p>再来个二维的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = np.where(a &gt; <span class="number">3</span>)</span><br><span class="line">print(<span class="string">'a.shape: '</span>, a.shape)</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">'b[0]: '</span>, b[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'b[1]: '</span>, b[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.shape:  (2, 3)</span><br><span class="line">(array([1, 1, 1], dtype=int64), array([0, 1, 2], dtype=int64))</span><br><span class="line">b[0]:  [1 1 1]</span><br><span class="line">b[1]:  [0 1 2]</span><br></pre></td></tr></table></figure><p>由此可以发现np.where实际输出的是符合条件的元素本身的下标在各自维度组成的多个<strong>numpy.ndarray</strong>打包成的tuple。这样输出一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(b[<span class="number">0</span>], b[<span class="number">1</span>]):</span><br><span class="line">    print(a[x][y])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>总结一下，假如condition中有<strong>n</strong>个元素符合条件，设它们为<strong>m</strong>维元素，记为</p><script type="math/tex; mode=display">a^{(i)}[d^{(i)}_1][d^{(i)}_2][d^{(i)}_3]...[d^{(i)}_m], i=1...n</script><p>那么np.where返回的就是</p><script type="math/tex; mode=display">tuple([d^{(1)}_1,d^{(2)}_1,d^{(3)}_1...d^{(n)}_1],[d^{(1)}_2,d^{(2)}_2,d^{(3)}_2...d^{(n)}_2],...,[d^{(1)}_m,d^{(2)}_m,d^{(3)}_m...d^{(n)}_m])</script><hr><h1 id="二、np-where-condition-a-b"><a href="#二、np-where-condition-a-b" class="headerlink" title="二、np.where(condition, a, b)"></a>二、np.where(condition, a, b)</h1><p>此函数比较复杂，讲下简单的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = a[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(np.where(a &gt; b, <span class="literal">True</span>, <span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[False False  True  True]</span><br></pre></td></tr></table></figure><p>输出一个<strong>numpy.ndarray</strong>，shape与condition中比较的参数形状相同，若condition为真，则该位置赋值为a，否则赋值为b。</p><p>二维情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">b = a[::<span class="number">-1</span>]</span><br><span class="line">print(b)</span><br><span class="line">print(np.where(a &gt; b, <span class="literal">True</span>, <span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[False False False False]</span><br><span class="line"> [ True  True  True  True]]</span><br></pre></td></tr></table></figure><p>个人感觉主要用于减少循环语句的使用，因为python numpy模块就是注重效率和运算向量化，因此有必要加强封装性和减少显式循环代码</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> python </category>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩存储BitMap简单入门</title>
      <link href="/2019/03/14/%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8BitMap%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
      <url>/2019/03/14/%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8BitMap%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h1><a id="more"></a><p>把数字”哈希”到某一个位置$x$，然后将这个位置标为$1$，代表这个映射位置有值存在了。关键在于如何”哈希”？我的理解是先将数字分到某一块，再把余数作为映射位置（有点像Cache的组相联映射）。</p><p>压缩公式：$x = i*B+j$，$0\le j \lt B$，$B$为用于压缩存储的数字的最大位数，那么$i$就是压缩后存储的块，$j$就是该块中标记$x​$存在的位置</p><p>举个例子，现在将579这个数字放入BitMap，那么$579=18*32+3​$，让BitMap[18]的第3位为1即可。代码就是<code>bit[579 &gt;&gt; 5] |= (1 &lt;&lt; (579 &amp; 31));</code><br>查询操作，就是将查询的数按上述公式分解，去查对应位是否为1即可。<br>取数操作，就是遍历所有的BitMap[i]，若某一位j为1，则说明存在。</p><h1 id="压缩效率简单分析"><a href="#压缩效率简单分析" class="headerlink" title="压缩效率简单分析"></a>压缩效率简单分析</h1><p>假设我们用M位二进制的整数去存N个数字，那么实际上每一个数字最多压缩后占1位，最佳情况只需N/M个整数作为BitMap，因此假如用32位的int，1e9的数字只用3e7+的数字去存储。压缩倍数为$B$倍</p><h1 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h1><p>由于位运算只能有0和1的状态，因此重复的数据只能算一个。</p><h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) emplace_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(i,f_start,f_end) for(int i=f_start;i&lt;f_end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fe(i,f_start,f_end) for(int i=f_start;i&lt;=f_end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bit[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clr(bit, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bit[x &gt;&gt; <span class="number">5</span>] |= (<span class="number">1</span> &lt;&lt; (x &amp; <span class="number">31</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bit[x &gt;&gt; <span class="number">5</span>] &amp; (<span class="number">1</span> &lt;&lt; (x &amp; <span class="number">31</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getall() &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ret;</span><br><span class="line">        fl(i, <span class="number">0</span>, N) &#123;</span><br><span class="line">            fl(j, <span class="number">0</span>, <span class="number">32</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bit[i] &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">                    ret.pb((i &lt;&lt; <span class="number">5</span>) + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; bitmap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fl(i, <span class="number">0</span>, v.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, v[i], <span class="string">" \n"</span>[i == (<span class="keyword">int</span>)v.size() - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> testnum = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//生成testnum个随机数用于测试</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    fl(i,<span class="number">0</span>,testnum)</span><br><span class="line">        test.pb(rand() % N);</span><br><span class="line">    sort(all(test));<span class="comment">//排个序便于观察</span></span><br><span class="line"></span><br><span class="line">    show(test);</span><br><span class="line">    fl(i, <span class="number">0</span>, testnum)</span><br><span class="line">    bitmap.insert(test[i]);</span><br><span class="line">    show(bitmap.getall());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU复试七门知识点个人版整理</title>
      <link href="/2019/03/10/HDU%E5%A4%8D%E8%AF%95%E4%B8%83%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%AA%E4%BA%BA%E7%89%88%E6%95%B4%E7%90%86/"/>
      <url>/2019/03/10/HDU%E5%A4%8D%E8%AF%95%E4%B8%83%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%AA%E4%BA%BA%E7%89%88%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据结构（-算法）"><a href="#一、数据结构（-算法）" class="headerlink" title="一、数据结构（+算法）"></a>一、数据结构（+算法）</h1><a id="more"></a><ol><li><p><strong>数组</strong></p><ol><li>寻找数组中第二小的元素：设置$Firstmin$和$Secondmin$更新时分类讨论即可</li><li>找到数组中第一个不重复出现的整数：Hashmap+$O(n)$暴力统计</li></ol></li><li><p><strong>栈</strong></p><ol><li>2个栈模拟1个队列：push暂时存s1，s2里pop；s2被pop为空时将s1的全部push到s2，再在s2里pop</li></ol></li><li><p><strong>队列</strong></p></li><li><p><strong>链表</strong></p><ol><li><p>反转链表：新建一个链表用头插法，返回一个全新的链表L2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp.init(p);</span><br><span class="line">temp-&gt;next = L2-&gt;next;</span><br><span class="line">L2-&gt;next = temp</span><br></pre></td></tr></table></figure></li><li><p>检测链表中的环：快慢指针p1​和p2，若有环则迟早相遇。</p></li><li><p>返回倒数第$k​$个元素：让指针p1比p2早走$k-1​$步，p2到最后一个节点（p2-&gt;next==NULL)时，p1所指即是目标元素</p></li><li><p>无序链表去重$O(n^2)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_multielem</span><span class="params">(Node *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *cur = L-&gt;nxt, *p, *q;</span><br><span class="line">    <span class="keyword">while</span> (cur)</span><br><span class="line">    &#123;</span><br><span class="line">        p = cur;</span><br><span class="line">        q = cur-&gt;nxt;</span><br><span class="line">        <span class="keyword">while</span> (q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(q-&gt;val) == <span class="built_in">abs</span>(cur-&gt;val))<span class="comment">//删除q所指的元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;nxt = q-&gt;nxt;</span><br><span class="line">                q = q-&gt;nxt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q = q-&gt;nxt;</span><br><span class="line">                p = p-&gt;nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;nxt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol><li><p><strong>树</strong></p><ol><li>检测图是否为树：基图连通、每个结点的父节点只能有一个</li></ol></li><li><p><strong>图</strong></p></li><li><p><strong>字典树</strong></p><ol><li><p>简单实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">2</span>], v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)&#123;</span><br><span class="line">            L[u].nxt[v] = newnode();</span><br><span class="line">        &#125;</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">        L[u].cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> val)</span><span class="comment">//查询异或最大值&#123;</span></span></span><br><span class="line">    bitset&lt;31&gt;s(val);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i];</span><br><span class="line">        <span class="keyword">if</span> (L[L[u].nxt[v ^ <span class="number">1</span>]].cnt)</span><br><span class="line">            u = L[u].nxt[v ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L[u].v;<span class="comment">//返回能与val异或得到最大值的拎一个数L[u].v</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>压缩存储BitMap</p><ol><li><p>简单实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BitMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bit[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clr(bit, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        bit[x &gt;&gt; <span class="number">5</span>] |= (<span class="number">1</span> &lt;&lt; (x &amp; <span class="number">31</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bit[x &gt;&gt; <span class="number">5</span>] &amp; (<span class="number">1</span> &lt;&lt; (x &amp; <span class="number">31</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getall() &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ret;</span><br><span class="line">        fl(i, <span class="number">0</span>, N) &#123;</span><br><span class="line">            fl(j, <span class="number">0</span>, <span class="number">32</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bit[i] &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">                    ret.pb((i &lt;&lt; <span class="number">5</span>) + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bitmap;</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h1 id="二、计算机组成原理"><a href="#二、计算机组成原理" class="headerlink" title="二、计算机组成原理"></a>二、计算机组成原理</h1><ol><li><p><strong>RISC与CISC指令集</strong></p><p>从硬件角度来看CISC处理的是<strong>不等长指令集</strong>，RISC执行的是<strong>等长精简指令集</strong></p></li><li><p><strong>流水线技术</strong></p><p>流水线技术是一种将每条指令分解为多步，并让各步操作重叠，从而实现几条指令并行处理的技术。</p></li><li><p><strong>存储器层次结构</strong></p><p>随机访问存储器：</p><ol><li>SRAM（双稳态触发器存储、易失、速度快）</li><li>DRAM（栅极电容存储、易失、地址复用技术）</li></ol></li><li><p><strong>局部性原理</strong></p><ol><li><strong>时间局部性</strong>（Temporal Locality）：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。程序循环、堆栈等是产生时间局部性的原因。</li><li><strong>空间局部性</strong>（Spatial Locality）：在最近的将来将用到的信息很可能与现在正在使用的信息在空间地址上是临近的。</li></ol></li><li><p><strong>虚拟存储器</strong>：为了给大的程序提供方便，使它们摆脱主存容量的限制，可以由操作系统把主存和辅存这两级存储系统管理起来，实现自动覆盖。</p></li><li><p><strong>中断</strong></p><ol><li>基本概念：执行现行程序时出现异常情况或特殊请求，CPU暂时中止转而去处理这些紧急情况，处理完毕后继续执行原程序</li><li>中断大概阶段：中断请求、中断判优、中断响应、中断处理和中断返回。</li><li>断点：断点是一个信号，它通知调试器，在某个特定点上暂时将程序执行挂起（进入中断状态）</li></ol></li></ol><hr><h1 id="三、操作系统"><a href="#三、操作系统" class="headerlink" title="三、操作系统"></a>三、操作系统</h1><ol><li><p><strong>进程</strong>：并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念。</p></li><li><p><strong>线程</strong>：是进程的一个执行单元，是进程内调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</p></li><li><p><strong>死锁</strong>：<br>死锁是指一组进程中的各个进程均占有不会释放的资源，但因互相申请被其他进程所占用不会释放的资源而处于的一种永久等待状态</p><ol><li><strong>产生死锁的四个必要条件：</strong><ol><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol></li><li><strong>避免死锁的方法：</strong>银行家算法</li></ol></li><li><p><strong>进程的三种状态</strong></p><ol><li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源 </li><li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数 </li><li>阻塞状态： 进程等待某种条件，在条件满足之前无法执行</li></ol></li><li><p><strong>页面置换算法</strong></p><ol><li>FIFO算法：淘汰最早调入的页面（队列思想）</li><li>OPT（MIN）：选未来最远将使用的页淘汰，是一种最优的方案，可以证明缺页数最小（不可实现）</li><li>LRU（Least recently use）最近最少使用算法：根据使用时间到现在的长短来判断；</li><li>LFU（Least frequently use）最少使用次数算法：根据使用次数来判断；</li></ol></li><li><p><strong>进程间的通信的几种方式</strong></p><ol><li>管道（pipe）及命名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；</li><li>信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li><li>消息队列：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；</li></ol></li><li><p><strong>线程同步的方式</strong></p><ol><li>互斥量 Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问</li><li>信号量 Semphare：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量</li><li>事件(信号) Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</li></ol></li></ol><hr><h1 id="四、计算机网络"><a href="#四、计算机网络" class="headerlink" title="四、计算机网络"></a>四、计算机网络</h1><ol><li><strong>TCP/IP五层模型</strong><ol><li>物理层：<br>负责比特流的透明传输。</li><li>链路层：<br>负责传输网络层交下来的数据，有封装成帧、透明传输、差错检测三大问题。ARP、RARP协议</li><li>网络层:<br>负责为分组交换网上的不同主机提供通信服务。IP、ICMP、IGMP、RIP、OSPF</li><li>运输层：<br>负责向两个主机中进程之间的通信提供服务。TCP、UDP</li><li>应用层：<br>直接为用户的应用进程提供服务（例如电子邮件、文件传输和终端仿真）HTTP、FTP、TELNET</li></ol></li><li><strong>RIP协议</strong><br>原理：采用<strong>距离向量路由协议</strong> ，周期性的发送自己的全部的路由信息，进行路由更新时传递路由表</li><li><strong>OSPF协议</strong><br>原理：采用<strong>链路状态路由协议</strong>，周期性的发送链路状态信息，使得区域内所有路由器最终都能形成一个跟踪网络链路状态的链路状态数据库</li><li><strong>TCP 与 UDP 的区别</strong><ol><li>UDP是面向无连接的，不可靠的数据报服务；</li><li>TCP是面向连接的，可靠的字节流服务。</li></ol></li><li><strong>TCP 的可靠性如何保证？</strong><br>TCP的可靠性是通过顺序编号和确认（ACK）来实现的。</li><li><strong>路由设备与相关层</strong><ol><li>物理层 ：中继器（Repeater，也叫放大器），集线器。</li><li>数据链路层 ：网桥，交换机。</li><li>网络层 ：路由器。</li><li>网关 ：网络层以上的设备。</li></ol></li></ol><hr><h1 id="五、软件工程"><a href="#五、软件工程" class="headerlink" title="五、软件工程"></a>五、软件工程</h1><ol><li><strong>瀑布模型：</strong><br>特点：阶段间具有顺序性和依赖性<br>优点：有质量保证<br>缺点：开始需要把需求做到最全，需求变更麻烦</li><li><strong>螺旋模型</strong>：<br>特点：强调风险分析，适应于内部的大规模软件开发<br>优点：设计灵活、客户始终参与每个阶段的开发<br>缺点：开发周期长</li><li><strong>增量模型</strong><br>特点：将待开发的软件系统模块化和组件化<br>优点：人员分配灵活，刚开始不用投入大量人力资源<br>缺点：加入构件必须不破坏已构造好的系统部分，这需要软件具备开放式的体系结构</li><li><strong>快速原型模型</strong><br>特点：迅速建造一个可以运行的软件原型<br>优点：克服瀑布模型的缺点,减少由于软件需求不明确带来的开发风险<br>缺点：快速建立起来的系统结构加上连续的修改可能会导致产品质量低下</li><li><strong>喷泉模型</strong><br>特点：开发阶段可以交互进行<br>优点：提高开发效率，适合面向对象的软件开发过程<br>缺点：要求严格管理文档，不利于项目的管理</li><li><strong>软件生命周期</strong>：一个软件从提出开发要求开始直到该软件报废为止的整个时期。</li><li><strong>软件设计的基本原理</strong>：模块化、抽象、信息屏蔽、模块独立性</li><li><strong>面向对象的特征是</strong>：对象唯一性、分类性、继承性、多态性</li><li><strong>黑盒测试和白盒测试有何区别，黑盒测试有哪些常用方法：</strong>前者基于功能，后者基于结构；黑盒测试常用方法有：边界值、等价类、因果图、错误推测法等</li><li><strong>软件测试要经过的步骤是</strong>：单元测试→集成测试→确认测试→系统测试</li><li><strong>软件生命周期划分为哪几个阶段？</strong><ol><li>软件生命周期分为三个时期八个阶段：</li><li>软件定义：问题定义、可行性研究；</li><li>软件开发：需求分析、概要设计、详细设计、编码、测试；</li><li>软件运行：软件维护</li></ol></li><li><strong>简述三种面向对象模型的主要功能</strong>？<ol><li>对象模型：表示了静态的结构化的系统数据性质，描绘了系统的静态结构，从客观世界实体的对象关系角度来描绘对象。</li><li>动态模型：该模型描述了系统的控制结构，它表示了瞬间的、行为化的系统控制性质，它关心的是系统的控制及操作的执行顺序，它从对象的事件和状态的角度出发，表现了对象的交互行为。</li><li>功能模型：表示变化的系统“功能”性质，它指明系统应该“做什么”，因此功能模型更直接的反映了用户对目标系统的要求。</li></ol></li></ol><hr><h1 id="六、数据库"><a href="#六、数据库" class="headerlink" title="六、数据库"></a>六、数据库</h1><ol><li><p><strong>视图和表的区别</strong>：</p><ol><li>数据都是存储在表中的，而视图只是一个或多个表依照某个条件组合而成的结果集，一般来说你可以用update，insert，delete等sql语句修改表中的数据，而对视图只能进行select操作。</li></ol></li><li><p><strong>事务的ACID特性</strong>：</p><ol><li>原子性（<strong>A</strong>tomicity）<br>事务是一个不可再分割的工作单位</li><li>一致性（<strong>C</strong>onsistency）<br>执行一个事务前和后，数据库的完整性约束没有没有被破坏</li><li>隔离性（<strong>l</strong>solation）<br>多个事务并发时，每个事务应该是隔离的</li><li>持久性（<strong>D</strong>urability）<br>事务执行完成后，事务对数据库的更改便持久到了数据库中，这个更改是永久的</li></ol></li><li><p><strong>数据库的锁</strong></p><ol><li><strong>行级锁</strong>：是一种排他锁，防止其他事务修改此行</li><li><strong>表级锁</strong>：<ol><li>行共享 (ROW SHARE) – 禁止排他锁定表</li><li>行排他(ROW EXCLUSIVE) – 禁止使用排他锁和共享锁</li><li>共享锁(SHARE) - 锁定表，对记录只读不写，多个用户可以同时在同一个表上应用此锁</li><li>共享行排他(SHARE ROW EXCLUSIVE) – 比共享锁更多的限制，禁止使用共享锁及更高的锁</li><li>排他(EXCLUSIVE) – 限制最强的表锁，仅允许其他用户查询该表的行。禁止修改和锁定表。</li></ol></li></ol></li><li><p><strong>什么是存储过程？有哪些优缺点？</strong></p><p>存储过程是一些预编译的SQL语句，执行效率比较高，安全性高；开发调试复杂。</p></li><li><p><strong>索引是什么？有什么作用以及优缺点？</strong></p><p>索引是对数据库表中一或多个列的值进行排序的结构，是帮助MySQL高效获取数据的数据结构</p></li><li><p><strong>什么是事务？</strong></p><p>并发控制的基本单位，一个操作序列，一个不可分割的工作单位。</p></li><li><p><strong>数据库的乐观锁和悲观锁是什么</strong>？</p><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p></li><li><p><strong>简单说一说drop、delete与truncate的区别</strong></p><p>delete和truncate只删除表的数据不删除表的结构<br>速度,一般来说: drop&gt; truncate &gt;delete </p><p>delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;</p><p>如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger. </p></li><li><p><strong>超键、候选键、主键、外键分别是什么？</strong></p><ol><li>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</li><li>候选键：是最小超键，即没有冗余元素的超键。</li><li>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</li><li>外键：在一个表中存在的另一个表的主键称此表的外键。</li></ol></li><li><p><strong>三个范式</strong></p><ol><li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</li><li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li><li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y。</li></ol></li></ol><hr><h1 id="七、编译原理"><a href="#七、编译原理" class="headerlink" title="七、编译原理"></a>七、编译原理</h1><ol><li><p><strong>编译过程四个阶段</strong>:</p><p>（.c）&gt;预处理（.i）&gt;编译（.s）&gt;汇编（.o）&gt;链接（.exe）</p><ol><li><p>预处理： 展开头文件/宏替换/去掉注释/条件编译（test.i, main.i）</p></li><li><p>编译： 检查语法，生成汇编（test.s  main.s）</p></li><li>汇编：  汇编代码转换机器码（test.o main.o）</li><li>链接：链接到一起生成可执行程序（a.out）</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复试笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10/7 tensorflow-gpu+keras深度学习工具安装及测试</title>
      <link href="/2019/02/06/WIN10-7-tensorflow-gpu-keras%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/02/06/WIN10-7-tensorflow-gpu-keras%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="零-预备条件"><a href="#零-预备条件" class="headerlink" title="零.预备条件"></a>零.预备条件</h1><ol><li>个人硬件环境：E3-1231V3+GTX970（4G） </li><li>个人软件环境：WIN7 SP1 64位（WIN10同理）</li></ol><a id="more"></a><h1 id="一-安装Anaconda-Python3-7并配置Python3-6的环境和其下必要包"><a href="#一-安装Anaconda-Python3-7并配置Python3-6的环境和其下必要包" class="headerlink" title="一.安装Anaconda Python3.7并配置Python3.6的环境和其下必要包"></a>一.安装Anaconda Python3.7并配置Python3.6的环境和其下必要包</h1><p>主要是用这个东西似乎管理起来方便一丢丢…<br>官方下载链接：<a href="https://repo.anaconda.com/archive/Anaconda3-2018.12-Windows-x86_64.exe" target="_blank" rel="noopener">Anaconda 2018.12 for Windows Installer Python 3.7 version</a></p><ol><li>安装过程中把加入系统路劲的那个英文选项勾上。</li><li>打开Anaconda Python3.7点击Create，选择python 3.6，名字方便点起为py36<img src="https://img-blog.csdnimg.cn/20190205152546186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190205152852499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Create好后点击py36标签激活加载它，点击绿色箭头，选择open Terminal</li><li><p>在这个Terminal中安装keras、tensorflow-gpu、numpy（注意是gpu版本），安装命令如下（把pip换成conda应该也可以）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install keras</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure></li><li><p>安装完后用pip list查看安装安装情况<br><img src="https://img-blog.csdnimg.cn/20190205153700548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果后期有提示什么version问题的，尽可能把这三个包括pip本身升级到最新版再试试。</p><h1 id="二-安装CUDA9-0和对应版本CUDNN并测试"><a href="#二-安装CUDA9-0和对应版本CUDNN并测试" class="headerlink" title="二.安装CUDA9.0和对应版本CUDNN并测试"></a>二.安装CUDA9.0和对应版本CUDNN并测试</h1><p>CUDNN的版本一定要对应CUDA，不然可能出问题。<br>下载地址：<br><a href="https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_windows-exe" target="_blank" rel="noopener">CUDA 9.0</a><br><a href="https://developer.download.nvidia.cn/compute/machine-learning/cudnn/secure/v7.3.1/prod/9.0_2018927/cudnn-9.0-windows7-x64-v7.3.1.20.zip?6cjaQttNkv4eA3RleyN9sQ_3HoL7uSH5pmKSDkF6MaMyHT_g4OFsyR1CaIVo_FCOGYHfHJ-aJ9vyuEofhhn4iDYZ5ZahhHCSZ2s8AV9urWU1Az6PXKWvszfADJdnmeP9uH0CYLVjHonloRuIoYZYDTreC3MVYGMtYlu_AsbP2lpymJhB7EMz2wLFrdGeNo0MDX36vUUChtsvyOVkUZo_qlI" target="_blank" rel="noopener">CUDNN 7.3.1.20</a><br>有时候安装CUDA报错也许是vs的那个关联组件安装失败，在安装的时候选项选自定义，然后把vs的那个integration那一个东西取消安装就行（因为我用pycharm而不用vs）</p></li><li>按照网上教程把CUDNN三个文件夹下的内容分别复制到CUDA的对应三个文件夹下</li><li>设置好CUDA的环境变量里的路径，我按照网上的某个教程是这样的<br><img src="https://img-blog.csdnimg.cn/20190205154627597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190205154642406.png" alt="在这里插入图片描述"></li><li>测试cuda是否安装好及环境变量是否设置好<br>在刚才的Terminal或者直接系统本身的cmd里输入nvcc —version，如果出现这样的提示，说明安装正常<br><img src="https://img-blog.csdnimg.cn/20190205154839504.png" alt="在这里插入图片描述"><h1 id="三-安装Pycharm（社区免费版）并测试tensorflow-gpu代码"><a href="#三-安装Pycharm（社区免费版）并测试tensorflow-gpu代码" class="headerlink" title="三.安装Pycharm（社区免费版）并测试tensorflow-gpu代码"></a>三.安装Pycharm（社区免费版）并测试tensorflow-gpu代码</h1>下载地址：<a href="https://download.jetbrains.8686c.com/python/pycharm-community-2018.3.4.exe" target="_blank" rel="noopener">JetBrains PyCharm Community Edition 2018.3.4 x64</a></li><li>安装好之后新建项目，在项目里这样新建一个测试的代码文件<br><img src="https://img-blog.csdnimg.cn/20190205155255329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><p>然后把以下代码复制进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure></li><li><p>此时不能直接运行，点击界面的File-Settings-Project:你的包名-Project interpreter-<br><img src="https://img-blog.csdnimg.cn/20190205155452304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击小齿轮-选择add<img src="https://img-blog.csdnimg.cn/20190205155631196.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019020515563930.png" alt="在这里插入图片描述"><br>在跳出来的界面中选择Existing environment<br><img src="https://img-blog.csdnimg.cn/20190205155843769.png" alt="在这里插入图片描述"><br>选择一开始安装的py36环境对应的文件夹下的python.exe，我的路径：<img src="https://img-blog.csdnimg.cn/20190205155928401.png" alt="在这里插入图片描述"><br>然后等待一下等upgrade和indexing完毕之后，在代码文件这里按ctrl+shfit+F10运行文件。如果跳出下面的提示，则成功用到了tensorflow-gpu<br><img src="https://img-blog.csdnimg.cn/20190205160909178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4ODc3MDIwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>另外如果出现了numpy的版本什么0xb和0xc的报错，则去<code>anaconda\envs\py36\Lib\site-packages</code>路径下把与numpy有关的三个包文件夹删掉，然后重新在py36的Terminal里安装numpy<code>pip install numpy</code></strong></p></li></ol><h1 id="四-小结"><a href="#四-小结" class="headerlink" title="四.小结"></a>四.小结</h1><p>至此应该可以算是入门级基本运用了tensorflow-gpu了，后面再来的训练上和输出展示啥的要的包比如opencv，matplot什么的自己用命令或者anaconda界面里安装一下，缺啥装啥就行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #485 Div.2题解</title>
      <link href="/2018/05/31/CF-485-Div-2%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/05/31/CF-485-Div-2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Infinity-Gauntlet"><a href="#A-Infinity-Gauntlet" class="headerlink" title="A.Infinity Gauntlet"></a><a href="http://codeforces.com/contest/987/problem/A" target="_blank" rel="noopener">A.Infinity Gauntlet</a></h1><p>水题。</p><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[<span class="string">"purple"</span>] = <span class="string">"Power"</span>;</span><br><span class="line">    st[<span class="string">"green"</span>] = <span class="string">"Time"</span>;</span><br><span class="line">    st[<span class="string">"blue"</span>] = <span class="string">"Space"</span>;</span><br><span class="line">    st[<span class="string">"orange"</span>] = <span class="string">"Soul"</span>;</span><br><span class="line">    st[<span class="string">"red"</span>] = <span class="string">"Reality"</span>;</span><br><span class="line">    st[<span class="string">"yellow"</span>] = <span class="string">"Mind"</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        st[s] = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sz =  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : st)</span><br><span class="line">        <span class="keyword">if</span> (x.second != <span class="string">""</span>)</span><br><span class="line">            ++sz;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : st)</span><br><span class="line">        <span class="keyword">if</span> (x.second != <span class="string">""</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, x.second.c_str());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-High-School-Become-Human"><a href="#B-High-School-Become-Human" class="headerlink" title="B.High School: Become Human"></a><a href="http://codeforces.com/contest/987/problem/B" target="_blank" rel="noopener">B.High School: Become Human</a></h1><p>给定整数$x、y$，求$x^y$和$y^x$的大小关系，首先肯定用<code>log</code>函数取一下对数，然后再设稍微小一点的<code>eps</code>比较一下即可。这里注意用<code>long double</code>提高一下精度，<code>double</code>会出现一些奇奇怪怪的问题。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LF;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-15</span>;</span><br><span class="line">LF a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        LF xx = b * <span class="built_in">log10</span>(a), yy = a * <span class="built_in">log10</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (xx == yy)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(xx &gt; yy ? <span class="string">"&gt;"</span> : <span class="string">"&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Three-displays"><a href="#C-Three-displays" class="headerlink" title="C.Three displays"></a><a href="http://codeforces.com/contest/987/problem/C" target="_blank" rel="noopener">C.Three displays</a></h1><p>题意就是给定长度为$n$的数列$S$和$C$，求三个数满足$i \lt j \lt k，S_i \lt S_j \lt S_k$的情况下$C_i + C_j + C_k$的最小值，对于这种三元之间的关系问题可以考虑枚举中间那个数来优化复杂度至$O(n ^ 2)$。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3010</span>;</span><br><span class="line"><span class="keyword">int</span> n, s[N];</span><br><span class="line">ll c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sf(s[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sfl(c[i]);</span><br><span class="line">    ll inf = <span class="number">1l</span>l &lt;&lt; <span class="number">60</span>;</span><br><span class="line">    ll ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l = inf, r = inf;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] &lt; s[i])</span><br><span class="line">                l = min(l, c[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] &gt; s[i])</span><br><span class="line">                r = min(r, c[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l != inf &amp;&amp; r != inf)</span><br><span class="line">            ans = min(ans, l + r + c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans == inf ? <span class="number">-1l</span>l : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Fair"><a href="#D-Fair" class="headerlink" title="D.Fair"></a><a href="http://codeforces.com/contest/987/problem/D" target="_blank" rel="noopener">D.Fair</a></h1><p>题意就是给定$n$个城市和$m$条边权为$1$的无向边，有$k$种商品，每个城市一开始已有一种商品$a_i$，求至少个其他城市的人带自己城市的商品到第$i$个城市，使得城市$i$收集到至少$s$种商品的最小花费。</p><p>由于商品的种类数最多$100$个，因此可以考虑已商品为点，枚举商品时把具有当前商品的城市的花费设为$0$，其他为$ +\infty$，做$k$次多源<code>BFS</code>，即用$dis[i][j]$表示运送第$j$种商品到第$i$个城市的最小花费。然后每个$dis[i]$取前$s$小个花费相加即可。</p><p><strong>这里有个小优化技巧，求数组的前k大可以用<code>nth_element(begin, begin + k, end)</code>这个函数，而不用每次都<code>sort</code></strong></p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, s, a[N], d[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;</span><br><span class="line">&#125; E[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clr(head, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">    E[tot] = edge(s, head[t]);</span><br><span class="line">    head[t] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    clr(d, INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] == c)</span><br><span class="line">            d[i] = <span class="number">0</span>, Q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i].pb(d[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> i, x, y;</span><br><span class="line">    sf(n), sf(m), sf(k), sf(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        sf(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sf(x), sf(y);</span><br><span class="line">        add(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        bfs(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;    </span><br><span class="line">        nth_element(dis[i].begin(), dis[i].begin() + s, dis[i].end());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, accumulate(dis[i].begin(), dis[i].begin() + s, <span class="number">0</span>), <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Petr-and-Permutations"><a href="#E-Petr-and-Permutations" class="headerlink" title="E.Petr and Permutations"></a><a href="http://codeforces.com/contest/987/problem/E" target="_blank" rel="noopener">E.Petr and Permutations</a></h1><p>题意就是存在一个长度为$n$的初始排列，<code>Petr</code>会对一个排列做$3n$次两两元素随机交换，而<code>Um_nik</code>会做$7n + 1$次，现给定排列后的结果，求是<code>Petr</code>做的还是<code>Um_nik</code>做的。</p><p>由于题目是结果唯一的，那就是符合所有特殊情况，考虑一种特殊情况——他们两个人运气够好，使得相邻的两次交换总是互相抵消，而交换元素位置会使得逆序数的奇偶发生改变（一开始的初始序列逆序数为$0$），逆序数嘛<code>BIT</code>搞搞，注意开<code>long long</code>就好。</p><p>那么只要看交换次数是奇数还是偶数就行了。因此分类讨论一下</p><ol><li>当$n$为奇数时，$3n$为奇数，$7n + 1$为偶数，如果逆序数是奇数则肯定是<code>Petr</code>，否则为<code>Um_nik</code></li><li>当$n$为偶数时，$3n$为偶数，$7n + 1$为奇数，如果逆序数是奇数则肯定是<code>Um_nik</code>，否则为<code>Petr</code></li></ol><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, i, a[N], T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k] += v;</span><br><span class="line">        k += (k &amp; -k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        w += T[k];</span><br><span class="line">        k -= (k &amp; -k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ll w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sf(a[i]);</span><br><span class="line">        w += ((ll)(i - <span class="number">1</span>) - sum(a[i]));</span><br><span class="line">        add(a[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(w &amp; <span class="number">1</span> ? <span class="string">"Petr"</span> : <span class="string">"Um_nik"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(w &amp; <span class="number">1</span> ? <span class="string">"Um_nik"</span> : <span class="string">"Petr"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-AND-Graph"><a href="#F-AND-Graph" class="headerlink" title="F.AND Graph"></a><a href="http://codeforces.com/contest/987/problem/F" target="_blank" rel="noopener">F.AND Graph</a></h1><p>题意就是给你$n、m$，表示有$m$个数大小在$[0, 2 ^ n - 1]$之间，如果有两个数$a \&amp; b = 0$，那么这两个数之间有一条无向边，求这$m$个数最终分成几个连通块。<br>自己<code>YY</code>了很久没调出来滚去看题解了。</p><ol><li>显然一个数本身可以和其补码相连；</li><li>补码的任意为$0$的位置可以改为$1$，因为这样再做一次补码后该位会变回$0$，不会改变按位与为$0$的结果；</li><li>补码可以随时和补码的补码相连。<br>这样<code>DFS</code>一下就可以了。</li></ol><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfl(x) scanf(<span class="meta-string">"%lld"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[N], vis[N][<span class="number">2</span>], mx, sz, ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> - x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u, <span class="keyword">const</span> <span class="keyword">int</span> &amp;flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[u][flag])</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    vis[u][flag] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (u &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(u | (<span class="number">1</span> &lt;&lt; i), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ins[rs(u)])</span><br><span class="line">            dfs(rs(u), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        dfs(u, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sf(n), sf(m);</span><br><span class="line">    mx = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        sf(a[i]), ins[a[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[a[i]][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ++sz;</span><br><span class="line">            dfs(a[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> DFS </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wannafly挑战赛16 AB序列（三分求离散凹函数极值）</title>
      <link href="/2018/05/26/Wannafly%E6%8C%91%E6%88%98%E8%B5%9B16-AB%E5%BA%8F%E5%88%97/"/>
      <url>/2018/05/26/Wannafly%E6%8C%91%E6%88%98%E8%B5%9B16-AB%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 262144K，其他语言524288K<br>64bit IO Format: %lld</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给长度为$n$的序列$A$，长度为$m$的序列$B$。可以给A序列里每个元素加上$x$且$B$序列里每个元素减去$x$ ($x$可以是负数），问$\sum{|A_i|}+\sum{B_i}+|x|$的最小值</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行两个整数分别表示n,m</span><br><span class="line">接下来一行n个整数表示序列A</span><br><span class="line">接下来一行m个整数表示序列B</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数表示答案</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">-8</span> <span class="number">2</span> <span class="number">-4</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">-5</span> <span class="number">-4</span> <span class="number">-9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">57</span></span><br></pre></td></tr></table></figure><p>备注:</p><p>$1\le n,m\le 10^5$<br>序列中的数为绝对值不超过$10^9$的整数</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/113/B" target="_blank" rel="noopener">Wannafly挑战赛16 AB序列</a></p><p>学习并记录一下<strong>整型</strong>三分的一种基本姿势，用$midl$表示$l…r$中的中间位置，用$midr$表示$midl…r$中的中间位置，然后看哪一端更符合要求，最后注意还要特判最后留下的$l$和$r$到底哪个最优即可。</p><p><img src="https://s1.ax1x.com/2018/05/26/Cf2wDS.png" alt="Cf2wDS.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        w += llabs(a[i] + x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        w += llabs(b[i] - x);</span><br><span class="line">    <span class="keyword">return</span> w + llabs(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    sf(n), sf(m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, b + i);</span><br><span class="line">    ll l = <span class="number">-1e9</span> - <span class="number">10</span>, r = <span class="number">1e9</span> + <span class="number">10</span>, midl, midr;</span><br><span class="line">    <span class="keyword">while</span> (l + <span class="number">1</span> &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        midl = (l + r) &gt;&gt; <span class="number">1</span>, midr = (midl + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (calc(midl) &lt;= calc(midr))</span><br><span class="line">            r = midr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = midl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min(calc(l), calc(r)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 三分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Educational #44 A B C D E F</title>
      <link href="/2018/05/23/CF-Educational-44-A-B-C-D-E-F/"/>
      <url>/2018/05/23/CF-Educational-44-A-B-C-D-E-F/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Chess-Placing"><a href="#A-Chess-Placing" class="headerlink" title="A.Chess Placing"></a><a href="http://codeforces.com/contest/985/problem/A" target="_blank" rel="noopener">A.Chess Placing</a></h1><p>题意就是给你$n$个黑白相间的位置，其中放$n/2$个棋子，求把所有棋子从初始位置摆放成在全白或者全黑位置最少的移动次数。</p><a id="more"></a><p>由于棋子个数固定，显然是要么全放白要么全放黑，<code>sort</code>一遍暴力试一下两种情况取最小值即可。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>, pos = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        w += <span class="built_in">abs</span>(a[i] - pos);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = min(ans, w);</span><br><span class="line">    w = <span class="number">0</span>, pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        w += <span class="built_in">abs</span>(a[i] - pos);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = min(ans, w);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Switches-and-Lamps"><a href="#B-Switches-and-Lamps" class="headerlink" title="B.Switches and Lamps"></a><a href="http://codeforces.com/contest/985/problem/B" target="_blank" rel="noopener">B.Switches and Lamps</a></h1><p>题意就是给你$n$个开关，各自控制$m$盏灯中某些灯，问是否能不按某<strong>一个</strong>开关使得按下剩下的开关后所有的灯都会打开（灯一开始全部关闭且打开后不会再关闭）。</p><p>暴力检查一下是否剩余的开关能控制到所有$m$盏灯。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> sz[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    sf(n), sf(m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>)</span><br><span class="line">                ++sz[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ig = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>)</span><br><span class="line">                --sz[j];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sz[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ig = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ig)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>)</span><br><span class="line">                    ++sz[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Liebig’s-Barrels"><a href="#C-Liebig’s-Barrels" class="headerlink" title="C.Liebig’s Barrels"></a><a href="http://codeforces.com/contest/985/problem/C" target="_blank" rel="noopener">C.Liebig’s Barrels</a></h1><p>题意就是给你$n\times k$个木条，做$n$个水桶，每一个水桶的体积$v_i$为选择$k$条木条的最小值，且木桶的体积最大最小之差不能超过$l$，求最大的体积总和。</p><p>首先从大到小<code>sort</code>一下，最坏情况下用$a[nk-n+1]…a[nk]​$分别作为第$i​$个木桶的最小值，如果差值大于$l​$说明无法构成。</p><p>否则贪心地从大到小地记录一下当前可用的木条数$res$，如果$res&gt;=k$且当前的$a[i]-a[nk]&lt;=l$，那么就可以把当前的$k$根木条拿去做桶且体积刚好是$a[i]$。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cpx;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line">ll l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; l)</span><br><span class="line">    &#123;</span><br><span class="line">        m = n * k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a + i);</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + m, greater&lt;ll&gt;());</span><br><span class="line">        <span class="keyword">if</span> (a[m - n + <span class="number">1</span>] - a[m] &gt; l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ++res;</span><br><span class="line">            <span class="keyword">if</span> (a[i] - a[m] &lt;= l &amp;&amp; res &gt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                res -= k;</span><br><span class="line">                ans += a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, !res ? ans : <span class="number">0l</span>l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Sand-Fortress"><a href="#D-Sand-Fortress" class="headerlink" title="D.Sand Fortress"></a><a href="http://codeforces.com/contest/985/problem/D" target="_blank" rel="noopener">D.Sand Fortress</a></h1><p>题意就是给你$n$个沙袋和第一堆堆积高度的最大值$h$，求相邻堆积高度差不超过$1$的前提下最少要堆几堆。</p><p>首先可以肯定用贪心地方法去堆，由于最后要递减到$0$，因此后端一定是从最高高度$H$等差数列地下降，然后如果$H$大于$h$就还要算上左边堆砌到$H$的代价，也是一个等差数列求和。这样子二分出一个最高高度$H$，那么答案用$H$算就行了。这里有个细节就是如果右边堆砌到$H(\gt h)$，那么左边只需要堆砌到$H-1$就能接上了，不需要到$H$。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll n, h;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(ll H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t = n;</span><br><span class="line">    t -= (H * (H + <span class="number">1l</span>l)) / <span class="number">2l</span>l;</span><br><span class="line">    <span class="keyword">if</span>(t &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(H &gt; h)</span><br><span class="line">        t -= (h + H - <span class="number">1</span>) * (H - h) / <span class="number">2l</span>l;</span><br><span class="line">    <span class="keyword">if</span>(t &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; h)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l = <span class="number">1</span>, r = <span class="number">2e9</span> + <span class="number">10l</span>l, one = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            ll mid = MID(l, r);</span><br><span class="line">            <span class="keyword">if</span>(check(mid))</span><br><span class="line">            &#123;</span><br><span class="line">                one = mid;</span><br><span class="line">                l = mid + <span class="number">1l</span>l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1l</span>l;</span><br><span class="line">        &#125;</span><br><span class="line">        n -= one * (one + <span class="number">1l</span>l) / <span class="number">2l</span>l;</span><br><span class="line">        ll day = one;</span><br><span class="line">        <span class="keyword">if</span>(one &gt; h)</span><br><span class="line">        &#123;</span><br><span class="line">            day += one - h + <span class="number">1l</span>l;</span><br><span class="line">            n -= ((h + one) * (one - h + <span class="number">1l</span>l) / <span class="number">2l</span>l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, day + (ll)<span class="built_in">ceil</span>(<span class="number">1.0</span> * n / one));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Pencils-and-Boxes"><a href="#E-Pencils-and-Boxes" class="headerlink" title="E.Pencils and Boxes"></a><a href="http://codeforces.com/contest/985/problem/E" target="_blank" rel="noopener">E.Pencils and Boxes</a></h1><p>给你$n$支笔和对应长度，将这些笔分成许多组，每一组的大小要大于等于$k$，且同组内长度差的最大值不能超过$d$，求是否存在这种方案。</p><p>按照题解说的有个结论，如果将笔按长度有序排好那么如果方案存在，那么用连续的区间划分一定也可以作为方案，那么用$dp[i]$表示前$i$支笔是否能成功分配，那么有$dp[i] = dp[i] \;|\; dp[j]$，其中$a[i]-a[j+1]&lt;=d\&amp;\&amp;i-j \ge k$，那么就把$a$排序之后用指针实时调整到符合的位置，然后树状数组更新维护一下即可。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n, k, d;</span><br><span class="line"><span class="keyword">int</span> dp[N], T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++x;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        T[x] += v;</span><br><span class="line">        x += (x &amp; -x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++x;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        w += T[x];</span><br><span class="line">        x -= (x &amp; -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>  &amp;l, <span class="keyword">const</span> <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> sum(r) - sum(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clr(dp, <span class="number">0</span>);</span><br><span class="line">    clr(T, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; d)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            sf(a[i]);</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        add(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (a[i] - a[j] &gt; d)</span><br><span class="line">                ++j;</span><br><span class="line">            <span class="keyword">if</span> (S(j - <span class="number">1</span>, i - k))</span><br><span class="line">                dp[i] = <span class="number">1</span>, add(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(dp[n] ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Isomorphic-Strings"><a href="#F-Isomorphic-Strings" class="headerlink" title="F.Isomorphic Strings"></a><a href="http://codeforces.com/contest/985/problem/F" target="_blank" rel="noopener">F.Isomorphic Strings</a></h1><p>题意就是给你一个长度为$n$的字符串$s$和$m$个询问，问你某两个子串$S[x…x+d-1]$和$S[y…y+d-1]$是否是同构的，同构的意思就是把字符重新一一映射（置换）一下可以互相变成对方。</p><p>由于题解看不太懂，还是用别人的想法实现的，其实实现挺简单的，首先考虑如何判断字符串的同构，可以记录字符串中各个字母的出现位置，然后如果$s1$中的字符$a$和$s2$中的字符$b$出现位置集合一样，那么就可以将$a$映射到$b$，那么如果有多个字母就每个都验证一下，是否各自出现位置可以一一对应起来，那如何快速得到子串某个字母的出现位置集合信息呢？可以用$H[i][j]$表示长度为$i$的字符串字符$j$的目前所有出现位置的位置的哈希值，如果$S[i]==j$那么该位权值就是$1$否则就是$0$，这样每次把两个串的$26$个字母的位置集合哈希值都拿出来排个序看看是否可以一一对应即可。这题数据卡<code>ull</code>的自然溢出会<code>WA16</code>，<del>还是某个质数好用233333</del></p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">19260817l</span>l;</span><br><span class="line"><span class="keyword">const</span> ll bas = <span class="number">1e9</span> + <span class="number">9l</span>l;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">ll pre[N], H[N][<span class="number">26</span>], v[<span class="number">2</span>][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = (H[x + d - <span class="number">1</span>][i] - H[x - <span class="number">1</span>][i] * pre[d]) % mod;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="number">0</span>][i] &lt; <span class="number">0</span>)</span><br><span class="line">            v[<span class="number">0</span>][i] += mod;</span><br><span class="line"></span><br><span class="line">        v[<span class="number">1</span>][i] = (H[y + d - <span class="number">1</span>][i] - H[y - <span class="number">1</span>][i] * pre[d]) % mod;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="number">1</span>][i] &lt; <span class="number">0</span>)</span><br><span class="line">            v[<span class="number">1</span>][i] += mod;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v[<span class="number">0</span>], v[<span class="number">0</span>] + <span class="number">26</span>);</span><br><span class="line">    sort(v[<span class="number">1</span>], v[<span class="number">1</span>] + <span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="number">0</span>][i] != v[<span class="number">1</span>][i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    pre[<span class="number">0</span>] = <span class="number">1l</span>l;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] * bas % mod;</span><br><span class="line">    sf(n), sf(m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            H[i][j] = (H[i - <span class="number">1</span>][j] * bas + (s[i] == j + <span class="string">'a'</span> ? <span class="number">1l</span>l : <span class="number">0l</span>l)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;d);</span><br><span class="line">        <span class="built_in">puts</span>(check(x, y, d) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> DP </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #484 Div.2 A B C D</title>
      <link href="/2018/05/20/CF-484-Div-2-A-B-C-D/"/>
      <url>/2018/05/20/CF-484-Div-2-A-B-C-D/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Row"><a href="#A-Row" class="headerlink" title="A.Row"></a><a href="http://codeforces.com/contest/982/problem/A" target="_blank" rel="noopener">A.Row</a></h1><p>题意就是给你$n$个$01$串，问你是否已经存在两个人相邻的$1$或者可以使某些位置的$0$变成$1$且不出现相邻的$1$，虽是水题实际上有点坑，注意下两边的特判就行。<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(s[<span class="number">1</span>] == <span class="string">'1'</span> ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'1'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'1'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= n &amp;&amp; s[i] == <span class="string">'0'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'0'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= n &amp;&amp; s[i] == <span class="string">'0'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'0'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= n &amp;&amp; s[i] == <span class="string">'0'</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'0'</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">'0'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Bus-of-Characters"><a href="#B-Bus-of-Characters" class="headerlink" title="B.Bus of Characters"></a><a href="http://codeforces.com/contest/982/problem/B" target="_blank" rel="noopener">B.Bus of Characters</a></h1><p>题意就是$n$个内向和外向的人先后上公交车，按照一定的规则寻找他们要的座位，输出每个人所在座位的编号。</p><p>显然用堆模拟一下就就行了<code>STL</code>水题。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line">priority_queue&lt;pii&gt;in, ex;</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sf(w[i]);</span><br><span class="line">        in.push(&#123; -w[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'0'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pii a = in.top();</span><br><span class="line">            in.pop();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, a.second);</span><br><span class="line">            ex.push(&#123; -a.first, a.second&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pii a = ex.top();</span><br><span class="line">            ex.pop();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, a.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Cut-‘em-all"><a href="#C-Cut-‘em-all" class="headerlink" title="C.Cut ‘em all!"></a><a href="http://codeforces.com/contest/982/problem/C" target="_blank" rel="noopener">C.Cut ‘em all!</a></h1><p>题意就是给你$n$个点的树，求删掉尽量多的边使得剩下的连通块点数全为偶数。输出最多删掉的边数。</p><p>显然如果$n$为偶数则一定可以，奇数一定不行（因为不管怎么分总有至少一个连通块会是奇数个点）。然后对这棵树<code>DFS</code>一次统计一下每颗子树的点数，如果子树$v$的大小为偶数则将当前结点$u$连向$v$的边删掉，断开即可。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;E[N];</span><br><span class="line"><span class="keyword">int</span> sz[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            sz[u] += sz[v];</span><br><span class="line">            <span class="keyword">if</span> (sz[v] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, a, b;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sf(a), sf(b);</span><br><span class="line">        E[a].pb(b);</span><br><span class="line">        E[b].pb(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>), <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Shark"><a href="#D-Shark" class="headerlink" title="D.Shark"></a><a href="http://codeforces.com/contest/982/problem/D" target="_blank" rel="noopener">D.Shark</a></h1><p>题意就是给你$n$天鲨鱼的前进距离$d_1…d_n$，规定如果某一天前进的距离$d_i \lt k$，那么这天相当于在原地，否则相当于移动到了新的地方，求在移动到新地方的次数最多且在每段在原地的天数均相同的前提下最小的$k$。</p><p>补题的时候题解是俄文的看不懂，别人的代码更看不懂系列，只知道排序+并查集做，在纸上模拟了好一会儿终于想通补掉了。</p><p>首先先对移动距离排序，然后遍历这些移动距离，遍历的时候假设$1…i$天是在原地的，那么此时最小的$k’$应是$d_i+1$，然后过程中用并查集维护哪些天可以连成连续的一段和，用集合大小维护段的大小，再用一个数组维护集合大小的出现次数，由于条件是<strong>每段在原地的天数均相同</strong>，那么只能是集合大小均相同的时候才能更新答案$k$，再用一个变量维护不同集合大小的个数即可。遍历过程模拟把当前天激活，并看下左右相邻的日子是否可以合并过去变成连续的一段。中间更新下那几个数组就行了。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> pre[N], sz[N], cnt[N], n, lencnt, dx, one;</span><br><span class="line">pii a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clr(pre, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fd</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre[n] == <span class="number">-1</span> ? n : pre[n] = fd(pre[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mg</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = fd(a), b = fd(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[b] = a;</span><br><span class="line">        sz[a] += sz[b];</span><br><span class="line">        sz[b] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= n &amp;&amp; sz[fd(v)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[sz[fd(v)]] == <span class="number">0</span>)</span><br><span class="line">            --lencnt;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[sz[x]] == <span class="number">0</span>)</span><br><span class="line">            --lencnt;</span><br><span class="line">        mg(x, v);</span><br><span class="line">        <span class="keyword">if</span> (++cnt[sz[fd(v)]] == <span class="number">1</span>)</span><br><span class="line">            ++lencnt;</span><br><span class="line">    &#125;</span><br><span class="line">    v = x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">1</span> &amp;&amp; sz[fd(v)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[sz[fd(v)]] == <span class="number">0</span>)</span><br><span class="line">            --lencnt;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[sz[fd(x)]] == <span class="number">0</span>)</span><br><span class="line">            --lencnt;</span><br><span class="line">        mg(x, v);</span><br><span class="line">        <span class="keyword">if</span> (++cnt[sz[fd(v)]] == <span class="number">1</span>)</span><br><span class="line">            ++lencnt;</span><br><span class="line">    &#125;</span><br><span class="line">    one = cnt[sz[fd(x)]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    init();</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sf(a[i].first);</span><br><span class="line">        a[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sz[a[i].second] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (++cnt[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            ++lencnt;</span><br><span class="line">        check(a[i].second);</span><br><span class="line">        <span class="keyword">if</span> (lencnt == <span class="number">1</span> &amp;&amp; one &gt; dx)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = a[i].first + <span class="number">1</span>;</span><br><span class="line">            dx = one;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> STL </tag>
            
            <tag> DFS </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“浪潮杯”第九届山东省ACM大学生程序设计竞赛重现赛 B Bullet（二分+最大流）</title>
      <link href="/2018/05/19/%E6%B5%AA%E6%BD%AE%E6%9D%AF%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B-B-Bullet/"/>
      <url>/2018/05/19/%E6%B5%AA%E6%BD%AE%E6%9D%AF%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E9%87%8D%E7%8E%B0%E8%B5%9B-B-Bullet/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 65536K，其他语言131072K<br> 64bit IO Format: %lld</p><a id="more"></a><p>题目描述</p><p>In GGO, a world dominated by gun and steel, players are fighting for the honor of being the strongest gunmen. Player Shino is a sniper, and her aimed shot kills one monster at a time. Now she is in an n*n map, and there are monsters in some grids. Each monster has an experience. As a master, however, Shino has a strange self-restrain. She would kill at most one monster in a column, and also at most one in a row. Now she wants to know how to get max experience, under the premise of killing as many monsters as possible. </p><p>输入描述</p><p>The first line contains an integer $n$.<br>$n&lt;=500$<br>Then $n$ lines follow. In each line there are $n$integers, and $A<em>{ij}$ represents the experience of the monster at grid $(i,j)$.<br> If $A</em>{ij}=0$, there is no monster at grid $(i,j)$.<br>The experience is the minimal experience of all the monster which are killed.</p><p>It guaranteed that the maximum of the experience of the monster is not larger than $10^9$</p><p>输出描述</p><p>One integer, the value of max experience.</p><p>示例1</p><p>输入</p><p>2<br>2 0<br>1 8</p><p>输出</p><p>2</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/123/B" target="_blank" rel="noopener">B.Bullet</a></p><p>退役之后图论没怎么做了，只记得最短路了23333，实际是个简单题，很显然的网络流，考虑一行一列最多只能放一个，因此把行和列拿出来当做点，设源点为$S$，汇点为$T$，先把最低经验值设为$1$，跑一遍最大流得到最坏情况下的最多杀怪数，然后二分最小的经验值，每次选出大于等于当前假设经验值的怪物，重新建图跑最大流。</p><p>建图如下：</p><ol><li>对所有行建边：$(S,i,\infty)$</li><li>对所有列建边：$(j+n,T,\infty)$</li><li>如果位置$(i,j)$有怪物且其血量大于，则建边：$(i, n+j,1)$</li></ol><p><a href="https://imgchr.com/i/CgClSf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/05/20/CgClSf.md.png" alt="CgClSf.md.png"></a></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sf(x) scanf(<span class="meta-string">"%d"</span>, &amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _cap): to(_to), nxt(_nxt), cap(_cap) &#123;&#125;</span><br><span class="line">&#125; E[(N * N + <span class="number">2</span> * N) &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N &lt;&lt; <span class="number">1</span>], tot, d[N &lt;&lt; <span class="number">1</span>], G[N][N], n, S, T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sg &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        clr(head, <span class="number">-1</span>);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        E[tot] = edge(t, head[s], cap);</span><br><span class="line">        head[s] = tot++;</span><br><span class="line">        E[tot] = edge(s, head[t], <span class="number">0</span>);</span><br><span class="line">        head[t] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        clr(d, <span class="number">-1</span>);</span><br><span class="line">        d[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">                <span class="keyword">if</span> (d[v] == <span class="number">-1</span> &amp;&amp; E[i].cap &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~d[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == t || !f)</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[s]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[v] == d[s] + <span class="number">1</span> &amp;&amp; E[i].cap &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> df = dfs(v, t, min(f, E[i].cap));</span><br><span class="line">                <span class="keyword">if</span> (df &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    E[i].cap -= df;</span><br><span class="line">                    E[i ^ <span class="number">1</span>].cap += df;</span><br><span class="line">                    ret += df;</span><br><span class="line">                    f -= df;</span><br><span class="line">                    <span class="keyword">if</span> (!f)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            d[s] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs(s, t))</span><br><span class="line">            ret += dfs(s, t, INF);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sg::init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sg::add(S, i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] &gt;= k)</span><br><span class="line">                sg::add(i, j + n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sg::add(i + n, T, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sg::dinic(S, T);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    sf(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            sf(G[i][j]), r = max(r, G[i][j]);</span><br><span class="line">    S = <span class="number">0</span>, T = n &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = calc(<span class="number">1</span>), ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (calc(mid) &lt; b)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 图论 </category>
          
          <category> 网络流 </category>
          
          <category> 最大流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #480 Div.2 A B C D E</title>
      <link href="/2018/05/10/CF-480-Div-2-A-B-C-D-E/"/>
      <url>/2018/05/10/CF-480-Div-2-A-B-C-D-E/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Links-and-Pearls"><a href="#A-Links-and-Pearls" class="headerlink" title="A.Links and Pearls"></a><a href="http://codeforces.com/contest/980/problem/A" target="_blank" rel="noopener">A.Links and Pearls</a></h1><p>题意就是给你一个含有$\textbf{O}$和字符$\;—\;$的成环字符串，问你能不能重排一下使得相邻的$\textbf{O}$之间的$\;—\;$的数量相等，显然要相等只要剩余的横杠数量能被$\textbf{O}$均分掉即可，注意特判下没有$\textbf{O}$的情况。</p><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o = <span class="number">0</span>, _ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'o'</span>)</span><br><span class="line">                ++o;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ++_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>((_ % o == <span class="number">0</span>) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Marlin"><a href="#B-Marlin" class="headerlink" title="B.Marlin"></a><a href="http://codeforces.com/contest/980/problem/B" target="_blank" rel="noopener">B.Marlin</a></h1><p>题意就是给你一个$4\times n$的空地图，放$k$个障碍物，使得从$(1,1)$到$(4,n)$和$(4,1)$到$(1,n)$的最短路数量相同，感觉是个思维题，可以发现肯定不用去考虑具体的最短路数量是多少，而是考虑如何放置这$k$个障碍物使得对两条路线造成的影响相同。</p><ol><li>如果$k$是偶数，显然对称地放即可。</li><li>如果$k$是奇数，<ol><li>如果$k \le n-2$，那么显然对称地放到第一行即可。</li><li>否则把多出来的放到第二行，从两边向中间放，从右边开始，因为一旦封锁了右边，最短路就不会经过第三行，造成的方案损失就相等了。</li></ol></li></ol><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(s, <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt = k &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(k &amp; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                s[<span class="number">1</span>][i + <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">                s[<span class="number">2</span>][i + <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt;= n - <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s[<span class="number">1</span>][n &gt;&gt; <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (k - <span class="number">1</span>) / <span class="number">2</span>; ++i)</span><br><span class="line">                    s[<span class="number">1</span>][(n &gt;&gt; <span class="number">1</span>) + <span class="number">1</span> + i] = s[<span class="number">1</span>][(n &gt;&gt; <span class="number">1</span>) - <span class="number">1</span> - i] = <span class="string">'#'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> g[<span class="number">2</span>] = &#123;<span class="number">1</span>, n - <span class="number">2</span>&#125;;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i)</span><br><span class="line">                    --k, s[<span class="number">1</span>][i] = <span class="string">'#'</span>;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f)</span><br><span class="line">                        s[<span class="number">2</span>][g[f] - r] = <span class="string">'#'</span>, ++r;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        s[<span class="number">2</span>][g[f] + l] = <span class="string">'#'</span>, ++l;</span><br><span class="line">                    f ^= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c%s"</span>, s[i][j], j == n - <span class="number">1</span> ? <span class="string">"\n"</span> : <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Posterized"><a href="#C-Posterized" class="headerlink" title="C.Posterized"></a><a href="http://codeforces.com/contest/980/problem/C" target="_blank" rel="noopener">C.Posterized</a></h1><p>题意（看了好一会儿才懂）就是给你$n$个颜色用数值$1…256$表示，将他们分配到长度不超过$k$的连续集合中，求最后字典序最小的分配方案。一个分配方案用该连续区间中的任意一个颜色代表（显然优先用最左边的颜色）。</p><p>然后感觉这题是个YY题啊，贪心地看看每一个$color_i$往前考虑$k$个位置，贪心地把颜色归靠左的位置去。用并查集判断一下这个颜色是否被归并过，它所在的集合大小是多少，如果还能容纳当前的颜色，当然也是符合条件的。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>, M = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], belong[N];</span><br><span class="line"><span class="keyword">int</span> pre[M], sz[M], rev[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        sz[i] = <span class="number">1</span>, pre[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fd</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre[n] == n ? n : pre[n] = fd(pre[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mg</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = fd(a), b = fd(b);</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        swap(a, b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        sz[a] += sz[b];</span><br><span class="line">        sz[b] = <span class="number">0</span>;</span><br><span class="line">        pre[b] = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fd(a[i]) != a[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> ch = a[i];</span><br><span class="line">            <span class="keyword">int</span> fc = fd(a[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = a[i]; col &gt;= <span class="number">0</span> &amp;&amp; col &gt;= a[i] - k + <span class="number">1</span>; --col)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> f = fd(col);</span><br><span class="line">                <span class="keyword">if</span> (f == col &amp;&amp; sz[f] + sz[fc] &lt;= k)</span><br><span class="line">                    ch = col;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = a[i]; col &gt;= <span class="number">0</span> &amp;&amp; col &gt;= ch; --col)</span><br><span class="line">                mg(ch, col);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, fd(a[i]), <span class="string">" \n"</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Perfect-Groups"><a href="#D-Perfect-Groups" class="headerlink" title="D.Perfect Groups"></a><a href="http://codeforces.com/contest/980/problem/D" target="_blank" rel="noopener">D.Perfect Groups</a></h1><p>题意就是给你$n$个数，对$n\times (n+1)/2$个子区间都计算出其最小划分的集合数$k_i$，使得子区间被划分之后集合中任意两个数相乘为平方数。</p><p>看题解发现解法不难，就是有坑点比较猥琐而且常数比较大的算法容易超时。首先容易想到把数进行质数分解，得到质数底数及其对应指数，显然只要将奇数指数与$1$等价，偶数指数与$0$等价，然后这样每一个数$a_i$可以变换得到新的数$b_i$，然后考虑由这种$b_i$们组成的集合，怎么划分才是最小的，显然要成为平方数只能是双方指数同奇偶性，因此把相等的$b_i$划分到同一个集合中，也就是说这个集合中不同的数就是最小的划分数$k$。那么这样以来就是$O(n^2)$枚举同时维护子区间内不同数的个数，这里需要注意的坑点是如果区间内有$0$且不全为$0$，就不能考虑$0$，因为$0$可以被任意划分。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="comment">//typedef complex&lt;double&gt; cpx;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], ans[N], num[N];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">G</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> neg;</span><br><span class="line">    n &lt; <span class="number">0</span> ? neg = <span class="number">-1</span>, n = -n : neg = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                t ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t)</span><br><span class="line">                w *= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w * n * neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        num[i] = a[i];</span><br><span class="line">        a[i] = G(a[i]);</span><br><span class="line">        <span class="keyword">if</span> (!st.count(a[i]))</span><br><span class="line">            st.insert(pii(a[i], ++id));</span><br><span class="line">        a[i] = st[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt.reset();</span><br><span class="line">        <span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++ans[max(sz, <span class="number">1</span>)];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!cnt[a[j]])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt[a[j]] = <span class="number">1</span>;</span><br><span class="line">                ++sz;</span><br><span class="line">            &#125;</span><br><span class="line">            ++ans[sz];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-The-Number-Games"><a href="#E-The-Number-Games" class="headerlink" title="E.The Number Games"></a><a href="http://codeforces.com/contest/980/problem/E" target="_blank" rel="noopener">E.The Number Games</a></h1><p>题意就是给你$n$个点的<strong>树</strong>，每一个点$i$的权值为$2^i$，从中删掉$k$个点使得剩下的子图连通，使得最后留下的子图权值和最大，输出删除的点。</p><p>一开始感觉这题不就是贪心用<code>pq</code>删掉标号小的拓扑排序吗，实际上并不是这样的简单贪心，由于权值的特殊性，可以发现保留第$i$个点，比删掉剩下的$i-1$个点要优，因此应从大到小去考虑保留哪些点。假设当前要保留点$i$，那么还要保留的点是$i$到子图路径上的所有点（这样才能时刻保持子图连通性），那么就用<code>DFS</code>和<code>倍增</code>预处理一下路径长度和每个节点的$k$倍祖先，每次倍增找到第一个在子图中的祖先，保留路径上的点个数就是$dep[i] - dep[ancestor]$，可以保留的话就暴力把路径上所有点都标记为保留即可。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;</span><br><span class="line">&#125; E[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> dep[N], vis[N], fa[N][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    dep[u] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            dfs(v, u, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x] || !x)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    del(fa[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i, a, b, j;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        add(a, b);</span><br><span class="line">        add(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            fa[i][j] = fa[fa[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = n - k - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">    vis[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span> &amp;&amp; res &gt; <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x = i;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">20</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[x][j] &amp;&amp; !vis[fa[x][j]])</span><br><span class="line">                x = fa[x][j];</span><br><span class="line">        &#125;</span><br><span class="line">        x = fa[x][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> kpcnt = dep[i] - dep[x];</span><br><span class="line">        <span class="keyword">if</span> (res &lt; kpcnt)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        del(i);</span><br><span class="line">        res -= kpcnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> DFS </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛16 E 求值</title>
      <link href="/2018/04/28/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B16-E-%E6%B1%82%E5%80%BC/"/>
      <url>/2018/04/28/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B16-E-%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>题目描述</p><p>给定$n$个数字$a_1, a_2, …, a_n$。</p><a id="more"></a><p>定义$f(l, r)$ = $a<em>l | a</em>{l+1}| … | a_r$。<br>现在枚举$(1 \le l \le r \le n)$，问不同的$f$值一共有多少个。</p><p>输入描述:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数n表示数组大小 (1 &lt;= n &lt;= 100,000)；</span><br><span class="line">第二行n个整数满足0 &lt;= ai &lt;= 1000,000。</span><br></pre></td></tr></table></figure><p>输出描述:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数表示不同的f值一共有多少个。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 0</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>示例2</p><p>输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">1 2 3 4 5 6 1 2 9 10</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/84/E" target="_blank" rel="noopener">E.求值</a></p><p>赛后补题才会的（为什么感觉这题好像哪里见过233），枚举按位或的起始位置$L$，那么$a[L]$的第$i$位一旦在向右或的过程中变为$1$，那么之后这位再为$1$的数就不会产生贡献了，也就是说只有第一次让某位变$1$的数才有贡献，那么可以与预处理出第$i$个数字第$j$位向右的第一个（位置$i$本身不算）第$j$位同样为$1$的位置$i’$，对于所有的数，显然最坏情况是把所有位全或为$1$就可以停止了，那么枚举$a[L]$之后再得到$a[L]$所有位开始改变的第一个位置，<strong>按位置顺序</strong>去或这些有贡献的位置即可。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N], cnt[<span class="number">1</span> &lt;&lt; <span class="number">20</span>], pos[N][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">                pos[i][j] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!pos[i][j])</span><br><span class="line">                pos[i][j] = pos[i + <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;bitpos;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (++cnt[s] == <span class="number">1</span>)</span><br><span class="line">            ++ans;</span><br><span class="line">        bitpos.clear();</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[pos[i + <span class="number">1</span>][j]])</span><br><span class="line">                bitpos.pb(pos[i + <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(all(bitpos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;idx : bitpos)</span><br><span class="line">        &#123;</span><br><span class="line">            s |= arr[idx];</span><br><span class="line">            <span class="keyword">if</span> (++cnt[s] == <span class="number">1</span>)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记_day1</title>
      <link href="/2018/04/25/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day1/"/>
      <url>/2018/04/25/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-day1/</url>
      
        <content type="html"><![CDATA[<p>最近在上<code>Python</code>实训课，就随堂学习学习一下基本的<code>Python</code>语法，发现这个语言确实挺方便的，不是一个复杂的语言，甚至还可以很方便得写类和继承类。然后老师也讲了一些知识，整理了一下</p><a id="more"></a><h1 id="Python的class"><a href="#Python的class" class="headerlink" title="Python的class"></a><code>Python</code>的class</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">"大人"</span></span><br><span class="line">    __odername = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Created!"</span>)</span><br><span class="line">        print(self.__odername)</span><br><span class="line">        self.__odername = <span class="number">3</span></span><br><span class="line">        print(self.__odername)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Deleted!"</span>)</span><br><span class="line">        self.__odername = <span class="number">1</span></span><br><span class="line">        print(self.__odername)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃货"</span>, self.__odername)<span class="comment">#公有成员变量</span></span><br></pre></td></tr></table></figure><ol><li><p><code>class</code>的定义如代码所示。</p></li><li><p>非双下划线开头的变量/函数名相当于<code>public</code>的成员变量/函数，而用<code>__</code>作变量名/函数名开头的会被视为私有<code>private</code>成员变量/函数，示例代码中<code>name</code>就是<code>public</code>类型，而<code>__odername</code>是private类型。</p></li><li><p><code>self</code>参数相当于<code>Java</code>中的<code>this</code>，要使用本身类中的变量不像<code>C</code>语言在成员函数中直接写就行了，要用<code>self.xxxxx</code>来调用。</p></li><li><p><code>__init__</code>函数和<code>__del__</code>私有成员函数可以看作<code>C++</code>的构造和析构函数，在实例创建和消亡时会自动调用。</p></li><li><p>类的继承用括号实现，比如让<code>class B</code>继承<code>class A</code>，那么就可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>：</span></span><br><span class="line"><span class="class">......</span></span><br></pre></td></tr></table></figure><p>然后在<code>B</code>中写同名函数会覆盖<code>A</code>中的同名函数</p><p>​</p></li></ol><h1 id="遇到的一点问题"><a href="#遇到的一点问题" class="headerlink" title="遇到的一点问题"></a>遇到的一点问题</h1><p><code>Python</code>中创建$n*m$的二维数组，一开始我想当然地去用一维的长度为$m$的<code>list</code>扔$n$次到另一个$list$中，这样似乎没有什么问题，实际上想去修改某一个位置的值的时候会发现这一列全被修改了。去百度了一下发现其中涉及到一些引用的东西，这里就不细讲了，说下正确的做法之一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><p>这样就创建好了一个$n*m$的二维数组$arr[n][m]$了。</p><p>然后做题的时候读取一行的数据，可以把一行用<code>read = input().split()</code>（默认作为字符串<code>str</code>类型）读取进来并用<code>split()</code>（默认空格为分隔符）分割完毕，然后用下标访问读取的第$i$个元素，比如输入形式是<code>数字 字符串 数字</code>，那就可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read = input().split()</span><br><span class="line">n, str, m = int(read[<span class="number">0</span>]), read[<span class="number">1</span>], int(read[<span class="number">2</span>])</span><br><span class="line">print(n, str, m)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2082 找单词（FFT优化母函数乘法）</title>
      <link href="/2018/04/24/HDU-2082/"/>
      <url>/2018/04/24/HDU-2082/</url>
      
        <content type="html"><![CDATA[<h1 id="找单词"><a href="#找单词" class="headerlink" title="找单词"></a>找单词</h1><p><strong>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)Total Submission(s): 9061    Accepted Submission(s): 6323</strong></p><a id="more"></a><p>Problem Description</p><p>假设有x1个字母A， x2个字母B,….. x26个字母Z，同时假设字母A的价值为1，字母B的价值为2,….. 字母Z的价值为26。那么，对于给定的字母，可以找到多少价值&lt;=50的单词呢？单词的价值就是组成一个单词的所有字母的价值之和，比如，单词ACM的价值是1+3+14=18，单词HDU的价值是8+4+21=33。(组成的单词与排列顺序无关，比如ACM与CMA认为是同一个单词）。</p><p>Input</p><p>输入首先是一个整数N，代表测试实例的个数。<br>然后包括N行数据，每行包括26个&lt;=20的整数x1,x2,…..x26.</p><p>Output</p><p>对于每个测试实例，请输出能找到的总价值&lt;=50的单词数,每个实例的输出占一行。</p><p>Sample Input</p><p>2<br>1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br>9 2 6 2 10 2 2 5 6 1 0 2 7 0 2 2 7 5 10 6 10 2 10 6 1 9</p><p>Sample Output</p><p>7<br>379297</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2082" target="_blank" rel="noopener">HDU 2082</a></p><p>没错我就是这么无聊，强行用<code>FFT</code>去（负）优化这个母函数的相乘过程，实际上我调试了非长久，连nan都出现了233，关键在于控制次数界不要超过51即可，不然数组长度不够存。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cpx;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> * <span class="number">20</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line">cpx x[N], y[N], pwm[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rpos</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span><span class="comment">//以n位二进制表示的x的反转之后的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt; n; ++i)</span><br><span class="line">        w = (w &lt;&lt; <span class="number">1</span>) | ((x &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(cpx a[], <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &lt; e; ++i)</span><br><span class="line">        a[i] = cpx(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">cpx* <span class="title">FFT</span><span class="params">(cpx a[], <span class="keyword">int</span> n, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cpx *A = <span class="keyword">new</span> cpx[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        A[i] = a[R[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m  = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        cpx wm = pwm[i];</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">-1</span>)</span><br><span class="line">            wm.imag(-wm.imag());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k += m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">cpx <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (m &gt;&gt; <span class="number">1</span>); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                cpx t = w * A[k + j + (m &gt;&gt; <span class="number">1</span>)], u = A[k + j];</span><br><span class="line">                A[k + j] = u + t;</span><br><span class="line">                A[k + j + (m &gt;&gt; <span class="number">1</span>)] = u - t;</span><br><span class="line">                w *= wm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!~f)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            A[i].real(A[i].real() / n);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt; N; ++i)</span><br><span class="line">        pwm[i] = cpx(<span class="built_in">cos</span>(<span class="number">2</span> * PI / (<span class="number">1</span> &lt;&lt; i)), <span class="built_in">sin</span>(<span class="number">2</span> * PI / (<span class="number">1</span> &lt;&lt; i)));</span><br><span class="line">    caseT</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> la = <span class="number">1</span>, lb = <span class="number">0</span>, lc = <span class="number">0</span>, n, first = <span class="number">1</span>;</span><br><span class="line">        init(x, <span class="number">0</span>, N);</span><br><span class="line">        cpx * dx, *dy;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">            <span class="keyword">if</span> (!c)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (first)</span><br><span class="line">            &#123;</span><br><span class="line">                x[<span class="number">0</span>].real(<span class="number">1.0</span>);</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= c; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j * i &gt; <span class="number">50</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    x[j * i].real(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                la = min(<span class="number">51</span>, c * i + <span class="number">1</span>);</span><br><span class="line">                first = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                lb = min(<span class="number">51</span>, i * c + <span class="number">1</span>), lc = lb + la - <span class="number">1</span>;</span><br><span class="line">                n = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (n &lt; lc)</span><br><span class="line">                    n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    R[j] = rpos(j, n);</span><br><span class="line">                init(y, <span class="number">0</span>, N);</span><br><span class="line">                init(x, la, N);</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= c; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j * i &gt; <span class="number">50</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    y[j * i].real(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                dx = FFT(x, n, <span class="number">1</span>);</span><br><span class="line">                dy = FFT(y, n, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    dx[j] *= dy[j];</span><br><span class="line">                dy = FFT(dx, n, <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lc; ++j)</span><br><span class="line">                    x[j] = cpx(<span class="keyword">int</span>(dy[j].real() + <span class="number">0.5</span>), <span class="number">0</span>);</span><br><span class="line">                la = min(<span class="number">51</span>, lc);</span><br><span class="line">                init(x, la, N);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; ++i)</span><br><span class="line">            ans += <span class="keyword">int</span>(x[i].real() + <span class="number">0.5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> FFT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> FFT，母函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1402 A * B Problem Plus（FFT入门题）</title>
      <link href="/2018/04/19/HDU-1402/"/>
      <url>/2018/04/19/HDU-1402/</url>
      
        <content type="html"><![CDATA[<p> A * B Problem Plus</p><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)Total Submission(s): 25113    Accepted Submission(s): 6448</strong><br><a id="more"></a><br>Problem Description</p><p>Calculate A * B.</p><p>Input</p><p>Each line will contain two integers A and B. Process to end of file.<br>Note: the length of each integer will not exceed 50000.</p><p>Output</p><p>For each case, output A * B in one line.</p><p>Sample Input</p><p>1<br>2<br>1000<br>2</p><p>Sample Output</p><p>2<br>2000</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1402http://acm.hdu.edu.cn/showproblem.php?pid=1402" target="_blank" rel="noopener">HDU 1402</a></p><p>题意就不说了，主要是讲下如何使用快速傅立叶变换做这入门题。</p><p>快速傅立叶变换（<code>FFT</code>）可以用来快速地求两个多项式的积，就像$(1+x+2x^2)\times (3x+6x^2)=3x+6x^2+3x^2+6x^3+3x^3+6x^4=3x+9x^2+9x^3+6x^4$</p><p>输入是两个多项式的系数，输出是这两个多项式之积的系数（<code>FFT</code>我一开始都不知道它是怎么用的，更不用说去学了）</p><p>那么上述的输入就是 $1\;1\;2$ 和 $0\;3\;6\;$，得到的多项式系数是$0\;3\;9\;9\;6\;0\;0\;0$（注意最低系数要补齐，从$x^0$开始，结果的次数界要为$2$的幂次）</p><p>各种介绍的博客就不说了，百度搜 <code>FFT学习笔记</code>一大堆。这题如果把输入的数看成十进制下的带权求和多项式，那么就可以以多项式的乘法来得到答案的多项式表示，再把这个多项式用十进制转换成答案即可。</p><p>以$1000 \times2$为例，它就是</p><script type="math/tex; mode=display">(\textbf{0}\times 10^0+\textbf{0}\times 10^1+\textbf{0}\times 10^2+\textbf{1}\times 10^3)\times(\textbf{2}\times 10^0)</script><p>这两个多项式的乘积，不过不能一开始就把$10$进制这个$10$代入，应该写成</p><script type="math/tex; mode=display">(\textbf{0}\times x^0+\textbf{0}\times x^1+\textbf{0}\times x^2+\textbf{1}\times x^3)\times(\textbf{2}\times x^0)</script><p>然后把结果的系数用<code>FFT</code>求出来即：</p><script type="math/tex; mode=display">(\textbf{0}\times x^0+\textbf{0}\times x^1+\textbf{0}\times x^2+\textbf{2}\times x^3)</script><p>再把$x=10$代入即可。</p><p>这里有几个细节问题，如果输入的多项式次数界为$a$和$b$，那么结果的次数界应该为$a+b-1$，那么<code>FFT</code>时所用的$2$的幂次的次数界应该要刚好大于等于它。</p><hr><p>又去学了下优化<code>FFT</code>的姿势，把递归版改成了非递归，原理就是直接把一开始的数组按照递归合并时的顺序排序，然后就做一个类似于倍增的合并操作就行了。</p><p>学习的时候发现有几个要注意和改进的地方：</p><ol><li>重复利用某一个<code>complex</code>数组的时候，在当前次数界$n$之后的复数要手动置$0$，否则答案越到后面会偏差越大</li><li>函数参数$f$表示正逆变换，做逆变换的时候可以把要返回的数组乘以$1 \over n$，方便一点。</li><li>可以预处理出所有要用的$cos(2\pi/i)$和$sin(2\pi/i)$的值，速度快一点。</li><li><code>FFT</code>函数可以写成返回一个数组的首地址，这样就可以用指针接收这个地址，方便后续进行操作（数据一大估计得delete 一下23333）</li><li><code>ans</code>数组如果多次使用，其末尾也要清零，否则末尾会遗留下上次可能超过末尾的部分数字。</li></ol><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cpx;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> R[N &lt;&lt; <span class="number">2</span>], ans[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">cpx x[N &lt;&lt; <span class="number">2</span>], pwm[<span class="number">20</span>];<span class="comment">//pwm是预处理出2*PI/(1&lt;&lt;i)的正弦和余弦值组成的复数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rpos</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span><span class="comment">//以n位二进制表示的x的反转之后的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt; n; ++i)</span><br><span class="line">        w = (w &lt;&lt; <span class="number">1</span>) | ((x &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">cpx* <span class="title">FFT</span><span class="params">(cpx a[], <span class="keyword">int</span> n, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cpx *A = <span class="keyword">new</span> cpx[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        A[i] = a[R[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m  = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="comment">//        cpx wm(cos(2 * PI / m), f * sin(2 * PI / m));</span></span><br><span class="line">        cpx wm = pwm[i];</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">-1</span>)</span><br><span class="line">            wm.imag(-wm.imag());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k += m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">cpx <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (m &gt;&gt; <span class="number">1</span>); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                cpx t = w * A[k + j + (m &gt;&gt; <span class="number">1</span>)], u = A[k + j];</span><br><span class="line">                A[k + j] = u + t;</span><br><span class="line">                A[k + j + (m &gt;&gt; <span class="number">1</span>)] = u - t;</span><br><span class="line">                w *= wm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!~f)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            A[i].real(A[i].real() / n);</span><br><span class="line">    <span class="keyword">return</span> A;<span class="comment">//返回处理好的数组首地址，后面就可以用了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt; (N &lt;&lt; <span class="number">2</span>); ++i)</span><br><span class="line">        pwm[i] = cpx(<span class="built_in">cos</span>(<span class="number">2</span> * PI / (<span class="number">1</span> &lt;&lt; i)), <span class="built_in">sin</span>(<span class="number">2</span> * PI / (<span class="number">1</span> &lt;&lt; i)));</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> la = <span class="built_in">strlen</span>(a), lb = <span class="built_in">strlen</span>(b), lc = la + lb - <span class="number">1</span>, n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; lc)</span><br><span class="line">            n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            R[i] = rpos(i, n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; la; ++i)</span><br><span class="line">            x[i] = cpx(a[la - <span class="number">1</span> - i] - <span class="string">'0'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = la; i &lt; n; ++i)<span class="comment">//记得清零</span></span><br><span class="line">            x[i] = cpx(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cpx *A = FFT(x, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lb; ++i)</span><br><span class="line">            x[i] = cpx(b[lb - <span class="number">1</span> - i] - <span class="string">'0'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = lb; i &lt; n; ++i)<span class="comment">//记得清零</span></span><br><span class="line">            x[i] = cpx(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cpx *B = FFT(x, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            A[i] *= B[i];</span><br><span class="line">        A = FFT(A, n, <span class="number">-1</span>);</span><br><span class="line">        ans[lc] = <span class="number">0</span>;<span class="comment">//记得清零</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans[i] = <span class="keyword">int</span>(A[i].real() + <span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lc; ++i)</span><br><span class="line">            ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>, ans[i] %= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (lc &amp;&amp; !ans[lc])</span><br><span class="line">            --lc;</span><br><span class="line">        <span class="keyword">for</span> (i = lc; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">delete</span> []A;</span><br><span class="line">        <span class="keyword">delete</span> []B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> FFT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> ACM </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #475 Div.2 A B C D</title>
      <link href="/2018/04/18/CF-475-Div-2-A-B-C-D/"/>
      <url>/2018/04/18/CF-475-Div-2-A-B-C-D/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Splits"><a href="#A-Splits" class="headerlink" title="A.Splits"></a><a href="http://codeforces.com/contest/964/problem/A" target="_blank" rel="noopener">A.Splits</a></h1><p>题意就是把数$n$用一个不升序列的前一部分和表示，求有几种不同权重的表示，观察一发发现这玩意儿似乎就是除以$2$再加$1$就行了（<del>这题让我知道了交两发只算最晚的那发的2333，原地爆炸</del>）</p><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        LL ans = <span class="built_in">ceil</span>(n / <span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            ++ans;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Messages"><a href="#B-Messages" class="headerlink" title="B.Messages"></a><a href="http://codeforces.com/contest/964/problem/B" target="_blank" rel="noopener">B.Messages</a></h1><p>题意就是有$n$个信息，初始价值均为$A$，每个信息在$t_i$的时候会发送给你，你可以选择阅读或者不阅读，不读的话每一分钟会开始扣$B$的价值，读的话就会把总价值加上$A$，然后每分钟总价值还会加上$C\times当前未读信息$，求在$T$分钟之后全部阅读掉的前提下最大的总价值。</p><p>如果$C\ge B$的话显然放到最后总是最优的，读了的话一个信息就少了$C-B$的贡献，不读的话还能加上这个贡献。</p><p>当$C\le B$时，可以考虑全部放到最后一分钟阅读，这样的总价值是最大的。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, A, B, C, T, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;n, &amp;A, &amp;B, &amp;C, &amp;T))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t[i]);</span><br><span class="line">        <span class="keyword">if</span> (C &gt;= B)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> delay = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                delay += T - t[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, A * n + C * delay - B * delay);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, A * n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Alternating-Sum"><a href="#C-Alternating-Sum" class="headerlink" title="C.Alternating Sum"></a><a href="http://codeforces.com/contest/964/problem/C" target="_blank" rel="noopener">C.Alternating Sum</a></h1><p>题意就是给你一个循环节为$k$的$S_{0…n}$序列，然后求</p><p>$\sum \limits<em>{i=0}^{n} s</em>{i} a^{n - i} b^{i}$</p><p>答案对$1e9+9$取模。显然把数列写出来，可以发现如果以前$k$项的和作首项的话，刚好是一个模意义下的等比数列求和，公比是$a^{-k}b^k$，然后题目还是很良心的给你的$n+1$是$k$的整数倍，这样刚好让你用等比数列公式算，当然其中有个坑，当公比为$1$的时候，$1-q$会变成$0$，此时算出来的结果可能会变成$0$，这种情况特判掉就行。另外也可以用矩阵快速幂来求这个等比数列的和。</p><script type="math/tex; mode=display">\begin{pmatrix}  a_{1} & S_1  \\  0&0 \\  \end{pmatrix}  \times  \begin{pmatrix}  1 & 1  \\  0 & a^{-k}b^k \\  \end{pmatrix}^{(n+1)/k-1}  =  \begin{pmatrix}  a_{1} & S_{(n+1)/k}  \\  0 & 0 \\  \end{pmatrix}</script><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL A[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">O</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">0</span>] = A[<span class="number">0</span>][<span class="number">1</span>] = A[<span class="number">1</span>][<span class="number">0</span>] = A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">I</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">0</span>] = A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">1</span>] = A[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> *(Mat b) &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.O();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                    c.A[i][j] = (c.A[i][j] + A[i][k] * b.A[k][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span>^(Mat a, LL b) &#123;</span><br><span class="line">        Mat r;</span><br><span class="line">        r.I();</span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                r = r * a;</span><br><span class="line">            a = a * a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat() &#123;&#125;</span><br><span class="line">    Mat(<span class="built_in">initializer_list</span>&lt;LL&gt; v) &#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : v) &#123;</span><br><span class="line">            A[p / <span class="number">2</span>][p &amp; <span class="number">1</span>] = x;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">qpow</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span>)</span><br><span class="line">        a = (a % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">0</span>)</span><br><span class="line">        b = (b % mod + mod) % mod;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = r * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">mul</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span>)</span><br><span class="line">        a = (a % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">0</span>)</span><br><span class="line">        b = (b % mod + mod) % mod;</span><br><span class="line">    LL r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (r + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        x = (x % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> qpow(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, k;</span><br><span class="line">    LL a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%I64d%I64d%d"</span>, &amp;n, &amp;a, &amp;b, &amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    LL a1 = <span class="number">0</span>;</span><br><span class="line">    LL inv_a = inv(a);</span><br><span class="line">    LL fa = qpow(a, n), fb = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a1 = (a1 + (s[i] == <span class="string">'+'</span> ? <span class="number">1L</span>L : <span class="number">-1L</span>L) * fa % mod * fb % mod) % mod;</span><br><span class="line">        fa = fa * inv_a % mod;</span><br><span class="line">        fb = fb * b % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat A =</span><br><span class="line">    &#123;</span><br><span class="line">        a1, a1,</span><br><span class="line">        <span class="number">0L</span>L, <span class="number">0L</span>L</span><br><span class="line">    &#125;;</span><br><span class="line">    Mat B =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">1L</span>L, <span class="number">1L</span>L,</span><br><span class="line">        <span class="number">0L</span>L, qpow(inv_a, k)*qpow(b, k) % mod</span><br><span class="line">    &#125;;</span><br><span class="line">    B = B ^ ((n + <span class="number">1</span>) / k - <span class="number">1</span>);</span><br><span class="line">    A = A * B;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ((A.A[<span class="number">0</span>][<span class="number">1</span>] % mod) + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Destruction-of-a-Tree"><a href="#D-Destruction-of-a-Tree" class="headerlink" title="D.Destruction of a Tree"></a><a href="http://codeforces.com/contest/964/problem/D" target="_blank" rel="noopener">D.Destruction of a Tree</a></h1><p>题意很简单就是让你判断能否通过不停删除偶数度数的点及其连出去的边，最后删完这整颗树。</p><p>刚开始感觉哇这不是无脑<code>BFS</code>吗，燃鹅无脑的我并没有考虑到实际上不同的删点顺序会影响能否成功删完这棵树，所以正确的策略是优先删除靠近叶子结点的点，那么一开始用<code>DFS</code>预处理出每个结点的深度，然后用<code>pq</code>按度数大的优先去<code>BFS</code>即可。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;E[N];</span><br><span class="line"><span class="keyword">int</span> deg[N], n, des[N], p[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pos;</span><br><span class="line"><span class="keyword">int</span> dep[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            dfs(v, u, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[s].pb(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;pii&gt;Q;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (deg[i] &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Q.push(&#123;dep[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.top().second;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (des[u] || ((deg[u] &gt; <span class="number">0</span>) &amp;&amp; (deg[u] &amp; <span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        des[u] = <span class="number">1</span>;</span><br><span class="line">        pos.push_back(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (des[v] || (deg[v] &lt;= <span class="number">0</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            --deg[v];</span><br><span class="line">            --deg[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (des[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (deg[v] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                Q.push(&#123;dep[v], v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">        <span class="keyword">if</span> (p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            add(p[i], i);</span><br><span class="line">            add(i, p[i]);</span><br><span class="line">            ++deg[i];</span><br><span class="line">            ++deg[p[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i])</span><br><span class="line">            dfs(i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="keyword">int</span> ans = pos.size();</span><br><span class="line">    <span class="keyword">if</span> (ans != n)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : pos)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Educational #42 A B C D F</title>
      <link href="/2018/04/12/CF-Educational-42-A-B-C-D-F/"/>
      <url>/2018/04/12/CF-Educational-42-A-B-C-D-F/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Equator"><a href="#A-Equator" class="headerlink" title="A.Equator"></a><a href="http://codeforces.com/contest/962/problem/A" target="_blank" rel="noopener">A.Equator</a></h1><a id="more"></a><p>坑点在在于<code>int</code>除2的时候是向下取整的所以还是乘以2好……</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</span><br><span class="line">LL arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, arr + i);</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (t * <span class="number">2</span> &gt;= sum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Students-in-Railway-Carriage"><a href="#B-Students-in-Railway-Carriage" class="headerlink" title="B.Students in Railway Carriage"></a><a href="http://codeforces.com/contest/962/problem/B" target="_blank" rel="noopener">B.Students in Railway Carriage</a></h1><p>题意就是给你$n$个位置，在空位上放置$a$个学生和$b$个运动员使得放置的总人数最多。</p><p>记录一下前一个放的是谁，<strong>贪心</strong>地放和前面一个不冲突的就行。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'.'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &amp;&amp; (a &gt;= b))</span><br><span class="line">                &#123;</span><br><span class="line">                    --a;</span><br><span class="line">                    ++c;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b &amp;&amp; b &gt;= a)</span><br><span class="line">                &#123;</span><br><span class="line">                    --b;</span><br><span class="line">                    ++c;</span><br><span class="line">                    p = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">1</span> &amp;&amp; b &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    --b;</span><br><span class="line">                    ++c;</span><br><span class="line">                    p = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">2</span> &amp;&amp; a &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    --a;</span><br><span class="line">                    ++c;</span><br><span class="line">                    p = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Make-a-Square"><a href="#C-Make-a-Square" class="headerlink" title="C.Make a Square"></a><a href="http://codeforces.com/contest/962/problem/C" target="_blank" rel="noopener">C.Make a Square</a></h1><p>题意就是给你一个数$n$删掉最少的位数变成平方数，结果不能带前导$0$</p><p>无脑<code>BFS</code>或者<code>DFS</code>都行，注意判断前导$0$就行。<code>stoll</code>真是好用</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.size() &gt;= <span class="number">1</span> &amp;&amp; x[<span class="number">0</span>] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL d = stoll(x);</span><br><span class="line">    LL q = <span class="built_in">sqrt</span>(d);</span><br><span class="line">    <span class="keyword">return</span> q * q == d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line">    Q.push(&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (check(u.first))</span><br><span class="line">            <span class="keyword">return</span> u.second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; u.first.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tt = u.first;</span><br><span class="line">            tt.erase(i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)tt.size() &gt;= <span class="number">1</span>)</span><br><span class="line">                Q.push(&#123;tt, u.second + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; bfs(k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Merge-Equals"><a href="#D-Merge-Equals" class="headerlink" title="D.Merge Equals"></a><a href="http://codeforces.com/contest/962/problem/D" target="_blank" rel="noopener">D.Merge Equals</a></h1><p>题意就是给你$n$个数的序列，每次不停地找两个出现次数大于等于$2$的数，拿出其最靠左的两个位置$p1$和$p2$，然后把前面的数加到后面去，消掉前面的，直到不存在出现次数大于等于$2$的数为止。</p><p>实际上是个模拟题，鉴于数据范围稍大，因此用<code>map</code>维护每个数的出现次数，一个堆维护出现次数大于等于$2$的数中最小的数，再用一个<code>map</code>维护每个数及其出现的位置集合，每次相加的新数用二分插入对应的位置即可。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150005</span>;</span><br><span class="line">LL arr[N];</span><br><span class="line"><span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt;cnt;</span><br><span class="line"><span class="built_in">map</span>&lt;LL, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; &gt;pos;</span><br><span class="line"><span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt;vis;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL v;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;t)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v &gt; t.v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;info&gt;Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, arr + i);</span><br><span class="line">        ++cnt[*(arr + i)];</span><br><span class="line">        vis[*(arr + i)] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        LL &amp;v = *(arr + i);</span><br><span class="line">        c = cnt[v];</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[v] = <span class="number">0</span>;</span><br><span class="line">                Q.push(&#123;v, c&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pos[v].pb(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        info u = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (cnt[u.v] &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> p1 = pos[u.v][<span class="number">0</span>], p2 = pos[u.v][<span class="number">1</span>];</span><br><span class="line">        pos[u.v].pop_front();</span><br><span class="line">        pos[u.v].pop_front();</span><br><span class="line">        c = (cnt[u.v] -= <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)<span class="comment">//消掉之后可能下一轮还是这个数，这里要入队一次</span></span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(&#123;u.v, c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[p2] += arr[p1];</span><br><span class="line">        <span class="keyword">auto</span> it = lower_bound(all(pos[arr[p2]]), p2);</span><br><span class="line">        pos[arr[p2]].insert(it, p2);</span><br><span class="line">        c = ++cnt[*(arr + p2)];</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(&#123;arr[p2], c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[p1] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;LL&gt;ans;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != <span class="number">-1</span>)</span><br><span class="line">            ans.pb(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : ans)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d "</span>, x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Simple-Cycles-Edges"><a href="#F-Simple-Cycles-Edges" class="headerlink" title="F.Simple Cycles Edges"></a><a href="http://codeforces.com/contest/962/problem/F" target="_blank" rel="noopener">F.Simple Cycles Edges</a></h1><p>题意就是给你$n$个点，$m$条边的无自环，无重边的<strong>无向图</strong>，求所有简单环上的边。</p><p>看到图论题立马上去刚了，燃鹅退役前只写过边双连通，这题是点双连通（刚不动刚不动），然后去学了一下点双连通。</p><p>首先可以容易发现简单环总是边数等于点数的，但是不一定如此，比如：</p><p><a href="https://simimg.com/i/NhSSq" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/12/NhSSq.md.png" alt="NhSSq.md.png"></a></p><p>这个图里显然有两个简单环，但是在同一个边双连通分量中，因此不能用边双连通去缩点，而要用点双连通，大体做法就是把每个点双连通分量求出来，看看分量中的边数是否等于点数即可。这样一来上图的两个分量刚好符合条件。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, id;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _id): to(_to), nxt(_nxt), id(_id) &#123;&#125;</span><br><span class="line">&#125; E[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N], st[N], top, ts, ins[N], pbc_cnt, road[N][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;est;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pbc_edge[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], id);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++ts;</span><br><span class="line">    ins[u] = <span class="number">1</span>;</span><br><span class="line">    st[top++] = u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            est.push(i);</span><br><span class="line">            tarjan(v, u);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v] &gt;= dfn[u])<span class="comment">//u为割点</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++pbc_cnt;</span><br><span class="line">                <span class="keyword">int</span> eid;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                &#123;</span><br><span class="line">                    eid = est.top();</span><br><span class="line">                    est.pop();</span><br><span class="line">                    pbc_edge[pbc_cnt].pb(E[eid].id);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (E[eid].id != E[i].id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dfn[v] &lt; dfn[u] &amp;&amp; v != f)</span><br><span class="line">        &#123;</span><br><span class="line">            est.push(i);</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        add(a, b, i);</span><br><span class="line">        add(b, a, i);</span><br><span class="line">        road[i][<span class="number">0</span>] = a, road[i][<span class="number">1</span>] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            tarjan(i, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= pbc_cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;eid : pbc_edge[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p.insert(road[eid][<span class="number">0</span>]);</span><br><span class="line">            p.insert(road[eid][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pbc_edge[i].size() == p.size())</span><br><span class="line">            ans.insert(ans.end(), all(pbc_edge[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(ans));</span><br><span class="line">    <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == sz - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
            <tag> ACM </tag>
            
            <tag> 思维 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Educational #41 A B C D E</title>
      <link href="/2018/04/08/CF-Educational-41-A-B-C-D-E/"/>
      <url>/2018/04/08/CF-Educational-41-A-B-C-D-E/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Tetris"><a href="#A-Tetris" class="headerlink" title="A.Tetris"></a><a href="http://codeforces.com/contest/961/problem/A" target="_blank" rel="noopener">A.Tetris</a></h1><p>题意就是有一个$n\times m$的俄罗斯方块局面，求从下到上能消掉多少个方块，模拟一发就行。</p><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> G[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            ++G[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> Min = INF;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (G[i] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Min = min(G[i], Min);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                G[i] -= Min;</span><br><span class="line">            cnt += Min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Lecture-Sleep"><a href="#B-Lecture-Sleep" class="headerlink" title="B.Lecture Sleep"></a><a href="http://codeforces.com/contest/961/problem/B" target="_blank" rel="noopener">B.Lecture Sleep</a></h1><p>题意就是有$n$分钟的时间有时候学习有时候睡觉，每分钟如果学习的话可以获得$a_i$的知识量，你可以选择强行学习$k$分钟，求$n$分钟之后最多能学到的知识。</p><p>枚举强行学习的区间$[i,i+k-1]$，那么此时答案是</p><p>$sum<em>{正常学习}(1,i-1)+sum</em>{强行学习}(i,i+k-1)+sum_{正常学习}(i+k,n)$，所有的可能取最大值就是答案，其中$sum$用前缀和预处理优化一下就行。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL a[N], t[N];</span><br><span class="line">LL pre[N], re[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">SUM</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= <span class="number">0</span>)</span><br><span class="line">        l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= <span class="number">0</span>)</span><br><span class="line">        r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> pre[r] - pre[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">RE</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= <span class="number">0</span>)</span><br><span class="line">        l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= <span class="number">0</span>)</span><br><span class="line">        r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> re[r] - re[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;a[i]);</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;t[i]), re[i] = re[i - <span class="number">1</span>] + t[i] * a[i];</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = max(RE(<span class="number">1</span>, i - <span class="number">1</span>) + SUM(i, i + k - <span class="number">1</span>) + RE(i + k, n), ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Chessboard"><a href="#C-Chessboard" class="headerlink" title="C.Chessboard"></a><a href="http://codeforces.com/contest/961/problem/C" target="_blank" rel="noopener">C.Chessboard</a></h1><p>题意就是给你$4$个块$n \times n$的$01$矩阵，要拼成一块$2n \times 2n$的$01$矩阵使得任意相邻的数都不同，你可以修改矩阵中的数使得符合条件，求最少修改的次数</p><p>一开始没想法， 后来发现实际上任意相邻的数都不同的矩阵只有两种，$01010…$或$101010…$，因此只要预处理出这两种$2n \times 2n$的矩阵，然后暴力枚举四个给的矩阵分别是在哪四个位置即可。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">4</span>][N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> one[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> two[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ll, <span class="keyword">int</span> rr, <span class="keyword">int</span> x, <span class="keyword">int</span> C[<span class="number">4</span>][N][N], <span class="keyword">int</span> ST[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (C[x][l + i][r + j] != ST[ll + i][rr + j])</span><br><span class="line">                ++c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> per[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> pos[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, pos[j]);</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                A[i][j][k] = pos[j][k] - <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            one[i][j] = (i + j) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            two[i][j] = one[i][j] ^ <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = min(ans, calc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, per[<span class="number">0</span>], A, one) + calc(<span class="number">0</span>, <span class="number">0</span>, n, n, per[<span class="number">1</span>], A, one) + calc(<span class="number">0</span>, <span class="number">0</span>, n, <span class="number">0</span>, per[<span class="number">2</span>], A, one) + calc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, n, per[<span class="number">3</span>], A, one));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (next_permutation(per, per + <span class="number">4</span>));</span><br><span class="line">    sort(per, per + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = min(ans, calc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, per[<span class="number">0</span>], A, two) + calc(<span class="number">0</span>, <span class="number">0</span>, n, n, per[<span class="number">1</span>], A, two) + calc(<span class="number">0</span>, <span class="number">0</span>, n, <span class="number">0</span>, per[<span class="number">2</span>], A, two) + calc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, n, per[<span class="number">3</span>], A, two));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (next_permutation(per, per + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Pair-Of-Lines"><a href="#D-Pair-Of-Lines" class="headerlink" title="D.Pair Of Lines"></a><a href="http://codeforces.com/contest/961/problem/D" target="_blank" rel="noopener">D.Pair Of Lines</a></h1><p>题意就是给你$n$个点，问是否能用不会超过两根直线将所有的点覆盖所有的点。</p><p>计算几何没怎么学过，叉积也早就忘记了（弱渣瑟瑟发抖）。</p><p>实际上这题只要用任意两个点去构成一条直线，然后去掉这条直线上的点，再看剩下的点是否在一条直线上即可。那么怎么看三个点是否在一条直线上呢，用向量叉积的方法：设$a(x1,y1),b(x2,y2),c(x3,y3)$，由于叉积的几何意义可以表示两个向量所构成的平行四边形面积，$\vec A \times \vec B = |A| \times |B|*sin(\vec A,\vec B)$，叉积为$0$说明他们形成的面积为$0$，这不就刚好说明他们在一条直线上吗，<del>以前还傻傻地用斜率做，还要特判垂直的情况233</del>。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">friend</span> P <span class="keyword">operator</span> - (P a, P b)</span><br><span class="line">    &#123;</span><br><span class="line">        a.x -= b.x;</span><br><span class="line">        a.y -= b.y;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">X</span><span class="params">(<span class="keyword">const</span> P&amp;a, <span class="keyword">const</span> P&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x * b.y) - (a.y * b.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">online</span><span class="params">(<span class="keyword">const</span> P&amp;a, <span class="keyword">const</span> P&amp;b, <span class="keyword">const</span> P&amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(X(a - c, b - c)) &lt;= eps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;P&gt; &amp;one, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = one.size();</span><br><span class="line">    <span class="keyword">if</span> (sz &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;P&gt;res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == a || i == b)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!online(one[a], one[b], one[i]))</span><br><span class="line">            res.pb(one[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sz = res.size();</span><br><span class="line">    <span class="keyword">if</span> (sz &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!online(res[<span class="number">0</span>], res[<span class="number">1</span>], res[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;P&gt;one;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</span><br><span class="line">            one.push_back(&#123;x, y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check(one, <span class="number">0</span>, <span class="number">1</span>) || check(one, <span class="number">0</span>, <span class="number">2</span>) || check(one, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Tufurama"><a href="#E-Tufurama" class="headerlink" title="E.Tufurama"></a><a href="http://codeforces.com/contest/961/problem/E" target="_blank" rel="noopener">E.Tufurama</a></h1><p>题意就是给你季$n$的节目单，season  $x$有$1\sim y$个episode，求存在season $x$有第$y$个episode且第$y$个season有第$x$个episode的对数、</p><p>一开始用离线树状数组<code>wa</code>了好几次，最后一分钟用主席树才过……。可以发现season $x$如果和episode$y$组成对数，那么就存在$j \in [1,y]$，$season[j] \ge x$，转换下题目也就是求$1 \sim episode_i$中大于等于$i$的个数，然后要注意除掉自己，自己不能和自己一组，那么用主席树就可以做到这个了。</p><p>最后统计出来是所有的对数，因此答案要除以$2$</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    LL v, add;</span><br><span class="line">&#125; T[N * <span class="number">34</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], sz;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++sz;</span><br><span class="line">    T[x].ls = T[x].rs = <span class="number">0</span>;</span><br><span class="line">    T[x].add = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        T[x].v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        build(T[x].ls, l, mid);</span><br><span class="line">        build(T[x].rs, mid + <span class="number">1</span>, r);</span><br><span class="line">        T[x].v = T[T[x].ls].v + T[T[x].rs].v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++sz;</span><br><span class="line">    T[x] = T[y];</span><br><span class="line">    T[x].v += (LL)(qr - ql + <span class="number">1</span>) * (LL)v;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        T[x].add += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            update(T[x].ls, T[y].ls, l, mid, ql, qr, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            update(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, ql, qr, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update(T[x].ls, T[y].ls, l, mid, ql, mid, v), update(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> T[x].v - T[y].v;</span><br><span class="line">    LL add = (LL)(qr - ql + <span class="number">1</span>) * (T[x].add - T[y].add);</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(T[x].ls, T[y].ls, l, mid, ql, qr) + add;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, ql, qr) + add;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(T[x].ls, T[y].ls, l, mid, ql, mid) + query(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr) + add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; n)</span><br><span class="line">            arr[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    build(root[<span class="number">1</span>], <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        update(root[i], root[i - <span class="number">1</span>], <span class="number">1</span>, n, arr[i], arr[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += query(root[arr[i]], root[<span class="number">0</span>], <span class="number">1</span>, n, i, n);</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= i)<span class="comment">//去掉自己和自己一组的情况</span></span><br><span class="line">            --ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> ACM </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 优化 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表的链式存储</title>
      <link href="/2018/03/20/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
      <url>/2018/03/20/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>哈希表（<strong>Hashtable</strong>）也叫散列表，平时竞赛或者编程中主要遇到的是对字符串、数字的哈希，比较常见的是使用<strong>除留余数法</strong>，用一个稍大且合适的质数作为哈希函数的取模数，计算得到哈希函数值之后加入哈希表，但是可能有两个数取模余数相同的情况，因此可能存在哈希冲突，此时可以用<strong>链式储存</strong>（数据结构教材上称为<strong>链地址法</strong>）来储存这些冲突的哈希值。这里主要是讲一下如何手写一个基于上述方法的简易哈希表。</p><a id="more"></a><p>其储存样子如下图：</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522738663712&amp;di=e6ad35dce78772f5b84cb0ceb338461c&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F589784%2F201512%2F589784-20151214222401849-1708601758.png" alt="img"></p><p>其主要原理就是将较大的哈希值再一次取模，得到一个可以接受的值作为下标，然后去储存这个值，其中储存的指针就像图结构中的边那样储存即可。</p><p>哈希表还有个概念叫<strong>装填因子</strong>$\alpha = {关键字个数 / 哈希表长度}$，一般$\alpha$控制在$0.6～0.9$的范围之内；</p><p>链地址法中，<strong>装填因子</strong>为$1$比较合适，此时成功的探测长度是$1.5$，不成功是$2.0$</p><p>简易代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">7</span>;<span class="comment">//哈希表长</span></span><br><span class="line"><span class="keyword">const</span> ULL MOD = <span class="number">2000003</span>;<span class="comment">//用于除留取余的模数，一般为最靠近但小于表长的质数</span></span><br><span class="line"><span class="keyword">const</span> ULL seed = <span class="number">1e9</span> + <span class="number">7</span>;<span class="comment">//哈希函数的种子值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ULL v;</span><br><span class="line">        <span class="keyword">int</span> nxt;</span><br><span class="line">        node(ULL _v = <span class="number">0U</span>LL, <span class="keyword">int</span> _nxt = <span class="number">0</span>): v(_v), nxt(_nxt) &#123;&#125;</span><br><span class="line">    &#125; code[N];</span><br><span class="line">    <span class="keyword">int</span> head[MOD], tot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            head[i] = <span class="number">-1</span>;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ULL v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = v % MOD;</span><br><span class="line">        code[tot] = node(v, head[pos]);</span><br><span class="line">        head[pos] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ULL v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = v % MOD;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[p]; ~i; i = code[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code[i].v == v)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; hashtable;</span><br></pre></td></tr></table></figure><hr><p>附一道例题：<a href="https://www.nowcoder.com/acm/contest/73/D" target="_blank" rel="noopener">Wannafly挑战赛11 D.白兔的字符串</a></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int _T;scanf(<span class="meta-string">"%d"</span>,&amp;_T);for (int q=1; q&lt;=_T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">7</span>;<span class="comment">//题目中的字符串长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;<span class="comment">//哈希表长度，装填因子设为1.0</span></span><br><span class="line"><span class="keyword">const</span> ULL MOD = <span class="number">1000003</span>;<span class="comment">//除留取余用的模数</span></span><br><span class="line"><span class="keyword">const</span> ULL seed = <span class="number">1e9</span> + <span class="number">7</span>;<span class="comment">//哈希函数的模数</span></span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ULL v;</span><br><span class="line">        <span class="keyword">int</span> nxt;</span><br><span class="line">        node(ULL _v = <span class="number">0U</span>LL, <span class="keyword">int</span> _nxt = <span class="number">0</span>): v(_v), nxt(_nxt) &#123;&#125;</span><br><span class="line">    &#125; code[N];</span><br><span class="line">    <span class="keyword">int</span> head[MOD], tot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            head[i] = <span class="number">-1</span>;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ULL v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = v % MOD;</span><br><span class="line">        code[tot] = node(v, head[pos]);</span><br><span class="line">        head[pos] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ULL v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = v % MOD;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[p]; ~i; i = code[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code[i].v == v)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, ans, ls, len;</span><br><span class="line">    <span class="keyword">register</span> ULL bas = <span class="number">1</span>, af = <span class="number">0</span>, be = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        hashtable.init();</span><br><span class="line">        len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            af = (af * seed + * (s + i));</span><br><span class="line">            bas = bas * seed;</span><br><span class="line">        &#125;</span><br><span class="line">        hashtable.add(af);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            af = (af * seed + s[i]);</span><br><span class="line">            be = (be * seed + s[i]);</span><br><span class="line">            hashtable.add(af - be * bas);</span><br><span class="line">        &#125;</span><br><span class="line">        caseT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">            ls = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">            af = <span class="number">0</span>, be = <span class="number">0</span>;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len &amp;&amp; i &lt;= ls; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                af = af * seed + s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            ans += hashtable.Find(af);</span><br><span class="line">            <span class="keyword">for</span> (i = len + <span class="number">1</span>; i &lt;= ls; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                af = af * seed + s[i];</span><br><span class="line">                be = be * seed + s[i - len];</span><br><span class="line">                ans += hashtable.Find(af - be * bas);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串分割的几个方法</title>
      <link href="/2018/03/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2istringstream%E4%B8%8Estrtok/"/>
      <url>/2018/03/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2istringstream%E4%B8%8Estrtok/</url>
      
        <content type="html"><![CDATA[<p>有时候会遇到类似于给你一行字符串，让你分割并获取出里面的几个子串的这种问题，这里个人总结了三个稍微好一点的方法</p><a id="more"></a><ol><li>把string用istringstream类重定向</li><li>用scanf自带的转义字符匹配分割</li><li>strtok处理含有特定分割标志的字符串</li></ol><h1 id="1-istringstream"><a href="#1-istringstream" class="headerlink" title="1.istringstream"></a>1.istringstream</h1><p>相关头文件：<strong>&lt;sstream&gt;</strong>（不加这个头文件很可能会编译错误）</p><p>一种基于字符串的$I/O$方式，即从字符串(一般为$string$)中读取，而不是来自输入流，其分割是按空格分割。</p><p>假设给定一行包含很多个数字的字符串，每个数字用空格分割，最后求这一行的数字之和。</p><p>此时可以用一个$string$对象$str$储存这个字符串，然后用$str$初始化$istringstream$对象$strin$，然后就可以用$&gt;&gt;$操作符从$strin$中输入了。</p><p>PS.据说多次使用这个东西似乎会让占用很多内存，此时用$strin.str(“”)$可以释放内存并清空$strin$的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; str &lt;&lt; endl;</span></span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">strin</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, num;</span><br><span class="line">        <span class="keyword">while</span> (strin &gt;&gt; num)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-scanf"><a href="#2-scanf" class="headerlink" title="2.scanf"></a>2.scanf</h1><p>相关头文件：<strong>&lt;stdio.h&gt;</strong></p><p>由于scanf的参数中可以用一些正则表达式，因此像分割$ip$地址或者$hh:mm:ss$这样的字符串还算方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h, m, s;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d:%d:%d:"</span>, &amp;h, &amp;m, &amp;s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, h, m, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int a, b, c, d;</span></span><br><span class="line">    <span class="comment">// while (~scanf("%d.%d.%d.%d", &amp;a, &amp;b, &amp;c, &amp;d))</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf("[%d] [%d] [%d] [%d]\n", a, b, c, d);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-strtok"><a href="#3-strtok" class="headerlink" title="3.strtok"></a>3.strtok</h1><p>相关头文件：<strong>&lt;string.h&gt;</strong></p><p>函数原型：<strong><font face="微软雅黑">char *strtok(char s[], const char *delim)</font></strong>，分解字符串为一组字符串。s为要分解的字符，delim为分隔符字符（如果传入字符串，则传入的字符串中每个字符均为分割符）。首次调用时，s指向要分解的字符串，<strong>之后再次调用要把s设成NULL</strong>。</p><p>个人感觉这个库函数的好处是可以处理一些奇怪的不合法的输入，比如255….255.255.0或者255.5……….这种逗号过多的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *t = strtok(s, <span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">while</span> (t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>, t);</span><br><span class="line">            t = strtok(<span class="literal">NULL</span>, <span class="string">"."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #470 Div.2题解</title>
      <link href="/2018/03/14/CF-470-Div-2%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/03/14/CF-470-Div-2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Protect-Sheep"><a href="#A-Protect-Sheep" class="headerlink" title="A.Protect Sheep"></a><a href="http://codeforces.com/contest/948/problem/A" target="_blank" rel="noopener">A.Protect Sheep</a></h1><p>题意就是给你一个$n*m$的农场，有羊和狼，你可以在任意空位放牧羊犬，使得狼不能走放了牧羊犬的位置，求让所有羊都不被吃的方案，不存在就输出$No$</p><a id="more"></a><p>贪心地把所有空位都放置牧羊犬，然后这时显然狼已经不能动了，再看狼的四邻域是否存在羊即可。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int T;scanf(<span class="meta-string">"%d"</span>,&amp;T);for (int q=1; q&lt;=T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'.'</span>)</span><br><span class="line">                s[i][j] = <span class="string">'D'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">'W'</span> &amp;&amp; (s[i + <span class="number">1</span>][j] == <span class="string">'S'</span> || s[i - <span class="number">1</span>][j] == <span class="string">'S'</span> || s[i][j + <span class="number">1</span>] == <span class="string">'S'</span> || s[i][j - <span class="number">1</span>] == <span class="string">'S'</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">puts</span>(s[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Primal-Sport"><a href="#B-Primal-Sport" class="headerlink" title="B.Primal Sport"></a><a href="http://codeforces.com/contest/948/problem/B" target="_blank" rel="noopener">B.Primal Sport</a></h1><p>题意就是给你一种构造方案和$X_2$，找到一个符合构造方案的最小的$X_0$</p><p>比赛的时候没做出来，看了题解发现主要还是找规律，用$P<em>i$表示$X_i$的最大素因子，可以发现每一次都是从$[X_i-P_i+1,X_i]$中找到一个素数去构造$X</em>{i+1}$，由于要让$X_0$尽量小，那么往回推的时候找的素数应该尽量地大，然后就枚举$X_1$，$X_0$要最小肯定取$X_1-P_1+1$即可，$P$数组用欧拉筛得到即可</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int T;scanf(<span class="meta-string">"%d"</span>,&amp;T);for (int q=1; q&lt;=T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prime[<span class="number">0</span>] = <span class="number">0</span>, prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!prime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[i] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = i &lt;&lt; <span class="number">1</span>; j &lt; N; j += i)</span><br><span class="line">                prime[j] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x1 = n - prime[n] + <span class="number">1</span>; x1 &lt;= n; ++x1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x1 - prime[x1] + <span class="number">1</span> &lt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            ans = min(ans, x1 - prime[x1] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Producing-Snow"><a href="#C-Producing-Snow" class="headerlink" title="C.Producing Snow"></a><a href="http://codeforces.com/contest/948/problem/C" target="_blank" rel="noopener">C.Producing Snow</a></h1><p>题意就是给你$n$天，每一天你会造体积为$V_i$的雪，然后每天的温度会达到$T_i$度，所有存在的雪堆均会融化体积$T_i$（体积不够化就直接变成$0$），问你每一天一共融化了多少体积的雪</p><p>比赛的时候也没做出来，考虑的方向错了，考虑每一个雪堆，它的融化体积过程总是先被经过几天融化没化完，最后到某一天完全融化到$0$，那么我们对每一个雪堆二分一个它没融化完的最后一天，然后在这天的后一天把剩余的全部加，即算<strong>每一个雪堆对它后面的天数的贡献</strong>，然后用差分数组标记一下，<del>写线段树的时候用的区间最大最小值剪枝，知道肯定会被凹凸凹凸的数据卡，不写又不行</del></p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int T;scanf(<span class="meta-string">"%d"</span>,&amp;T);for (int q=1; q&lt;=T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL V[N], T[N], pt[N];</span><br><span class="line">LL res[N], cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pt[r] - pt[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, V + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, T + i);</span><br><span class="line">        pt[i] = pt[i - <span class="number">1</span>] + T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = i, r = n, x = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">            <span class="keyword">if</span> (V[i] &gt;= sum(i, mid))</span><br><span class="line">            &#123;</span><br><span class="line">                x = mid;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt[i];</span><br><span class="line">        --cnt[x + <span class="number">1</span>];</span><br><span class="line">        res[x + <span class="number">1</span>] += V[i] - sum(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d%c"</span>, cnt[i]*T[i] + res[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Perfect-Security"><a href="#D-Perfect-Security" class="headerlink" title="D.Perfect Security"></a><a href="http://codeforces.com/contest/948/problem/D" target="_blank" rel="noopener">D.Perfect Security</a></h1><p>题意就是给你一个序列$A$和序列$B$，让每一个$A_i$都去异或一个$B_j$，使得构造出来的$A’$序列字典序最小，每个$B_j$只能用一次。</p><p>一开始被BC搞方了，根本没去看这题，最后有人说这题水题才去看的。由于要让字典序最小，肯定是贪心地让越前面的$A_i$越小，然后这就是很模板的$01$字典树了，燃鹅常见的是用来求异或最大值的，最小值的话就把正反两路的策略换一下就行了；最后针对$B_j$只能用一次的条件，加一个路径覆盖次数，加数的时候把整个路径所有点权加$1$，取出来的时候把这个数的路径所有点权$-1$，代表把这个数删掉了，每次只走路径权值大于$0$的点即可</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int T;scanf(<span class="meta-string">"%d"</span>,&amp;T);for (int q=1; q&lt;=T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">2</span>], cnt, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nxt[<span class="number">0</span>] = nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt = v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N * <span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (val &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!L[u].nxt[v])</span><br><span class="line">            L[u].nxt[v] = newnode();</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">        ++L[u].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    L[u].v = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (val &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">        L[u].cnt += c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (val &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (L[L[u].nxt[v]].cnt)</span><br><span class="line">            u = L[u].nxt[v ];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            u = L[u].nxt[v ^ <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L[u].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;B[i]);</span><br><span class="line">        ins(B[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = query(A[i]);</span><br><span class="line">        update(v, <span class="number">-1</span>);</span><br><span class="line">        A[i] ^=  v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Picking-Strings"><a href="#E-Picking-Strings" class="headerlink" title="E.Picking Strings"></a><a href="http://codeforces.com/contest/948/problem/E" target="_blank" rel="noopener">E.Picking Strings</a></h1><p>题意就是给你三种变换规则和$S$串，$T$串，$Q$个询问，每次问你能否把$S<em>{a…b}$变换到$T</em>{c…d}$。</p><p>脑洞+分类讨论神题，通过这三个变换规则可以发现</p><ol><li>$B$和$C$等价，直接把字符串中所有$C$变成$B$即可。</li><li>$AAA \to empty$，好吧这是题目给的条件，不过也比较重要</li><li>$A \to BB$，即$A$可以构造<strong>偶数</strong>个$B$。</li><li>$B \to AB$，加上上面这条，又可以得到：$B \to BBB$，即$B$可以加上任意<strong>偶数</strong>个$B$。</li><li>$AB \to B$，即$B$前面的$A$可以直接消掉。</li><li>$B$不能被消掉，$B$后面的$A$字符不能被构造出来，即作为后缀的$A$只能减少不能增加。</li></ol><p>然后就可以得到以下不能被构造的情况：</p><ol><li>$S$的$B$比$T$的$B$多，或$S$和$T$的$B$字符差不为偶数。</li><li>$S$的后缀$A$比$T$的少。</li><li>$S$和$T$的$B$相同但是多出来的$A$不为$3$的倍数，即不能通过规则$3$被消掉</li><li>并没有多出来的$A$去构造一个$B$且$S$串也不存在$B$去构造$B$。</li></ol><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> caseT int T;scanf(<span class="meta-string">"%d"</span>,&amp;T);for (int q=1; q&lt;=T; ++q)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> cbs[N], cbt[N], cas[N], cat[N];</span><br><span class="line"><span class="keyword">char</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">char</span> S[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        <span class="built_in">putchar</span>(S[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n, m, a, b, c, d, q;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s + <span class="number">1</span>, t + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'C'</span>)</span><br><span class="line">                s[i] = <span class="string">'B'</span>;</span><br><span class="line">            cbs[i] = cbs[i - <span class="number">1</span>] + (s[i] == <span class="string">'B'</span>);</span><br><span class="line">            cas[i] = s[i] == <span class="string">'A'</span> ? cas[i - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i] == <span class="string">'C'</span>)</span><br><span class="line">                t[i] = <span class="string">'B'</span>;</span><br><span class="line">            cbt[i] = cbt[i - <span class="number">1</span>] + (t[i] == <span class="string">'B'</span>);</span><br><span class="line">            cat[i] = t[i] == <span class="string">'A'</span> ? cat[i - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            <span class="keyword">int</span> CBS = cbs[b] - cbs[a - <span class="number">1</span>], CBT = cbt[d] - cbt[c - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (CBS &gt; CBT || ((CBT - CBS) &amp; <span class="number">1</span>))<span class="comment">//S的'B'比T多或者不能通过+2k个B补成T</span></span><br><span class="line">                ans[i] = <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//用多出来的A补</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> CAS = min(b - a + <span class="number">1</span>, cas[b]), CAT = min(d - c + <span class="number">1</span>, cat[d]);</span><br><span class="line">                <span class="keyword">int</span> resA = CAS - CAT;</span><br><span class="line">                <span class="keyword">if</span> (resA &lt; <span class="number">0</span>)<span class="comment">//S的后缀连续A比T少</span></span><br><span class="line">                    ans[i] = <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (CBS == CBT)<span class="comment">//B相同，消掉一部分A</span></span><br><span class="line">                        ans[i] = resA % <span class="number">3</span> == <span class="number">0</span> ? <span class="string">'1'</span> : <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        ans[i] = (resA || CBS) + <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 欧拉筛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 1001 狼抓兔子（平面图网络流）</title>
      <link href="/2018/03/05/BZOJ-1001-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/"/>
      <url>/2018/03/05/BZOJ-1001-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>1001: [BeiJing2006]狼抓兔子<br>Time Limit: 15 Sec  Memory Limit: 162 MB<br>Submit: 26953  Solved: 6872<br>[Submit][Status][Discuss]</p><a id="more"></a><p>现在小朋友们最喜欢的”喜羊羊与灰太狼”,话说灰太狼抓羊不到，但抓兔子还是比较在行的，</p><p>而且现在的兔子还比较笨，它们只有两个窝，现在你做为狼王，面对下面这样一个网格的地形：</p><p> <img src="http://www.lydsy.com/JudgeOnline/images/1001.jpg" alt="img"></p><p>左上角点为(1,1),右下角点为(N,M)(上图中N=4,M=5).有以下三种类型的道路 </p><p>1:(x,y)&lt;==&gt;(x+1,y) </p><p>2:(x,y)&lt;==&gt;(x,y+1) </p><p>3:(x,y)&lt;==&gt;(x+1,y+1) </p><p>道路上的权值表示这条路上最多能够通过的兔子数，道路是无向的. 左上角和右下角为兔子的两个窝，</p><p>开始时所有的兔子都聚集在左上角(1,1)的窝里，现在它们要跑到右下解(N,M)的窝中去，狼王开始伏击</p><p>这些兔子.当然为了保险起见，如果一条道路上最多通过的兔子数为K，狼王需要安排同样数量的K只狼，</p><p>才能完全封锁这条道路，你需要帮助狼王安排一个伏击方案，使得在将兔子一网打尽的前提下，参与的</p><p>狼的数量要最小。因为狼还要去找喜羊羊麻烦.</p><p>Input</p><p>第一行为N,M.表示网格的大小，N,M均小于等于1000.</p><p>接下来分三部分</p><p>第一部分共N行，每行M-1个数，表示横向道路的权值. </p><p>第二部分共N-1行，每行M个数，表示纵向道路的权值. </p><p>第三部分共N-1行，每行M-1个数，表示斜向道路的权值. </p><p>输入文件保证不超过10M</p><p>Output</p><p>输出一个整数，表示参与伏击的狼的最小数量.</p><p>Sample Input</p><p>3 4<br>5 6 4<br>4 3 1<br>7 5 3<br>5 6 7 8<br>8 7 6 5<br>5 5 5<br>6 6 6</p><p>Sample Output</p><p>14</p><p>HINT</p><p> 2015.4.16新加数据一组，可能会卡掉从前可以过的程序。</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="noopener">BZOJ 1001</a></p><p>这种平面网格图（或者说按一定规律排列的很多点构成的图），可以建立对偶图，在对偶图上求两个虚拟面的最短路。如果$S-T$有最小割，那么这些割边加上$S-T$这条辅助线会变成一个圈，那么就先新增一条辅助线连接原图的源点$S$和原图的汇点$T$，然后这条辅助线和原图的边将整个大平面分割成了许多小平面，给这些平面标号后再求辅助线分割的小平面到被分割后剩余的大平面的最短路就是要求的答案。~~这种题感觉有一个难点是如何方便快捷地标号，以前想麻烦了就立即放弃构图了，可以发现只要对一些边缘的边特判一下建边，其余的标号都是具有一定规律的</p><p>我的建图方式如下：</p><p><img src="https://s1.ax1x.com/2018/03/05/96sRyQ.png" alt="96sRyQ.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, w;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _w): to(_to), nxt(_nxt), w(_w) &#123;&#125;</span><br><span class="line">&#125; E[N * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot, d[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], w);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">    E[tot] = edge(s, head[t], w);</span><br><span class="line">    head[t] = tot++;</span><br><span class="line">    <span class="comment">//    printf("[%d  %d]\n", s, t);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    CLR(d, <span class="number">0x3f</span>);</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    Q.push_back(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop_front();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + E[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + E[i].w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v] &amp;&amp; d[v] &lt;= d[t])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!Q.empty() &amp;&amp; d[v] &lt; d[Q.front()])</span><br><span class="line">                        Q.push_front(v);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Q.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j, w;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">0</span>, T = (n - <span class="number">1</span>) * (m - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">            add(j, T, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">                add((<span class="number">2</span> * i - <span class="number">3</span>) * (m - <span class="number">1</span>) + j, <span class="number">2</span> * (i - <span class="number">1</span>) * (m - <span class="number">1</span>) + j, w); <span class="comment">//向下</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">            add((<span class="number">2</span> * n - <span class="number">3</span>) * (m - <span class="number">1</span>) + j, S, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    add((<span class="number">2</span> * i - <span class="number">1</span>) * (m - <span class="number">1</span>) + j, S, w);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == m)</span><br><span class="line">                &#123;</span><br><span class="line">                    add((<span class="number">2</span> * (i - <span class="number">1</span>)) * (m - <span class="number">1</span>) + j - <span class="number">1</span>, T, w);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    add(<span class="number">2</span> * (i - <span class="number">1</span>) * (m - <span class="number">1</span>) + j - <span class="number">1</span>, <span class="number">2</span> * (i - <span class="number">1</span>) * (m - <span class="number">1</span>) + j - <span class="number">1</span> + m, w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m - <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w);</span><br><span class="line">                add((i - <span class="number">1</span>) * (m - <span class="number">1</span>) * <span class="number">2</span> + j, (i - <span class="number">1</span>) * (m - <span class="number">1</span>) * <span class="number">2</span> + j + m - <span class="number">1</span>, w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, spfa(S, T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 图论 </category>
          
          <category> 网络流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201509-5 最佳文章（AC自动机+矩阵快速幂）</title>
      <link href="/2018/03/02/CCF-CSP-201509-5-%E6%9C%80%E4%BD%B3%E6%96%87%E7%AB%A0%EF%BC%88AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/"/>
      <url>/2018/03/02/CCF-CSP-201509-5-%E6%9C%80%E4%BD%B3%E6%96%87%E7%AB%A0%EF%BC%88AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>问题描述</p><p>　　小明最近在研究一门新的语言，叫做Q语言。Q语言单词和文章都可以用且仅用只含有小写英文字母的字符串表示，任何由这些字母组成的字符串也都是一篇合法的Q语言文章。<br><a id="more"></a><br>　　在Q语言的所有单词中，小明选出了他认为最重要的<em>n</em>个。使用这些单词，小明可以评价一篇Q语言文章的“重要度”。<br>　　文章“重要度”的定义为：在该文章中，所有重要的Q语言单词出现次数的总和。其中多次出现的单词，不论是否发生包含、重叠等情况，每次出现均计算在内。<br>　　例如，假设<em>n</em> = 2，小明选出的单词是gvagv和agva。在文章gvagvagvagv中，gvagv出现了3次，agva出现了2次，因此这篇文章的重要度为3+2=5。<br>　　现在，小明想知道，一篇由<em>m</em>个字母组成的Q语言文章，重要度最高能达到多少。</p><p>输入格式</p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，表示小明选出的单词个数和最终文章包含的字母个数。<br>　　接下来<em>n</em>行，每行包含一个仅由英文小写字母构成的字符串，表示小明选出的这<em>n</em>个单词。</p><p>输出格式</p><p>　　输出一行一个整数，表示由m个字母组成的Q语言文章中，重要度最高的文章的重要度。</p><p>样例输入</p><p>3 15<br>agva<br>agvagva<br>gvagva</p><p>样例输出</p><p>11</p><p>样例说明</p><p>　　15个字母组成的重要度最高的文章为gvagvagvagvagva。<br>　　在这篇文章中，agva出现4次，agvagva出现3次，gvagva出现4次，共计4+3+4=11次。</p><p>评测用例规模与约定</p><p>　　在评测时将使用10个评测用例对你的程序进行评测。<br>　　设<em>s</em>为构成<em>n</em>个重要单词字母的总个数，例如在样例中，<em>s</em>=4+7+6=17；<em>a</em>为构成<em>n</em>个重要单词字母的种类数，例如在样例中，共有3中字母’a’,’g’,’v’，因此<em>a</em>=3。<br>　　评测用例1和2满足2 ≤ <em>n</em> ≤ 3，1500 ≤ <em>m</em> ≤ 2000，<em>s</em> = 40；<br>　　评测用例3和4满足<em>m</em> = 20，2 ≤ <em>a</em> ≤ 3；<br>　　评测用例5、6和7满足2000 ≤ <em>m</em> ≤ 100000；<br>　　评测用例8满足<em>n</em> = 2；<br>　　所有的评测用例满足1 ≤ <em>s</em> ≤ 100，1 ≤ <em>m</em> ≤ 1015，每个单词至少包含1个字母，保证单词中仅出现英文小写字母，输入中不含多余字符，不会出现重复的单词。</p><p>题目链接：<a href="http://118.190.20.162/view.page?gpid=T28" target="_blank" rel="noopener">最佳文章</a></p><p>首先肯定是构造$AC自动机$，然后本来是用$dp[i][j]$表示构造长度为$i$，走到第$j$个节点的最高重要度，$dp$数组初始化设为$-\infty$，$dp[0][0]=0$，然后$O(m*s)$地只通过合法点转移，但是后面几组数据很大，明显是矩阵快速幂，由于$max$函数具有可加性，因此可以用矩阵快速幂加一点的变形，将加号改成$max$函数，然后做$m$次$AC$自动机对应矩阵$A$的幂，最后$max{dp[0][i]}$就是答案了。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ac &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt[<span class="number">26</span>], w, f;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            fill(nxt, nxt + <span class="number">26</span>, <span class="number">-1</span>);</span><br><span class="line">            w = f = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; L[N];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[sz].init();</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                L[u].nxt[v] = newnode();</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].w = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span>(~v)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                L[v].f = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].f;</span><br><span class="line">            L[u].w += L[uf].w;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> &amp;v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span>(~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                    L[v].f = L[uf].nxt[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    v = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL A[N][N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                A[i][j] = <span class="number">-0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span> *(<span class="keyword">const</span> Mat &amp;a, <span class="keyword">const</span> Mat &amp;b) &#123;</span><br><span class="line">        Mat ret;</span><br><span class="line">        ret.zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">                        ret.A[i][j] = max(ret.A[i][j], a.A[i][k] + b.A[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span> ^(Mat a, LL b) &#123;</span><br><span class="line">        Mat ret = a;</span><br><span class="line">        --b;</span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * a;</span><br><span class="line">            a = a * a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i, k;</span><br><span class="line">    LL m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    ac::init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        ac::ins(s, <span class="built_in">strlen</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    ac::build();</span><br><span class="line">    A.zero();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ac::sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ac::L[i].nxt[k];</span><br><span class="line">            A.A[i][v] = ac::L[v].w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A = A ^ m;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ac::sz; ++i)</span><br><span class="line">        ans = max(ans, A.A[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #466 Div.2题解</title>
      <link href="/2018/02/28/CF-466-Div-2%E9%A2%98%E8%A7%A3/"/>
      <url>/2018/02/28/CF-466-Div-2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Points-on-the-line"><a href="#A-Points-on-the-line" class="headerlink" title="A.Points on the line"></a><a href="http://codeforces.com/problemset/problem/940/A" target="_blank" rel="noopener">A.Points on the line</a></h1><p>题意就是给你一个数列，求删掉最少的数使得最大值和最小值之差不超过$d$。</p><a id="more"></a><p>显然先对数列排序一下，显然删中间的数肯定不会影响最大最小值，因此贪心地按照某个数产生的超过$d$的数对从来选择删最小值或最大值，直到不存在这样的数对为止。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;d);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    i = <span class="number">1</span>, j = n;</span><br><span class="line">    <span class="keyword">while</span> (j - i + <span class="number">1</span> &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pb = <span class="number">0</span>, ps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[k] - arr[i] &gt; d)</span><br><span class="line">                ++pb;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] - arr[k] &gt; d)</span><br><span class="line">                ++ps;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pb == <span class="number">0</span> &amp;&amp; ps == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (pb &gt;= ps)</span><br><span class="line">            ++i, ++ans;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            --j, ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Our-Tanya-is-Crying-Out-Loud"><a href="#B-Our-Tanya-is-Crying-Out-Loud" class="headerlink" title="B.Our Tanya is Crying Out Loud"></a><a href="http://codeforces.com/problemset/problem/940/B" target="_blank" rel="noopener">B.Our Tanya is Crying Out Loud</a></h1><p>题意就是给你$n$和$k$，每次你可以把$n$减去$1$，花费为$A$，或者在能被$k$整除的时候除以$k$，花费为$B$，求将$n$变成$1$的最小花费。</p><p>先特判掉$k=1$的情况，然后再贪心地做，每次的最优的选择总是做一次$B$操作或者$n\%k$次$A$操作，然后取花费小的那个，直到$n=1$为止。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">LL n, k, A, B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; A &gt;&gt; B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (n - <span class="number">1</span>)*A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LL res = n % k;</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LL t = n;</span><br><span class="line">                n /= k;</span><br><span class="line">                <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans += (t - <span class="number">1L</span>L) * A;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans += min(A * (t - n), B);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                n -= res;</span><br><span class="line">                ans += (res * A);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Phone-Numbers"><a href="#C-Phone-Numbers" class="headerlink" title="C.Phone Numbers"></a><a href="http://codeforces.com/problemset/problem/940/C" target="_blank" rel="noopener">C.Phone Numbers</a></h1><p>题意就是给你给你一个长度为$n$的字符串$s$，仅用$s$中的字符集构造一个长度为$k$的串$t$，其字典序<strong>严格</strong>大于$s$</p><p>的前提下$t$的字典序最小。</p><p>考虑到可能出现多种情况，加上字典序比较是基于前缀的，因此就分类讨论一下$k$和$n$的关系：</p><ol><li>当$k \le n$时，考虑从某一个位置开始让$t_i$大于$s_i$，且要使得这个$i$尽量地靠后，因此从$s$的前$k$个位置中找到最后一个不是字符集最大值的位置，这个位置就是要找的$i$，此时只要让前$i-1$个字母与$s$相同，第$i$个字母用第一个大于该位置的字符集字母代替，剩下的用字符集最小的字母填充即可</li><li>当$k&gt;n$时，前$n$个字母与$s$相同，剩下的用字符集中最小字母填充即可</li></ol><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">300</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[s[i]])</span><br><span class="line">                vis[s[i]] = <span class="number">1</span>, st.push_back(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(all(st));</span><br><span class="line">        <span class="keyword">if</span> (k &gt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - n; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, st[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sz = st.size();</span><br><span class="line">            <span class="keyword">if</span> (st.size() &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[i] != st[sz - <span class="number">1</span>])</span><br><span class="line">                        pos = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> res = k;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; ++i)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">                res -= (pos);</span><br><span class="line">                <span class="keyword">char</span> tar = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (st[i] &gt; s[pos])</span><br><span class="line">                    &#123;</span><br><span class="line">                        tar = st[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, tar);</span><br><span class="line">                --res;</span><br><span class="line">                <span class="keyword">while</span> (res--)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>, st[<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Alena-And-The-Heater"><a href="#D-Alena-And-The-Heater" class="headerlink" title="D.Alena And The Heater"></a><a href="http://codeforces.com/problemset/problem/940/D" target="_blank" rel="noopener">D.Alena And The Heater</a></h1><p>题意就是给你一个序列${a_i}$和${b_i’}$，后者是根据题目所给规律（涉及到$L$和$R$）用${a_i}$构造的，根据这个规律构造出另外一个数组${b}$与${b_i’}$相同，求$L$和$R$的值，<strong>答案不能超过$10^9$</strong></p><p>根据题目的规律，$O(n)$地维护$L$和$R$的值就好，<del>奇奇怪怪的题目，初始化的时候习惯性设为1e9+7然后就GG了</del></p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], tb[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        b[i] = s[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">-1e9</span>, R = <span class="number">1e9</span>;<span class="comment">//别设成1e9+7……</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">5</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Min = min(&#123;a[i], a[i - <span class="number">1</span>], a[i - <span class="number">2</span>], a[i - <span class="number">3</span>], a[i - <span class="number">4</span>]&#125;);</span><br><span class="line">            <span class="keyword">if</span> (b[i - <span class="number">1</span>] &amp;&amp; b[i - <span class="number">2</span>] &amp;&amp; b[i - <span class="number">3</span>] &amp;&amp; b[i - <span class="number">4</span>])</span><br><span class="line">                R = min(R, Min - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Max = max(&#123;a[i], a[i - <span class="number">1</span>], a[i - <span class="number">2</span>], a[i - <span class="number">3</span>], a[i - <span class="number">4</span>]&#125;);</span><br><span class="line">            <span class="keyword">if</span> ((!b[i - <span class="number">1</span>]) &amp;&amp; (!b[i - <span class="number">2</span>]) &amp;&amp; (!b[i - <span class="number">3</span>]) &amp;&amp; (!b[i - <span class="number">4</span>]))</span><br><span class="line">                L = max(L, Max + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, L,  R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Cashback"><a href="#E-Cashback" class="headerlink" title="E.Cashback"></a><a href="http://codeforces.com/problemset/problem/940/E" target="_blank" rel="noopener">E.Cashback</a></h1><p>题意就是给你一个长度为$n$的序列和$c$，定义一个子区间的价值为除了前$\left\lfloor k \over c\right\rfloor$小（不去重）的数的加和，比如$[3, 1, 6, 5, 2]$， $c = 2$ ，序列价值为$3 + 6 + 5 = 14$，求如此分割序列使得价值总和最小。</p><p>看范围可以知道这玩意儿不太可能是二维$DP$，然后就考虑$dp[i]$为序列$1-i$的分割最少价值。</p><p>那么就有转移方程：</p><script type="math/tex; mode=display">dp[i] = min(dp[i], dp[j]+calc(j+1,i))</script><p>然后我用最暴力的方法实现一下发现这个复杂度是$O(n^3logn)$的（至少样例能过说明蒟蒻我这个转移方程是没问题的2333），无解，看了Tutorial的解释是说最优分割方案只有两种：要么分割长度为$1$，要么分割长度为$c$，想了一下确实是这样。</p><p>假设分割区间小于$c$，那么价值是这个区间的总和，还不如凑到$c$能还能去掉最小的那个数；假设分割区间大于$c$，那么和前$c$个一段，剩下成为一段价值之和并没有什么区别，主要思路就是分割成$k$个$c$长度的区间是肯定不会比一个$k*c$长度为区间的差。因此用单调队列或者其他什么数据结构<del>（主席树之类的）</del>维护一下连续的长度为$c$的子区间最小值即可。<del>蒟蒻没怎么写过单调队列，把deque写成queue debug半天…………</del></p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL arr[N], dp[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(dp, INF);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre[r] - pre[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, c;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;c))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, arr + i), pre[i] = pre[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            init();</span><br><span class="line">            LL inf = dp[<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (!Q.empty() &amp;&amp; arr[i] &lt;= arr[Q.back()])</span><br><span class="line">                    Q.pop_back();</span><br><span class="line">                Q.push_back(i);</span><br><span class="line">                <span class="keyword">while</span> (!Q.empty() &amp;&amp; Q.front() &lt; i - c + <span class="number">1</span>)</span><br><span class="line">                    Q.pop_front();</span><br><span class="line">                dp[i] = min&lt;LL&gt;(&#123;dp[i], dp[i - <span class="number">1</span>] + arr[i], i - c &lt; <span class="number">0</span> ? inf : dp[i - c] + sum(i - c + <span class="number">1</span>, i) - arr[Q.front()]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, dp[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Machine-Learning"><a href="#F-Machine-Learning" class="headerlink" title="F.Machine Learning"></a><a href="http://codeforces.com/problemset/problem/940/F" target="_blank" rel="noopener">F.Machine Learning</a></h1><p>题意就是给你一个长度为$n$的序列，和$m$个操作，每次操作你可以查询$[l,r]$中所有数的出现次数组成的序列的$mex$值，或者令$a_p=x$</p><p>这题很明显的带修改莫队算法，虽然比赛的时候过了样例，但是实际存在好几处$bug$和排序的问题，$pretest$都过不了。赛后发现是自己naive了，带修改的莫队姿势和普通莫队是有一些区别的。</p><ol><li>块大小一般设为$n^{2/3}$，因此块数为$n^{1/3}$</li><li>询问排序规则是先按照左端点所在块排序，再按照右端点所在块排序，再按照操作的时间顺序排序</li></ol><p>然后动态维护 数的出现次数 和 出现次数的出现次数即可， 由于是出现次数序列的$mex$值，最坏情况是$1+2+…+n$，是$n^2$的级别，那么这个$mex$范围是在$sqrt(n)$内的，也不用什么数据结构就直接暴力$for$一遍找$mex$就好了，一开始记得把初始序列和修改的数放到一起离散化一下</p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> unit = <span class="number">3000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, bl, br, t, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> query &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bl != rhs.bl)</span><br><span class="line">            <span class="keyword">return</span> bl &lt; rhs.bl;</span><br><span class="line">        <span class="keyword">if</span> (br != rhs.br)</span><br><span class="line">            <span class="keyword">return</span> br &lt; rhs.br;</span><br><span class="line">        <span class="keyword">return</span> t &lt; rhs.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, v;</span><br><span class="line">&#125; C[N];</span><br><span class="line"><span class="keyword">int</span> arr[N], vis[N], cnt[N * <span class="number">3</span>], cq, cc, L, R, T, ans[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    --vis[cnt[x]];</span><br><span class="line">    ++vis[++cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    --vis[cnt[x]];</span><br><span class="line">    ++vis[--cnt[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">F</span><span class="params">(op &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= c.x &amp;&amp; c.x &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        del(arr[c.x]);</span><br><span class="line">        add(c.v);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[c.x], c.v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, o, l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i), v.push_back(*(arr + i));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;o, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cq;</span><br><span class="line">            Q[cq] = &#123;l, r, l / unit, r / unit, cc, cq&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++cc;</span><br><span class="line">            C[cc] = &#123;l, r&#125;;</span><br><span class="line">            v.push_back(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(v));</span><br><span class="line">    v.erase(unique(all(v)), v.end());</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        *(arr + i) = lower_bound(all(v), *(arr + i)) - v.begin() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= cc; ++i)</span><br><span class="line">        (*(C + i)).v = lower_bound(all(v), (*(C + i)).v) - v.begin() + <span class="number">1</span>;</span><br><span class="line">    sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + cq);</span><br><span class="line">    L = <span class="number">1</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= cq; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        query &amp;tmp = Q[i];</span><br><span class="line">        <span class="keyword">while</span> (T &lt; tmp.t)</span><br><span class="line">            F(C[++T]);</span><br><span class="line">        <span class="keyword">while</span> (T &gt; tmp.t)</span><br><span class="line">            F(C[T--]);</span><br><span class="line">        <span class="keyword">while</span> (R &lt; tmp.r)</span><br><span class="line">            add(*(arr + (++R)));</span><br><span class="line">        <span class="keyword">while</span> (R &gt; tmp.r)</span><br><span class="line">            del(*(arr + (R--)));</span><br><span class="line">        <span class="keyword">while</span> (L &lt; tmp.l)</span><br><span class="line">            del(*(arr + (L++)));</span><br><span class="line">        <span class="keyword">while</span> (L &gt; tmp.l)</span><br><span class="line">            add(*(arr + (--L)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[Q[i].id] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= cq; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 思维 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #465 Div.2 A B C D E</title>
      <link href="/2018/02/20/CF-465-Div-2-A-B-C-D-E/"/>
      <url>/2018/02/20/CF-465-Div-2-A-B-C-D-E/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Fafa-and-his-Company"><a href="#A-Fafa-and-his-Company" class="headerlink" title="A.Fafa and his Company"></a><a href="http://codeforces.com/contest/935/problem/A" target="_blank" rel="noopener">A.Fafa and his Company</a></h1><p>题意就是给让你把$n$个人划分成$m$个同等大小的组，每个组内的人员大于$1$，问有几种方案，暴力判断就行了。</p><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> ((n - i) % i == <span class="number">0</span>)</span><br><span class="line">                ++ans;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Fafa-and-the-Gates"><a href="#B-Fafa-and-the-Gates" class="headerlink" title="B.Fafa and the Gates"></a><a href="http://codeforces.com/contest/935/problem/B" target="_blank" rel="noopener">B.Fafa and the Gates</a></h1><p>题意就是让你在第一象限走，直线$y=x$是分界线（不属于任何一国），如果从一国穿过分界线到另一个国，要付一块钱，问你会按照给定的路线走的话要付多少钱，模拟一遍，维护一下自己最后属于哪个国家，穿过的时候跟属于的国家比较一下看是否要花钱。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[<span class="string">'U'</span>] = <span class="number">0</span>, id[<span class="string">'D'</span>] = <span class="number">1</span>, id[<span class="string">'L'</span>] = <span class="number">2</span>, id[<span class="string">'R'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> belong = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> px = <span class="number">0</span>, py = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> q = id[s[i]];</span><br><span class="line">            <span class="keyword">int</span> vx = px + dir[q][<span class="number">0</span>], vy = py + dir[q][<span class="number">1</span>];;</span><br><span class="line">            <span class="keyword">if</span> (vx != vy)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> vbelong = vx &gt; vy;</span><br><span class="line">                <span class="keyword">if</span> (belong != <span class="number">-1</span> &amp;&amp; vbelong != belong)</span><br><span class="line">                    ++ans;</span><br><span class="line">                belong = vbelong;</span><br><span class="line">            &#125;</span><br><span class="line">            px = vx, py = vy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Fifa-and-Fafa"><a href="#C-Fifa-and-Fafa" class="headerlink" title="C.Fifa and Fafa"></a><a href="http://codeforces.com/contest/935/problem/C" target="_blank" rel="noopener">C.Fifa and Fafa</a></h1><p>题意似乎不是很好懂，看样例才弄懂，简单地说就是给你一个平面，上面有一个圆心为$(x1,y1)$（记为点$M$）半径为$R$的圆，还有一个点$(x2,y2)$（记为点$A$），让你再构造一个圆使得跟前面那个圆的面积交最大且不能包含$(x2,y2)$，输出构造的圆心$(x3,y3)$（记为点$B$）和半径$r$。</p><p>实际上只要简单地分类讨论就行了</p><ol><li>如果点在圆外，那么肯定可以取到最优情况直接覆盖整个圆，</li><li>如果点和圆心重合，那么最优方案是构造一个半径为$R \over 2$的圆，圆心直接取$((x1+x1+R) / 2,y1)$即可，</li><li>如果点在圆内且不与圆心重合，那么只要延长圆心和该点的连线，与圆交于另一点$(x4,y4)$，那么$(x2,y2)$和$(x4,y4)$就是在圆上的两个点，相加除二得到圆心坐标，再计算其距离，除二得到半径。如何算出延长线和圆的交点呢，由于都在一条直线上，将$\vec{AM}$扩大一定倍数得到$\vec{MB}$，然后加起来就得到了$\vec{AB}$。$B$坐标就得到了</li></ol><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[N], y[N], R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">double</span> _x1, <span class="keyword">double</span> _y1, <span class="keyword">double</span> _x2, <span class="keyword">double</span> _y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(sqr(_x1 - _x2) + sqr(_y1 - _y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; R &gt;&gt; x[<span class="number">1</span>] &gt;&gt; y[<span class="number">1</span>] &gt;&gt; x[<span class="number">2</span>] &gt;&gt; y[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> disfa = dis(x[<span class="number">1</span>], y[<span class="number">1</span>], x[<span class="number">2</span>], y[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="number">1</span>] == x[<span class="number">2</span>] &amp;&amp; y[<span class="number">1</span>] == y[<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.16f %.16f %.16f\n"</span>, (<span class="number">2.0</span> * x[<span class="number">1</span>] + R) / <span class="number">2.0</span>, y[<span class="number">1</span>], R / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (disfa &gt; R)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.16f %.16f %.16f\n"</span>, x[<span class="number">1</span>], y[<span class="number">1</span>], R);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> r = (R + disfa) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">double</span> xa = x[<span class="number">1</span>] - x[<span class="number">2</span>], ya = y[<span class="number">1</span>] - y[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">double</span> rat = R / disfa;</span><br><span class="line">            <span class="keyword">double</span> xb = x[<span class="number">1</span>] + rat * xa, yb = y[<span class="number">1</span>] + rat * ya;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.16f %.16f %.16f\n"</span>, (x[<span class="number">2</span>] + xb) / <span class="number">2.0</span>, (y[<span class="number">2</span>] + yb) / <span class="number">2.0</span>, <span class="built_in">fabs</span>(r));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Fafa-and-Ancient-Alphabet"><a href="#D-Fafa-and-Ancient-Alphabet" class="headerlink" title="D.Fafa and Ancient Alphabet"></a><a href="http://codeforces.com/contest/935/problem/D" target="_blank" rel="noopener">D.Fafa and Ancient Alphabet</a></h1><p>题意就是给你字符集大小为$m$，长为$n$的两个字符串$S1$和$S2$，某一些位置不能确定，求假设把所有位置都确定之后$S1$字典序大于$S2$的概率，用逆元表示。这题实际上跟数位$DP$很像，第$i$位的贡献就是考虑前缀$S[1,i-1]$相同时，$S1$的第$i$位大于$S2$的第$i$位的几率，然后求和加起来即可。即：$ans = ans + P_p*P_g$</p><p>显然分四种情况讨论</p><ol><li>当两者都是确定的时候，若$S1[i]&gt;S2[i]$，$P_g=1$，否则$P_g=0$，</li><li>当$S1[i]$不确定而$S2[i]$确定时，$P_g=(m-S2[i])/m$，</li><li>当$S1[i]$确定而$S2[i]$不确定时，$P_g=(S1[i]-1)/m$，</li><li>当两个都不确定时，概率就相当于在$m$个数里先后抽两次，后者比前者大的概率，那么就是$P<em>g=sum</em>{i=0}^{m-1}(1/m)*(i/m)$，用求和公式化简一下就是$P_g=(m-1)/(2m)$</li></ol><p>然后是如何求前缀相同的几率$P_p$呢，假设前面有$c$个不能比较的位置，那么$P_p={(1/m)}^c$，一旦出现某个位置使得这两个串包含这个前缀之后关系可以被直接确定，也就是说从这个位置开始的前缀不会再相等了，就应该直接$break$</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> s1[N], s2[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = r * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s1[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s2[i]);</span><br><span class="line">        <span class="keyword">register</span> LL invm = qpow(m, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">register</span> LL invsig2 = <span class="number">1L</span>L * (m - <span class="number">1</span>) * qpow(<span class="number">2L</span>L * m, mod - <span class="number">2</span>) % mod;</span><br><span class="line">        <span class="keyword">register</span> LL P_p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">register</span> LL Ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            LL P_g = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] &amp;&amp; s2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                P_g = (s1[i] &gt; s2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!s1[i] &amp;&amp; s2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                P_g = (P_g + <span class="number">1L</span>L * (m - s2[i]) * invm % mod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s1[i] &amp;&amp; !s2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                P_g = (P_g + <span class="number">1L</span>L * (s1[i] - <span class="number">1</span>) * invm) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                P_g = (P_g + invsig2) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            Ans += P_p * P_g;</span><br><span class="line">            Ans %= mod;</span><br><span class="line">            <span class="keyword">if</span> (!s1[i] || !s2[i])</span><br><span class="line">                P_p = P_p * invm % mod;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] &amp;&amp; s2[i] &amp;&amp; (s1[i] != s2[i]))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, Ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Fafa-and-Ancient-Mathematics"><a href="#E-Fafa-and-Ancient-Mathematics" class="headerlink" title="E.Fafa and Ancient Mathematics"></a><a href="http://codeforces.com/contest/935/problem/E" target="_blank" rel="noopener">E.Fafa and Ancient Mathematics</a></h1><p>题意就是给你一串含有括号和数字，未知运算符的表达式，数字的范围是$[0,9]$，求用$P$个加号，$M$个减号补全这些未知运算符之后最大的表达式的值。</p><p>很显然可以看出来是树形$DP$，而且跟表达式树有关，但是并不知道怎写，参考了一下别人的代码，用递归做的，每次找到左右两个部分，处理完左边再处理右边，设在表达式树上的结点为$k$，枚举当前子树用的符号个数，枚举左子树用的符号个数，就可以在树上$DP$，转移方程：</p><script type="math/tex; mode=display">\begin{cases}Max[k][j] = max(Max[k][j], Max[ls][lj] + Max[rs][j -1- lj]);当前位置用加号\\Min[k][j] = min(Min[k][j], Min[ls][lj] + Min[rs][j - flag - lj]);当前位置用加号\\Max[k][j] = max(Max[k][j], Max[ls][lj] - Min[rs][j - 1 - lj]);当前位置用减号\\Min[k][j] = min(Min[k][j], Min[ls][lj] - Max[rs][j - 1 - lj]);当前位置用减号\end{cases}</script><p>由于字符个数比较多，第二维就只记录比较少的那个。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> Min[N][M], Max[N][M], sz, bpos[N], cnt, flag;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    CLR(Min, INF);</span><br><span class="line">    CLR(Max, -INF);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty())</span><br><span class="line">        st.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = ++sz;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        Max[k][<span class="number">0</span>] = Min[k][<span class="number">0</span>] = s[l] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> rpos = (s[l + <span class="number">1</span>] == <span class="string">'('</span>) ? bpos[l + <span class="number">1</span>] + <span class="number">1</span> : l + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> ls = solve(l + <span class="number">1</span>, rpos - <span class="number">1</span>), rs = solve(rpos + <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//加号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = flag; j &lt;= cnt; ++j)<span class="comment">//用了j个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lj = <span class="number">0</span>; lj + flag &lt;= j; ++lj)<span class="comment">//左边用了lj个</span></span><br><span class="line">            &#123;</span><br><span class="line">                Max[k][j] = max(Max[k][j], Max[ls][lj] + Max[rs][j - flag - lj]);</span><br><span class="line">                Min[k][j] = min(Min[k][j], Min[ls][lj] + Min[rs][j - flag - lj]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//减号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = flag ^ <span class="number">1</span>; j &lt;= cnt; ++j)<span class="comment">//用了j个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lj = <span class="number">0</span>; lj + (flag ^ <span class="number">1</span>) &lt;= j; ++lj)<span class="comment">//左边用了lj个</span></span><br><span class="line">            &#123;</span><br><span class="line">                Max[k][j] = max(Max[k][j], Max[ls][lj] - Min[rs][j - (flag ^ <span class="number">1</span>) - lj]);</span><br><span class="line">                Min[k][j] = min(Min[k][j], Min[ls][lj] - Max[rs][j - (flag ^ <span class="number">1</span>) - lj]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cdel, cadd, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, s + <span class="number">1</span>, &amp;cadd, &amp;cdel))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        flag = cadd &lt; cdel;<span class="comment">//用加号为1，减号为0</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'('</span>)</span><br><span class="line">                st.push(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">')'</span>)</span><br><span class="line">                bpos[st.top()] = i, st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = min(cdel, cadd);</span><br><span class="line">        <span class="keyword">int</span> rt = solve(<span class="number">1</span>, len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max[rt][cnt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #463 Div.1+Div.2 A B C D E</title>
      <link href="/2018/02/17/CF-463-Div-1-Div-2-A-B-C-D-E/"/>
      <url>/2018/02/17/CF-463-Div-1-Div-2-A-B-C-D-E/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Palindromic-Supersequence"><a href="#A-Palindromic-Supersequence" class="headerlink" title="A.Palindromic Supersequence"></a><a href="http://codeforces.com/contest/932/problem/A" target="_blank" rel="noopener">A.Palindromic Supersequence</a></h1><p>题意就是给你一个串$s$然后让你构造一个回文串$t$使得$s$是$t$的子序列</p><a id="more"></a><p>把$s$正反各输出一次就行了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        reverse(s, s + len);</span><br><span class="line">        <span class="built_in">puts</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Recursive-Queries"><a href="#B-Recursive-Queries" class="headerlink" title="B.Recursive Queries"></a><a href="http://codeforces.com/contest/932/problem/B" target="_blank" rel="noopener">B.Recursive Queries</a></h1><p>题意就是定义$f(n)$与$g(n)$函数，多组询问$[l,r]$中符合$g(x)=k$的$x$的个数。</p><p>由于$g(n)$最后的范围是$[1,9]$那么暴力打表记录$[1,9]$这些函数值由哪些$x$得到，把这些位置集合分别排序，然后询问的时候二分一下左右端点作差就是答案了。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[N], g[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pos[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> dfs(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">G</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = x % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            r = r * t;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, l, r, k, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i)</span><br><span class="line">        f[i] = G(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i] = dfs(i);</span><br><span class="line">        pos[g[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        sort(pos[i].begin(), pos[i].end());</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, upper_bound(pos[k].begin(), pos[k].end(), r) - lower_bound(pos[k].begin(), pos[k].end(), l));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Permutation-Cycle"><a href="#C-Permutation-Cycle" class="headerlink" title="C.Permutation Cycle"></a><a href="http://codeforces.com/contest/932/problem/C" target="_blank" rel="noopener">C.Permutation Cycle</a></h1><p>题意就是让你构造序列使得任意一个位置可以通过题目中的运算回到该位置，且运算次数只能是$a$或$b$，写几组数据可以很容易地发现如果把运算过程中出现的位置放到一起，那么这些位置的个数刚好等于运算次数，那么问题就变成了求$ax+by=n$是否有非负整数解，根据范围也不需要什么$exgcd$可以直接暴力判断一下，注意$x$或$y$可以为$0$（一开始起点为$1$就被hack了……），然后有解的话就说明把序列分成$x+y$段，前$x$段$a$个一组，后$y$段$b$个一组，那么组内的数字如何放置才能形成这样的循环呢？YY发现只要把这个区间循环右移一个位置就行了。还要注意随时更新起点，不然$O(n^2)$就超时了（太可惜了）</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> vis[N], arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;a, &amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> kk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k1 = <span class="number">0</span>; a * k1 &lt;= n; ++k1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n - (a * k1)) % b == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                kk = k1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> K1 = kk, K2 = (n - (a * K1)) / b;</span><br><span class="line">            <span class="keyword">int</span> lastpos = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (K1--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = lastpos; i &lt;= n; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[i] = <span class="number">1</span>;</span><br><span class="line">                        arr[i] = i + a - <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> last = i + a - <span class="number">1</span>;</span><br><span class="line">                        lastpos = last;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + a - <span class="number">1</span>; j &gt; i; --j)</span><br><span class="line">                            arr[j] = --last, vis[j] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (K2--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = lastpos; i &lt;= n; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[i] = <span class="number">1</span>;</span><br><span class="line">                        arr[i] = i + b - <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> last = i + b - <span class="number">1</span>;</span><br><span class="line">                        lastpos = last;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + b - <span class="number">1</span>; j &gt; i; --j)</span><br><span class="line">                            arr[j] = --last, vis[j] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, arr[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Tree"><a href="#D-Tree" class="headerlink" title="D.Tree"></a><a href="http://codeforces.com/contest/932/problem/D" target="_blank" rel="noopener">D.Tree</a></h1><p>题意就是给你一颗初始根为$1$的树和两种操作，一个是加边，一个是询问从点$R$开始向根走最长的点权和不超过$x$且路径点权为不降序列的最大长度。</p><p>比赛的时候完全没想法，赛后看别人代码发现是倍增，谁叫我学的是$RMQ$和$Tarjan$求的$LCA$，当时由于这个时间复杂度不如后两者就没学，实际上$RMQ$用的就是倍增的思想从$2^{j-1}$推到$2^j$次的信息，这里也是。</p><p>仔细分析可以发现加边的时候并不会影响已经存在的点，只要把加上去的这个点到根的这条链上的信息计算出来就行了。因此用$fa[i][j]$表示从点$i$开始第$2^j$个权值<strong>大于等于</strong>它的祖先，$S[i][j]$表示从点$i$跳到$fa[i][j]$的路径上的权值和，当新增点权值小于它父亲的时候可以直接令$fa[indx][0]=R$，$S[indx][0]=W[R]$；否则用倍增的思想从大到小找到最靠近$indx$且权值大于等于它的点$y$，令$fa[indx][0]=y$，$S[indx][0]=W[y]$。对于那些不存在的点，点权均设为$+\infty$；然后询问的时候跟加边一样，倒着贪心地向上跳就行了。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N][<span class="number">18</span>];</span><br><span class="line">LL S[N][<span class="number">18</span>], W[N];</span><br><span class="line"><span class="keyword">int</span> indx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    W[++indx] = w;</span><br><span class="line">    <span class="keyword">if</span> (W[R] &gt;= w)</span><br><span class="line">        fa[indx][<span class="number">0</span>] = R, S[indx][<span class="number">0</span>] = W[R];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r = R;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (W[fa[r][i]] &lt; w)</span><br><span class="line">                r = fa[r][i];</span><br><span class="line">        fa[indx][<span class="number">0</span>] = fa[r][<span class="number">0</span>];</span><br><span class="line">        S[indx][<span class="number">0</span>] = W[fa[indx][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">17</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[indx][i] = fa[fa[indx][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (fa[indx][i] == <span class="number">0</span>)</span><br><span class="line">            S[indx][i] = LINF;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            S[indx][i] = S[indx][i - <span class="number">1</span>] + S[fa[indx][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> R, LL X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (X &lt; W[R])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL res = X - W[R];</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[R][i] &lt;= res)</span><br><span class="line">        &#123;</span><br><span class="line">            res -= S[R][i];</span><br><span class="line">            sz += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            R = fa[R][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> T, R, ops;</span><br><span class="line">    <span class="keyword">register</span> LL X;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    CLR(S, INF);</span><br><span class="line">    CLR(W, INF);</span><br><span class="line">    W[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%I64d"</span>, &amp;ops, &amp;R, &amp;X);</span><br><span class="line">        R ^= last;</span><br><span class="line">        X ^= last;</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">            add(R, X);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, last = query(R, X));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Team-Work"><a href="#E-Team-Work" class="headerlink" title="E.Team Work"></a><a href="http://codeforces.com/contest/932/problem/E" target="_blank" rel="noopener">E.Team Work</a></h1><p>题意就是给你$n$和$k$，求$\sum_{r=1}^n \times C_n^r \times r^k$，相信这个还是很容易看出来的，但是这个怎么求呢？</p><p>正解居然是多次求导+记忆化搜索，这脑洞题无敌2333。</p><p>首先这个等式由于$C<em>n^0 \times 0^k=0$，因此等式可以加上这一项使之变得完整：$\sum</em>{r=1}^n \times C<em>n^r \times r^k=\sum</em>{r=0}^n \times C_n^r \times r^k$</p><p>由二项式定理得到$(1+x)^n=\sum<em>{r=0}^n \times C_n^r \times x^r$，这玩意儿跟上面个式子有有一点像，然后对两边求导，得到$n  \times (1+x)^{n-1}=\sum</em>{r=0}^n \times C<em>n^r \times r \times x^{r-1}$，两边同乘以，得到$n \times x^1 \times (1+x)^{n-1}=\sum</em>{r=0}^n\times C_n^r\times r\times x^r$</p><p>，这样就弄下来一个$r$，题目要我们弄下来$k$个$r$，那么我们要对这个式子做$k$次求导，左右两边乘以$k$次的$x$，但是这里又会发现$x$是不能随意取的，巧合的是当$x=1$的时候刚好左边乘的$k$个$x$都是$1$可以直接去掉，右边的$x^r$这项也可以直接去掉。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL dp[N][N];</span><br><span class="line">LL n, k;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = r * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> res, <span class="keyword">int</span> b, <span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[res][b])</span><br><span class="line">        <span class="keyword">return</span> dp[res][b];</span><br><span class="line">    <span class="keyword">int</span> c = tot - b;</span><br><span class="line">    <span class="keyword">if</span> (!res)</span><br><span class="line">        <span class="keyword">return</span> dp[res][b] = qpow(<span class="number">2L</span>L, (LL)c);</span><br><span class="line">    <span class="keyword">if</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        LL s = <span class="number">1L</span>L * b * dfs(res - <span class="number">1</span>, b, tot);</span><br><span class="line">        dp[res][b] = (dp[res][b] + s) % mod;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        LL s = <span class="number">1L</span>L * c * dfs(res - <span class="number">1</span>, b + <span class="number">1</span>, tot);</span><br><span class="line">        dp[res][b] = (dp[res][b] + s) % mod;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> dp[res][b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, dfs(k, <span class="number">0</span>, n) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> DP </tag>
            
            <tag> ACM </tag>
            
            <tag> 思维 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛12 D 图图（高斯消元）</title>
      <link href="/2018/02/13/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B12-D-%E5%9B%BE%E5%9B%BE/"/>
      <url>/2018/02/13/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B12-D-%E5%9B%BE%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>Special Judge, 64bit IO Format: %lld<br><a id="more"></a><br>题目描述</p><p>先考虑下面这个原始问题：  </p><blockquote><p>​    给定一个由 N 个点及 M 条有正整数权重的有向边组成的图。点的编号由 0 至 N-1。  </p><p>​    此图中可以有自环 (自己指向自己的边)，但是对于任何的有序点对 (a, b)，由 a 至 b 的边最多只会有一条。  </p><p>​    在这张图中，有一个旅人，他会按照下列的规则进行移动：如果他所在的点没有任何向外的边，那他就不会移动。如果有恰好一条的对外边，那他就会走到那条对外边所指向的点。如果有超过一条的对外边，那他将会随机选择一条进行移动，每条对外边被选中的概率正比于它的权重。  </p><p>   我们不知道这个旅人现在在哪里，但是我们知道这个旅人现在在这张图中每个点的概率，请问，这个旅人走一步之后，他在这张图中每个点的概率各是多少呢？  </p></blockquote><p>蜥蜴觉得这题超级简单，于是很快地写完了一个正确的解答，并且输入原题的样例测试，但是没想到，蜥蜴的程式的输出竟然跟输入一样！也就是说，这个旅人给定的概率分布，跟他走一步之后的概率分布竟然完全一致！蜥蜴觉得这样的测试数据真的太酷了，他也想要产生这样的测试数据，于是，他决定把这个问题交给各位参赛者：对于给定的一张图，请找出一组原题的测试数据，使得原题的答案跟测试数据一致！  </p><p>输入描述:</p><p>输入的第一行有两个正整数N, M，分别代表原题中的图的点数及边数。<br>接下来的M行每行有三个整数a, b, w，分别代表一条a至b的有向边，其权重为w。</p><p>输出描述:</p><p>如果没有这种测试数据存在，请在一行中输出<code>Impossible</code>。否则，请输出N行，第i行中有一个浮点数，代表旅人一开始在点i - 1的概率。如果有超过一种可能的答案，输出任意一种皆可。此题的评审方式如下：如果答案为<code>Impossible</code>，则必须输出<code>Impossible</code>才正确。而在有可能答案的测试数据，则不能输出<code>Impossible</code>。浮点数输出的部分，读入后的总和必须和1之间的误差(相对或绝对)不超过10-9，否则评判为错误。按照蜥蜴原题的代码执行，求得旅人下一步的概率分布，如果对于每个点，下一步的概率跟读入的概率误差(相对或绝对)不超过10-9，则评判为正确，否则为错误。</p><p>示例1</p><p>输入</p><p>3 3<br>0 1 1<br>1 2 1<br>2 0 1</p><p>输出</p><p>0.33333333333333331483<br>0.33333333333333337034<br>0.33333333333333331483</p><p>示例2</p><p>输入</p><p>2 4<br>0 1 4<br>0 0 6<br>1 0 7<br>1 1 3</p><p>输出</p><p>0.63636363636363635354<br>0.36363636363636364646</p><p>备注:</p><p>1≤N≤100<br>0≤M≤10000<br>0≤a,b&lt;N<br>1≤w≤10</p><p>任何的有序点对 (a, b)，由 a 至 b 的边最多只会有一条</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/68/D" target="_blank" rel="noopener">D.图图</a></p><p>题意就是给你一个$n$个点图中点与点之间的权重矩阵，然后再告诉你在每一个点的概率和它走一步即转移一次的概率是相同的，燃鹅比赛的时候没想出来。</p><p>其实这题跟挑战程序设计竞赛那本书上的求期望的题是差不多的，假设在一个点的概率为$P_i$，然后题目中说从$u \to v$转移的概率是</p><script type="math/tex; mode=display">P_{u \to v} ={w_{u \to v} \over {\sum_1^n {w_{u \to i}}}}</script><p>然后考虑每一个点$i$都具有形如这样的等式：</p><script type="math/tex; mode=display">P_i = \sum_1^n{P_j * P_{j \to i}}</script><p>如果一个点$j$没有连出去的边，那么就加一条它自己连向自己的边，权值随便取一个方便的数就行，反正除一下概率还是$1$。<br>当然还要加上最重要的一条:$\sum_1^n P_i=1$</p><p>那么将这个方程组变成一个<br>$(n+1)*(n+1)$的增广矩阵，高斯消元一下就可以了，这题感觉有点卡精度，交了20多发用了别人的高斯消元模板再把保留的小数从$20$位改到$14$位才过，贼奇怪……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sw[N];</span><br><span class="line"><span class="keyword">double</span> A[N][N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; &gt;in[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gaussian</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> ce, i, j, te;</span><br><span class="line">    <span class="keyword">for</span> (ce = <span class="number">1</span>; ce &lt;= n + <span class="number">1</span>; ++ce)</span><br><span class="line">    &#123;</span><br><span class="line">        te = ce;</span><br><span class="line">        <span class="keyword">for</span> (i = ce + <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[i][ce]) &gt; <span class="built_in">fabs</span>(A[te][ce]))</span><br><span class="line">                te = i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[te][ce]) &lt; eps)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (te != ce)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j)</span><br><span class="line">                swap(A[ce][j], A[te][j]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != ce)</span><br><span class="line">                <span class="keyword">for</span> (j = n + <span class="number">1</span>; j &gt;= ce; --j)</span><br><span class="line">                    A[i][j] -= A[i][ce] * A[ce][j] / A[ce][ce];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[i][i]) &lt; eps &amp;&amp; <span class="built_in">fabs</span>(A[i][n + <span class="number">1</span>]) &gt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !(A[n + <span class="number">1</span>][n + <span class="number">1</span>] &gt; eps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, i, a, b;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">double</span> w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lf"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">        ++a, ++b;</span><br><span class="line">        in[b].push_back(&#123;a, w&#125;);</span><br><span class="line">        sw[a] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (sw[i] == <span class="number">0</span>)</span><br><span class="line">            sw[i] = <span class="number">1.0</span>, in[i].push_back(&#123;i, <span class="number">1.0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i][i] = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : in[i])</span><br><span class="line">        &#123;</span><br><span class="line">            A[i][e.first] -= e.second / sw[e.first];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">        A[n + <span class="number">1</span>][i] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Gaussian(n))</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[i][i]) &lt; eps)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%.14f\n"</span>, <span class="number">0.0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%.14f\n"</span>, A[i][n + <span class="number">1</span>] / A[i][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 高斯消元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> ACM </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Educational #37 A B C E F G</title>
      <link href="/2018/02/03/CF-Educational-37-A-B-C-E-F-G/"/>
      <url>/2018/02/03/CF-Educational-37-A-B-C-E-F-G/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Water-The-Garden"><a href="#A-Water-The-Garden" class="headerlink" title="A.Water The Garden"></a><a href="http://codeforces.com/contest/920/problem/A" target="_blank" rel="noopener">A.Water The Garden</a></h1><p>题意就是给你$n$个待浇水的位置和$k$个水龙头，按照浇水规则求把所有位置都浇到水的最短时间。<br><a id="more"></a><br>暴力从小到大模拟一遍找到最小可行时间输出即可。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            CLR(vis, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = arr[j]; l &gt;= arr[j] - (i - <span class="number">1</span>) &amp;&amp; l &gt;= <span class="number">1</span>; --l)</span><br><span class="line">                    vis[l] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = arr[j]; l &lt;= arr[j] + (i - <span class="number">1</span>) &amp;&amp; l &lt;= n; ++l)</span><br><span class="line">                    vis[l] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (accumulate(vis + <span class="number">1</span>, vis + <span class="number">1</span> + n, <span class="number">0</span>) == n)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Tea-Queue"><a href="#B-Tea-Queue" class="headerlink" title="B.Tea Queue"></a><a href="http://codeforces.com/contest/920/problem/B" target="_blank" rel="noopener">B.Tea Queue</a></h1><p>题意就是给你$n$个人和他的开始排队时间$l_i$，离开队伍时间$r_i$，按照开始排队时间进行入队，顺序小的排在前面，如果领到茶的时间大于$r_i$，那么这个人会离开队伍，求最后每个人领到茶的时间，无法领到记为$0$<br>优先队列维护排队顺序，然后按时间模拟一下，该领茶的领茶，该离开的离开。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> l[N], r[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &gt; rhs.l || (l == rhs.l &amp;&amp; id &gt; rhs.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(ans, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l[i], &amp;r[i]);</span><br><span class="line">            arr[i].l = l[i];</span><br><span class="line">            arr[i].r = r[i];</span><br><span class="line">            arr[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, [](info a, info b) &#123;<span class="keyword">return</span> a.l &lt; b.l || (a.l == b.l &amp;&amp; a.id &lt; b.id);&#125;);</span><br><span class="line">        <span class="keyword">int</span> tm = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = <span class="number">1</span>;</span><br><span class="line">        priority_queue&lt;info&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (tm = <span class="number">1</span>; ; ++tm)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (tm == arr[sz].l &amp;&amp; sz &lt;= n)</span><br><span class="line">                Q.push(arr[sz++]);</span><br><span class="line">            <span class="keyword">if</span> (Q.empty())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            info one = Q.top();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">if</span> (one.r &gt;= tm)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[one.id] = tm;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[one.id] = <span class="number">0</span>;</span><br><span class="line">                --tm;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Q.empty() &amp;&amp; sz &gt; n )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Swap-Adjacent-Elements"><a href="#C-Swap-Adjacent-Elements" class="headerlink" title="C.Swap Adjacent Elements"></a><a href="http://codeforces.com/contest/920/problem/C" target="_blank" rel="noopener">C.Swap Adjacent Elements</a></h1><p>题意就是给你$n$个数，和一串字符串，表示一些位置是否可以和它前面一个位置交换数字，交换顺序和次数不限，求最后整个数列能否排成不降数列。</p><p>由于交换顺序和次数不限，因此连续的$1$对应的区间内一定是可以被排序的，因此可以把字符串中连续的$’1’$找到，然后把数列中对应的连续区间$sort$一下，这里要注意$s[i]==1$表示第$i$个位置可以和第$i+1$个位置交换，因此实际排序连续区间为$[l,r+1]$</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">-1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'1'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">-1</span>)</span><br><span class="line">                l = i;</span><br><span class="line">            ++r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            sort(arr + l, arr + min(l + r + <span class="number">1</span>, n + <span class="number">1</span>));</span><br><span class="line">            l = <span class="number">-1</span>;</span><br><span class="line">            r = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(is_sorted(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Connected-Components"><a href="#E-Connected-Components" class="headerlink" title="E.Connected Components?"></a><a href="http://codeforces.com/contest/920/problem/E" target="_blank" rel="noopener">E.Connected Components?</a></h1><p>题意就是给你$n$个点的完全图和$m$条边，表示有$m$对点对之间的边被删掉了，求最后图内连通块的个数和每个连通块的大小。</p><p>实际上这题就是暴力$BFS$所有连通块大小，看似复杂度很高，实际上如果只考虑点的话，$BFS$只把那些没访问过的点搜索一次，这样一来复杂度大大下降，用$map$记录一下删掉的边即可，燃鹅这里有个问题，每一次$for$邻接点的不能是$[1,n]$，这样就算一些点不会入队，但是循环次数仍然很多，<del>很可惜没想到用set T到比赛结束……</del>，实际应该用$set$优化，$set$记录图中未访问过的点，每一次把访问过的点从$set$中$erase$掉就可以用了，当然在遍历的时候$erase$可能会使迭代器失效报错，应该把要$erase$的点储存一下，遍历完后再删掉即可。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> sz[N],  vis[N], vs;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;no[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="keyword">int</span> toerase[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    Q.push(s);</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    st.erase(s);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : st)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!no[u].count(v))</span><br><span class="line">            &#123;</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">                ++ret;</span><br><span class="line">                toerase[top++] = v;</span><br><span class="line">                <span class="keyword">if</span> (vs + ret &gt;= n)</span><br><span class="line">                    <span class="keyword">return</span> ret;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top)</span><br><span class="line">            st.erase(toerase[--top]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> m, i, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        no[a][b] = no[b][a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        st.insert(i);</span><br><span class="line">    <span class="keyword">int</span> Sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            sz[Sz++] = bfs(i);</span><br><span class="line">    sort(sz, sz + Sz);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Sz);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Sz; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, sz[i], <span class="string">" \n"</span>[i == Sz - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-SUM-and-REPLACE"><a href="#F-SUM-and-REPLACE" class="headerlink" title="F.SUM and REPLACE"></a><a href="http://codeforces.com/contest/920/problem/F" target="_blank" rel="noopener">F.SUM and REPLACE</a></h1><p>题意就是给你$n$的数的序列，记$D(x)$表示$x$的因子数，给定两种操作：<br> 1.把$[l,r]$的每一个数$x$变成$D(x)$<br> 2.求和$[l,r]$</p><p>先打个$D(x)$的表，一个数的因子数个数为它分解后所有的素因数上的指数$+1$的连乘。<br>然后就是个线段树剪枝优化问题，主要在于求和和更新的时候如果一个区间内的数完全相同，那么可以直接得到答案而不需要递归下去。</p><hr><p>太菜了，$openinghack$之后被$1\;2\;1\;2….$这样的数据卡超时了，那么上再加一个区间是否需要被更新的标记$eq$就行了，如果这个整个区间都小于$2$显然就没有再被更新的必要了。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> phi[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">            ++phi[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r, eq;</span><br><span class="line">    LL v, one;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">len</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].v = T[LC(k)].v + T[RC(k)].v;</span><br><span class="line">    T[k].one = (T[LC(k)].one == T[RC(k)].one ? T[LC(k)].one : <span class="number">0</span>);</span><br><span class="line">    T[k].eq = T[LC(k)].eq &amp; T[RC(k)].eq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].one &amp;&amp; !T[k].eq)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].one = T[RC(k)].one = T[k].one;</span><br><span class="line">        T[LC(k)].v = (LL)T[LC(k)].len() * T[k].one;</span><br><span class="line">        T[RC(k)].v = (LL)T[RC(k)].len() * T[k].one;</span><br><span class="line">        T[k].one = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].eq)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r &amp;&amp; T[k].one)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].one = phi[T[k].one];</span><br><span class="line">        T[k].v = (LL)T[k].len() * T[k].one;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; T[k].mid)</span><br><span class="line">            update(RC(k), l, r);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> T[k].v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            ret += query(LC(k), l, r);</span><br><span class="line">        <span class="keyword">if</span> ( r &gt; T[k].mid)</span><br><span class="line">            ret += query(RC(k), l, r);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        T[k].one = T[k].v = arr[l], T[k].eq = (T[k].v &lt;= <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        build(LC(k), l, T[k].mid);</span><br><span class="line">        build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, i, l, r, ops;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">    pre(*max_element(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n));</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ops, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">            update(<span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, query(<span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-List-Of-Integers"><a href="#G-List-Of-Integers" class="headerlink" title="G.List Of Integers"></a><a href="http://codeforces.com/contest/920/problem/G" target="_blank" rel="noopener">G.List Of Integers</a></h1><p>题意就是给你一堆询问${x,p,k}$，求大于$x$和$p$互质的数中第$k$小的数。</p><p>这里涉及到求$[1,n]$中与$p$互质的数的个数问题，需要用到容斥原理，如果$[1,p]$的话就可以直接欧拉函数了，但这个范围是会变的，因此我们应该算$[1,n]$中与$p$不互质的数的个数，因此求法如下：</p><ol><li>将$p$质数分解（10+的阶乘就超过1e6了，最多只有十几个质数）</li><li>状压枚举用了哪些质数。</li><li>假设用到的质数的个数为$t$，乘积为$w$。</li><li>容斥原理可得当$t$为奇数的时候，答案应减去$n/w$，否则加上$n/w$。</li></ol><p>好吧其实上面只是算出了$[1,n]$中不互质的个数,用$n$再减一下就是互质的个数了，然后得到$[1,n]$的计数，$[l,r]$的答案差分一下就是$[1,r] - [1,l-1]$。<br>由于题目固定左端点为$x+1$，那么二分一下右端点即可。</p><h2 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> P[N], sz;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getfac</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            P[sz++] = i;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        P[sz++] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> R = <span class="number">1</span> &lt;&lt; sz;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; R; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">1</span>, one = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">                t *= P[j], ++one;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (one &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += r / t;</span><br><span class="line">            ans -= (l - <span class="number">1</span>) / t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans -= r / t;</span><br><span class="line">            ans += (l - <span class="number">1</span>) / t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r - l + <span class="number">1</span> - ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> T, x, p, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;p, &amp;k);</span><br><span class="line">        <span class="keyword">int</span> L = x + <span class="number">1</span>, R = <span class="number">1e8</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        getfac(p);</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = MID(L, R);</span><br><span class="line">            <span class="keyword">if</span> (calc(x + <span class="number">1</span>, mid) &gt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                R = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> ACM </tag>
            
            <tag> 优化 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 容斥原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201712-4 行车路线（二维SFPA）</title>
      <link href="/2018/02/03/CCF-CSP-201712-4-%E8%A1%8C%E8%BD%A6%E8%B7%AF%E7%BA%BF/"/>
      <url>/2018/02/03/CCF-CSP-201712-4-%E8%A1%8C%E8%BD%A6%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>问题描述<br>　　小明和小芳出去乡村玩，小明负责开车，小芳来导航。<br><a id="more"></a><br>　　小芳将可能的道路分为大道和小道。大道比较好走，每走1公里小明会增加1的疲劳度。小道不好走，如果连续走小道，小明的疲劳值会快速增加，连续走s公里小明会增加s2的疲劳度。<br>　　例如：有5个路口，1号路口到2号路口为小道，2号路口到3号路口为小道，3号路口到4号路口为大道，4号路口到5号路口为小道，相邻路口之间的距离都是2公里。如果小明从1号路口到5号路口，则总疲劳值为(2+2)2+2+22=16+2+4=22。<br>　　现在小芳拿到了地图，请帮助她规划一个开车的路线，使得按这个路线开车小明的疲劳度最小。<br>输入格式<br>　　输入的第一行包含两个整数n, m，分别表示路口的数量和道路的数量。路口由1至n编号，小明需要开车从1号路口到n号路口。<br>　　接下来m行描述道路，每行包含四个整数t, a, b, c，表示一条类型为t，连接a与b两个路口，长度为c公里的双向道路。其中t为0表示大道，t为1表示小道。保证1号路口和n号路口是连通的。<br>输出格式<br>　　输出一个整数，表示最优路线下小明的疲劳度。<br>样例输入<br>6 7<br>1 1 2 3<br>1 2 3 2<br>0 1 3 30<br>0 3 4 20<br>0 4 5 30<br>1 3 5 6<br>1 5 6 1<br>样例输出<br>76<br>样例说明<br>　　从1走小道到2，再走小道到3，疲劳度为52=25；然后从3走大道经过4到达5，疲劳度为20+30=50；最后从5走小道到6，疲劳度为1。总共为76。<br>数据规模和约定<br>　　对于30%的评测用例，1 ≤ n ≤ 8，1 ≤ m ≤ 10；<br>　　对于另外20%的评测用例，不存在小道；<br>　　对于另外20%的评测用例，所有的小道不相交；<br>　　对于所有评测用例，1 ≤ n ≤ 500，1 ≤ m ≤ 10^5，1 ≤ a, b ≤ n，t是0或1，c ≤ 10^5。保证答案不超过10^6。</p><p>题目链接：<a href="http://118.190.20.162/view.page?gpid=T65" target="_blank" rel="noopener">CCF CSP 201712-4 行车路线</a></p><p>考试的时候$C$题花了太多时间，加上这题一开始想的方法不太好转移，$debug$到考试结束都没过样例。<br>然后回去重新写了一遍就过了，很可惜$C$题也没满分，$D$题还$0$分，还不如人家暴力还有十几二十分呢。</p><p>原来的代码只能过官方数据，但是实际上是存在错误的，修改之处参考了博客   <strong><a href="http://blog.csdn.net/wl16wzl" target="_blank" rel="noopener">_zlWang</a></strong> 。</p><p>这题很明显的多维最短路问题，用$dp[i][k]$表示当前走到了点$i$，以$k$的方式走过来的，$k=0$时表示从大路走过来，$k=1$时表示从小路走过来，但是这里有个问题，<strong>要保证小路-小路的边是当前最短的边，因此先把小路边单独拿出来做一遍$floyed$预处理</strong>，然后再把小路的各个点对间的最短距离当作边加入图中，再跑$SPFA$<br>疲劳度在小路-小路转移的时候为连续走小路的距离平方，因此入队节点最好记录三个信息：<br>${当前点u,转移方式f}$<br>然后就用$SPFA$进行转移，显然转移方程有四种：</p><script type="math/tex; mode=display">\begin{cases}dp[v][0] = min(dp[v][0],dp[u][0] + E[i].w)//大路-大路转移\\dp[v][0] = min(dp[v][0],dp[u][1] + E[i].w)//小路-大路转移\\dp[v][1] = min(dp[v][1],dp[u][0] + E[i].w * E[i].w)//大路-小路转移\\\end{cases}</script><p>最后$min(dp[n][0],dp[n][1])$就是答案。</p><hr><p>这里有几组数据<br>5 6<br>0 1 2 30<br>0 2 4 30<br>1 1 4 4<br>0 1 3 17<br>1 3 4 1<br>1 4 5 10<br>答案：138</p><p>5 5<br>0 1 2 30<br>0 1 3 10<br>1 2 4 9<br>1 3 4 10<br>1 4 5 1<br>答案：130</p><p>4 5<br>1 1 2 2<br>0 1 2 10<br>0 1 3 5<br>0 3 2 4<br>1 2 4 3<br>答案：18</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, f;</span><br><span class="line">    LL w;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, LL _w, <span class="keyword">int</span> _f): to(_to), nxt(_nxt), w(_w), f(_f) &#123;&#125;</span><br><span class="line">&#125; E[M &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> vis[N][<span class="number">2</span>];</span><br><span class="line">LL d[N][<span class="number">2</span>], G[N][N], inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> w, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], w, f);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> LL &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pii&gt;Q;</span><br><span class="line">    Q.push(pii(s, <span class="number">0</span>));</span><br><span class="line">    Q.push(pii(s, <span class="number">1</span>));</span><br><span class="line">    vis[s][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    vis[s][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    d[s][<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">    d[s][<span class="number">1</span>] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        pii t = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        vis[t.fi][t.se] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[t.fi]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (E[i].f == <span class="number">0</span>) <span class="comment">//走大路</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.se == <span class="number">0</span>) <span class="comment">//从大路来</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[v][<span class="number">0</span>] &gt; d[t.fi][<span class="number">0</span>] + E[i].w)</span><br><span class="line">                    &#123;</span><br><span class="line">                        d[v][<span class="number">0</span>] = d[t.fi][<span class="number">0</span>] + E[i].w;</span><br><span class="line">                        <span class="keyword">if</span> (!vis[v][<span class="number">0</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            vis[v][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                            Q.push(pii(v, <span class="number">0</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (t.se == <span class="number">1</span>) <span class="comment">//从小路来</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[v][<span class="number">0</span>] &gt; d[t.fi][<span class="number">1</span>] + E[i].w)</span><br><span class="line">                    &#123;</span><br><span class="line">                        d[v][<span class="number">0</span>] = d[t.fi][<span class="number">1</span>] + E[i].w;</span><br><span class="line">                        <span class="keyword">if</span> (!vis[v][<span class="number">0</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            vis[v][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                            Q.push(pii(v, <span class="number">0</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//走小路</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.se == <span class="number">0</span>)<span class="comment">//从大路来</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[v][<span class="number">1</span>] &gt; d[t.fi][<span class="number">0</span>] + sqr(E[i].w))</span><br><span class="line">                    &#123;</span><br><span class="line">                        d[v][<span class="number">1</span>] = d[t.fi][<span class="number">0</span>] + sqr(E[i].w);</span><br><span class="line">                        <span class="keyword">if</span> (!vis[v][<span class="number">1</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            vis[v][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                            Q.push(pii(v, <span class="number">1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, a, b, f, i, j, k;</span><br><span class="line">    <span class="keyword">register</span> LL w;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            d[i][<span class="number">0</span>] = d[i][<span class="number">1</span>] = inf;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">                G[i][j] = inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%lld"</span>, &amp;f, &amp;a, &amp;b, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add(a, b, w, f);</span><br><span class="line">                add(b, a, w, f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                G[a][b] = min(G[a][b], w);</span><br><span class="line">                G[b][a] = min(G[b][a], w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == i || k == j)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (G[i][j] &gt; G[i][k] + G[k][j])</span><br><span class="line">                        G[i][j] = G[j][i] =  G[i][k] + G[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (G[i][j] == inf)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                add(i, j, G[i][j], <span class="number">1</span>);</span><br><span class="line">                add(j, i, G[i][j], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min(d[n][<span class="number">0</span>], d[n][<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 图论 </category>
          
          <category> 最短路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #460 Div.2 A B C D</title>
      <link href="/2018/02/01/CF-460-Div-2-A-B-C-D/"/>
      <url>/2018/02/01/CF-460-Div-2-A-B-C-D/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Supermarket"><a href="#A-Supermarket" class="headerlink" title="A.Supermarket"></a><a href="http://codeforces.com/contest/919/problem/A" target="_blank" rel="noopener">A.Supermarket</a></h1><p>题意告诉你买$a_i$元可以获得$b_i$重量的物品，你要买$m$重量，由于物品可以拆分，选最高性价比的物品就行了。<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        ans = min(a * <span class="number">1.0</span> / b * m * <span class="number">1.0</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Perfect-Number"><a href="#B-Perfect-Number" class="headerlink" title="B.Perfect Number"></a><a href="http://codeforces.com/contest/919/problem/B" target="_blank" rel="noopener">B.Perfect Number</a></h1><p>题意就是叫你找出第$k$小的数位和为$10$的数字(<del>把1W范围看成10W，打表发现打不动，心态爆炸，写不来写不来</del>)，for一遍暴力就行就行。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sg</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        r += (n % <span class="number">10</span>);</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &lt;= <span class="number">10800100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">int</span> s = sg(i);</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">10</span>)</span><br><span class="line">            --k;</span><br><span class="line">        <span class="keyword">if</span> (!k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Seat-Arrangements"><a href="#C-Seat-Arrangements" class="headerlink" title="C.Seat Arrangements"></a><a href="http://codeforces.com/contest/919/problem/C" target="_blank" rel="noopener">C.Seat Arrangements</a></h1><p>题意就是给你一幅$n*m$的地图，找出左右或者上下连续的$k$个位置，输出这种位置有几个。<br>k=1的时候横竖是一样的，答案要除以2，<del>B题没写这题又被hack，心态爆炸</del></p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N][N];</span><br><span class="line"><span class="keyword">int</span> pre[N][N];</span><br><span class="line"><span class="keyword">int</span> up[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            pre[i][j] = pre[i][j - <span class="number">1</span>] + (s[i][j] == <span class="string">'.'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m - k + <span class="number">1</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[i][j + k - <span class="number">1</span>] - pre[i][j - <span class="number">1</span>] == k)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            up[i][j] = up[i - <span class="number">1</span>][j] + (s[i][j] == <span class="string">'.'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (up[i + k - <span class="number">1</span>][j] - up[i - <span class="number">1</span>][j] == k)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Substring"><a href="#D-Substring" class="headerlink" title="D.Substring"></a><a href="http://codeforces.com/contest/919/problem/D" target="_blank" rel="noopener">D.Substring</a></h1><p>题意就是给你一幅点带权有向图，然后求一条某一个字母出现次数最多的路径，输出这个最多出现次数，若可以有无穷多个则输出$-1$<br>显然存在环肯定是$-1$，先$tarjan$或者$dfs$一发判环，然后这题还有个坑点可能存在自环，因此如果出现一条边起点和终点一样，也算有环。<br>然后留下的图是一个$DAG$，正解应该是做一遍$DAG$上的$DP$，燃鹅$DP$菜到抠脚的我就喜欢用二维$SPFA$作死，T了无数发。不过可以说一下$SPFA$建图，感觉挺好玩的。<br>最复杂的情况原图由多个$DAG$构成，且子图可能存在多起点，多终点的情况，那么构造源点$S$（记为$0$），终点$T$（记为$n+1$），$S$连向所有入度为$0$的点，所有出度为$0$的点连向$T$，跑一遍$S$到$T$的二维最长路，$Max{dis[T][i]},0 \le i \le 25$就是答案。</p><p>正解的$DP$感觉挺巧妙的，先处理子结点，再转移到自己，复杂度是$O(N)$</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;</span><br><span class="line">&#125; E[N];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> ch[N], cycle, d[N][<span class="number">26</span>], vis[N], Ans;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> tarjan &#123;</span><br><span class="line">    <span class="keyword">int</span> dfn[N], low[N], st[N], sc, top, sccnt, scnum[N];</span><br><span class="line">    <span class="keyword">bool</span> ins[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tar</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cycle)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        dfn[u] = low[u] = ++sc;</span><br><span class="line">        st[top++] = u;</span><br><span class="line">        ins[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">            &#123;</span><br><span class="line">                tar(v);</span><br><span class="line">                low[u] = min(low[u], low[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ins[v])</span><br><span class="line">                low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (low[u] == dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            ++sccnt;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                v = st[--top];</span><br><span class="line">                ins[v] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (++scnum[sccnt] &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cycle = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (u != v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    d[u][ch[u]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            dfs(v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            d[u][k] = max(d[u][k], d[v][k] + (k == ch[u]));</span><br><span class="line">            Ans = max(Ans, d[u][k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, i, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ch[i] = s[i] - <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (cycle)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        add(a, b);</span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            cycle = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cycle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n &amp;&amp; !cycle; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tarjan::dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan::tar(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cycle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">26</span>; ++a)</span><br><span class="line">            Ans = max(Ans, d[i][a]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> ACM </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #459 Div.2 A B C D</title>
      <link href="/2018/01/30/CF-459-Div-2-A-B-C-D/"/>
      <url>/2018/01/30/CF-459-Div-2-A-B-C-D/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Eleven"><a href="#A-Eleven" class="headerlink" title="A.Eleven"></a><a href="http://codeforces.com/contest/918/problem/A" target="_blank" rel="noopener">A.Eleven</a></h1><p>题意就是输出长度为$n$的仅含$O$或$o$的字符串，打表标记一下斐波那契的项再输出就好<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1200</span>;</span><br><span class="line"><span class="keyword">int</span> F[N] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        F[i] = F[i - <span class="number">1</span>] + F[i - <span class="number">2</span>];</span><br><span class="line">        vis[F[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (F[i] &gt; <span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (vis[i])</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'O'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'o'</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Radio-Station"><a href="#B-Radio-Station" class="headerlink" title="B.Radio Station"></a><a href="http://codeforces.com/contest/918/problem/B" target="_blank" rel="noopener">B.Radio Station</a></h1><p>题意就是给你$n$个主机名字和其对应$ip$地址，再输入$m$个包含给定了$ip$地址的操作，输出同样的操作和其对应的主机名。<br>用$map$将$ip$地址作为$key$搞搞就行</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a != rhs.a)</span><br><span class="line">            <span class="keyword">return</span> a &lt; rhs.a;</span><br><span class="line">        <span class="keyword">if</span> (b != rhs.b)</span><br><span class="line">            <span class="keyword">return</span> b &lt; rhs.b;</span><br><span class="line">        <span class="keyword">if</span> (c != rhs.c)</span><br><span class="line">            <span class="keyword">return</span> c &lt; rhs.c;</span><br><span class="line">        <span class="keyword">return</span> d &lt; rhs.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;info, <span class="built_in">string</span>&gt;st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d.%d.%d.%d"</span>, s, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        st[ &#123;a, b, c, d&#125;] = <span class="built_in">string</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d.%d.%d.%d;"</span>, s, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %d.%d.%d.%d; #%s\n"</span>, s, a, b, c, d, st[ &#123;a, b, c, d&#125;].c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-The-Monster"><a href="#C-The-Monster" class="headerlink" title="C.The Monster"></a><a href="http://codeforces.com/contest/918/problem/C" target="_blank" rel="noopener">C.The Monster</a></h1><p>题意就是给你一串含有$?$的括号序列，问号可以用$($或者$)$代替，求所有代替之后可以形成合法括号序列的子串个数。<br>如果把$($记作$1$，把$)$记作$-1$，做一次括号序列的前缀和，对于一个合法的括号序列其前缀和的最后一位必须为$0$且过程中不能出现负数<br>但是这里有问号怎么处理呢，可以把问号看作是可以随时使用的一个东西，如果当前的前缀和非负且前缀和小于问号数量，说明$($比较多，应该用问号抵消一部分，如果最后剩余未用问号数量和多余的左括号一样多的话，那两者可以互相抵消，可以构成一个合法的括号序列。</p><p>比赛的时候WA了好几发没搞出来，看了别人代码发现是自己想复杂了……</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pres = <span class="number">0</span>, wen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">')'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="string">'('</span>)</span><br><span class="line">                    ++pres;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">')'</span>)</span><br><span class="line">                    --pres;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ++wen;</span><br><span class="line">                <span class="keyword">if</span> (pres &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (wen &gt; pres)</span><br><span class="line">                &#123;</span><br><span class="line">                    --wen;</span><br><span class="line">                    ++pres;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (wen == pres)</span><br><span class="line">                    ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-MADMAX"><a href="#D-MADMAX" class="headerlink" title="D.MADMAX"></a><a href="http://codeforces.com/contest/918/problem/D" target="_blank" rel="noopener">D.MADMAX</a></h1><p>题意就是给你一个有向无环图($DAG$)，规则只能走边权不降的边，最后不能走的人输，Max先手，Lucas后手，求当Max在$i$点，Lucas在$j$点，两人均取最优策略时谁胜谁负。输出所有情况下的胜负对应字母（$A$代表Max赢，$B$代表Lucas赢）</p><p>以为是个贪心+模拟BFS题，实际上是个博弈$DP$，用$dp[i][j][v]$表示当前先手在点$i$，后手在点$j$，最后一次边权值为$v$，$i$是否能获胜。<br>那么转移方程应该是：</p><script type="math/tex; mode=display">dp[i][j][v] \;|=\;(dp[j][i'][v'] == 0)，i'是i走的下一个点,v'是i走的边权</script><p>方程意思应该是只要存在当$j$先手时无法取胜，那么$i$先手时就可以按照这个情况取胜，用记忆化搜索加一点剪枝就好。</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = N * N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _c): to(_to), nxt(_nxt), c(_c) &#123;&#125;</span><br><span class="line">&#125; E[M];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">130</span>][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], c);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">int</span> fi, <span class="keyword">int</span> se)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~dp[level][fi][se])</span><br><span class="line">        <span class="keyword">return</span> dp[level][fi][se];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[fi]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (E[i].c &gt;= level)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfs(E[i].c, se, v))<span class="comment">//出现另一方先手无法取胜的情况</span></span><br><span class="line">                <span class="keyword">return</span> dp[level][fi][se] = <span class="number">1</span>;<span class="comment">//当前方先手就有机会取胜</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[level][fi][se] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m, a, b, i, j;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        CLR(dp, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;a, &amp;b, c);</span><br><span class="line">            add(a, b, (<span class="keyword">int</span>)c[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dfs(<span class="number">0</span>, i, j))</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">'A'</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">'B'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> ACM </tag>
            
            <tag> 比赛 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛11 E 求最值（差分+分治求最近点对）</title>
      <link href="/2018/01/28/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B11-E-%E6%B1%82%E6%9C%80%E5%80%BC/"/>
      <url>/2018/01/28/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B11-E-%E6%B1%82%E6%9C%80%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/59/E" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/59/E</a><br>来源：牛客网</p><p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>给你一个长为n的序列a<br>定义f(i,j)=(i-j)2+g(i,j)2<br>g是这样的一个函数<br><img src="https://uploadfiles.nowcoder.net/images/20180125/301599_1516886357781_321532365639F31B3B9F8EA8BE0C6BE2" alt="pic"><br>求最小的f(i,j)的值，i!=j</p><p>输入描述:<br>第一行一个数n<br>之后一行n个数表示序列a<br>输出描述:<br>输出一行一个数表示答案<br>示例1<br>输入</p><p>4<br>1 0 0 -1<br>输出</p><p>1<br>备注:<br>对于100%的数据，2 &lt;= n &lt;= 100000 , |ai| &lt;= 10000</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/59/E" target="_blank" rel="noopener">E.求最值</a><br>观察式子可以发现第二项$\sum_{l+1}^{r}{a_i}$=$presum[r]-presum[l]$，那么这个式子实际上是求二维点集${(i, presum[i])}$中的最近点距离，然后就很模板地分治求一下就可以了，题目数据比较水，$O(N^2)$的算法稍微优化优化一下也可以过，筛点的时候忘记开平方$TLE$到结束（真菜……）<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line">&#125; p[N], temp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sqr</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> dis(p[l], p[r]);</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> min(&#123;dis(p[l], p[r - <span class="number">1</span>]), dis(p[l], p[r]), dis(p[l + <span class="number">1</span>], p[r])&#125;);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        LL d = min(solve(l, mid), solve(mid + <span class="number">1</span>, r));</span><br><span class="line">        <span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sqr(llabs(p[i].x - p[mid].x)) &lt;= d)</span><br><span class="line">                temp[sz++] = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(temp, temp + sz, cmpy);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sqr(temp[j].y - temp[i].y) &gt;= d)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                d = min(d, dis(temp[j], temp[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> arr[N], pre[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, ch, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((ch = getchar()) == <span class="string">'-'</span>)            <span class="comment">//判断正负</span></span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)          <span class="comment">//得到完整的数</span></span><br><span class="line">        res = ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> )</span><br><span class="line">        res = res * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> flag ? -res : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = Scan();</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">        p[i].x = i;</span><br><span class="line">        p[i].y = pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + n + <span class="number">1</span>, cmpx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(<span class="number">1</span>, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
            <tag> ACM </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛11 B 假的字符串（Trie+拓扑排序）</title>
      <link href="/2018/01/27/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B11-B-%E5%81%87%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/01/27/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B11-B-%E5%81%87%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>给定n个字符串，互不相等，你可以任意指定字符之间的大小关系（即重定义字典序），求有多少个串可能成为字典序最小的串，并输出它们</p><p>输入描述:<br>第一行一个数表示n<br>之后n行每行一个字符串表示给定的字符串<br>输出描述:<br>第一行输出一个数x表示可行的字符串个数<br>之后输出x行，每行输出一个可行的字符串<br>输出的顺序和输入的顺序一致<br>示例1<br>输入<br>6<br>mcfx<br>ak<br>ioi<br>wen<br>l<br>a<br>输出<br>5<br>mcfx<br>ioi<br>wen<br>l<br>a<br>备注:<br>对于100%的数据，<br>n &lt;= 30000 , 字符串总长&lt;= 300000<br>字符集为小写字符</p><p>题目连接：<a href="https://www.nowcoder.com/acm/contest/59/B" target="_blank" rel="noopener">B.假的字符串</a><br>比赛的时候没想到拓扑排序，只想到了用前缀排除掉部分不合法的串，但是对于abb,aba,bab,baa这四个串，明显简单的前缀还不够<br>看了别人的题解才懂拓扑排序的意义，<strong>假设</strong>当前字符串$S_i$可以成为最小字典序的串，那么它要符合两个条件</p><ol><li>没有其他串是它的前缀</li><li>在所有串构成的$Trie$树中$S_i$这条路径上的任意结点$u_i$的优先级要比其所有兄弟结点$v_i$的优先级高。</li></ol><p>第二个条件可以发现兄弟结点存在优先级关系，假设当前走到的结点对应字符是$cha$，它的某一个兄弟结点对应字符是$chb$，那么应该从$cha$向$chb$连一条有向边，最后拓扑排序一下看是否存在某种优先级关系使得$S_i$成为字典序最小的串。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ALL = (<span class="number">1</span> &lt;&lt; <span class="number">26</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] =  <span class="number">0</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[M];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"><span class="keyword">int</span> st[N], len[N], pos[N];</span><br><span class="line"><span class="keyword">int</span> E[<span class="number">30</span>][<span class="number">30</span>], deg[<span class="number">30</span>], A[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        deg[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; ++j)</span><br><span class="line">            E[i][j] = A[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (L[u].cnt)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != j &amp;&amp; L[u].nxt[j] &amp;&amp; !A[v][j])</span><br><span class="line">            &#123;</span><br><span class="line">                A[v][j] = <span class="number">1</span>;</span><br><span class="line">                E[v][++E[v][<span class="number">0</span>]] = j;</span><br><span class="line">                ++deg[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!deg[i])</span><br><span class="line">            Q.push(i), state |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= E[u][<span class="number">0</span>]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[u][i];</span><br><span class="line">            <span class="keyword">if</span> (--deg[v] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                state |= (<span class="number">1</span> &lt;&lt; v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state == ALL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!L[u].nxt[v])</span><br><span class="line">            L[u].nxt[v] = newnode();</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    L[u].cnt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, i, j, ed;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        st[i] = st[i - <span class="number">1</span>] + len[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + st[i]);</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(s + st[i]);</span><br><span class="line">        ins(s + st[i], len[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        clr();</span><br><span class="line">        <span class="keyword">if</span> (check(s + st[i], len[i]) &amp;&amp; topsort())</span><br><span class="line">            pos[++pos[<span class="number">0</span>]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= pos[<span class="number">0</span>]; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = pos[i];</span><br><span class="line">        <span class="keyword">for</span> (ed = st[x] + len[x], j = st[x]; j &lt; ed; ++j)</span><br><span class="line">            <span class="built_in">putchar</span>(s[j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 搜索 </category>
          
          <category> BFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛10 E 数列查找（莫队+分块）</title>
      <link href="/2018/01/13/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B10-E-%E6%95%B0%E5%88%97%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/01/13/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B10-E-%E6%95%B0%E5%88%97%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>给你一个长为n的序列a，m次查询区间[l,r]内出现次数第k1小的数中值第k2小的数是多少？<br>保证输入合法<br>输入描述:<br>第一行一个数n<br>第二行n个数表示序列a<br>第三行一个数m<br>之后m行每行四个数表示l r k1 k2<br>输出描述:<br>对于每次询问输出一行一个数表示答案<br>示例1<br>输入</p><p>10<br>3 6 6 8 3 10 1 6 5 6<br>10<br>4 7 1 2<br>5 7 1 1<br>5 6 1 2<br>2 6 2 1<br>8 9 1 1<br>6 9 1 2<br>1 2 1 1<br>1 4 2 1<br>5 7 1 3<br>2 6 1 3<br>输出</p><p>3<br>1<br>10<br>6<br>5<br>5<br>3<br>6<br>10<br>10<br>说明</p><p>3 6 6 8 3 10 1 6 5 6<br>[4,7]中出现1次的有1,3,8,10，第2小的是3<br>[5,7]中出现1次的有1,3,10，第1小的是1<br>[5,6]中出现1次的有3,10，第2小的是10<br>[2,6]中出现2次的有6，第1小的是6<br>[8,9]中出现1次的有5,6，第1小的是5<br>[6,9]中出现1次的有1,5,6,10，第2小的是5<br>[1,2]中出现1次的有3,6，第1小的是3<br>[1,4]中出现2次的有6，第1小的是6<br>[5,7]中出现1次的有1,3,10，第3小的是10<br>[2,6]中出现1次的有3,8,10，第3小的是10<br>备注:<br>对于100%的数据，<br>有1&lt;=n,a[i],m&lt;=40000<br>数据保证一定能找到那个数</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/58#question" target="_blank" rel="noopener">E.数列查找</a><br>比赛的时候用莫队+线段树求去重后的第$k_1$小出现次数+set求第$k_2$小的值，偷懒的办法果然就$TLE$了……，（然后胡思乱想还想到复杂的主席树上去了，燃鹅我这样的弱比不知道怎么套到这题里去）。<br>赛后看了别人的代码发现是用分块来做$k_2$的，用第$i$个块来维护值为$[B[i].l,B[i].r]$内的出现次数为$j$的数字的个数，比如第1个块中有1,2,3,3,6这五个数，那么$B[1][1]=3$，$B[1][2]=1$，这样一来查询的时候就可以从小到大遍历如果这个块内出现对应次数的数的个数小于$k_2$,说明答案在下一个块；如果大于等于$k_2$,说明就在当前块中，暴力遍历当前块内的所有元素，只看出现次数为对应次数的数值即可。<br>搞$k1$可以再开一个数组+$set$或者用直接用线段树在树上二分求，后者建树范围要控制在$[1,最大出现次数]$，否则很可能还是$TLE$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">210</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id, k1, k2, b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; rhs.b || (b == rhs.b &amp;&amp; r &lt; rhs.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"><span class="keyword">int</span> arr[N], ans[N], cnt[N], tcnt[N], Ecnt[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Block &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">block</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">    &#125; B[M];</span><br><span class="line">    <span class="keyword">int</span> _cnt[M][N];</span><br><span class="line">    <span class="keyword">int</span> unit = <span class="number">200</span>, bcnt = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> belong[N];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            B[i].l = (i - <span class="number">1</span>) * unit + <span class="number">1</span>;</span><br><span class="line">            B[i].r = i * unit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40000</span>; ++i)</span><br><span class="line">            belong[i] = (i - <span class="number">1</span>) / unit + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[x];</span><br><span class="line">        <span class="keyword">int</span> pc = cnt[val];</span><br><span class="line">        <span class="keyword">int</span> nc = cnt[val] + v;</span><br><span class="line">        <span class="keyword">int</span> b = belong[val];</span><br><span class="line">        --_cnt[b][pc];</span><br><span class="line">        ++_cnt[b][nc];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ecnt, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bcnt; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(_cnt[i][ecnt] &lt; k)</span><br><span class="line">                k -= _cnt[i][ecnt];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = B[i].l; j &lt;= B[i].r; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt[j] == ecnt &amp;&amp; --k == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">return</span> j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> ecnt, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pc = Ecnt[ecnt], nc = (Ecnt[ecnt] += v);</span><br><span class="line">    <span class="keyword">if</span>(pc == <span class="number">0</span> &amp;&amp; nc == <span class="number">1</span>)</span><br><span class="line">        st.insert(ecnt);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pc == <span class="number">1</span> &amp;&amp; nc == <span class="number">0</span>)</span><br><span class="line">        st.erase(ecnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> maxcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]), ++tcnt[arr[i]], maxcnt = max(maxcnt, tcnt[arr[i]]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> unit = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;Q[i].l, &amp;Q[i].r, &amp;Q[i].k1, &amp;Q[i].k2);</span><br><span class="line">        Q[i].id = i;</span><br><span class="line">        Q[i].b = Q[i].l / unit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L = Q[<span class="number">0</span>].l, R = L - <span class="number">1</span>;</span><br><span class="line">    sort(Q, Q + m);</span><br><span class="line">    Block::init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (L &gt; Q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            --L;</span><br><span class="line">            <span class="keyword">int</span> pc = cnt[arr[L]], nc = pc + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pc &gt;= <span class="number">1</span>)</span><br><span class="line">                update(pc, <span class="number">-1</span>);</span><br><span class="line">            update(nc, <span class="number">1</span>);</span><br><span class="line">            Block::update(L, <span class="number">1</span>);</span><br><span class="line">            ++cnt[arr[L]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; Q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pc = cnt[arr[L]], nc = pc - <span class="number">1</span>;</span><br><span class="line">            update(pc, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nc &gt;= <span class="number">1</span>)</span><br><span class="line">                update(nc, <span class="number">1</span>);</span><br><span class="line">            Block::update(L, <span class="number">-1</span>);</span><br><span class="line">            --cnt[arr[L]];</span><br><span class="line">            ++L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (R &gt; Q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pc = cnt[arr[R]], nc = pc - <span class="number">1</span>;</span><br><span class="line">            update(pc, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nc &gt;= <span class="number">1</span>)</span><br><span class="line">                update(nc, <span class="number">1</span>);</span><br><span class="line">            Block::update(R, <span class="number">-1</span>);</span><br><span class="line">            --cnt[arr[R]];</span><br><span class="line">            --R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (R &lt; Q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            ++R;</span><br><span class="line">            <span class="keyword">int</span> pc = cnt[arr[R]], nc = pc + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pc &gt;= <span class="number">1</span>)</span><br><span class="line">                update(pc, <span class="number">-1</span>);</span><br><span class="line">            update(nc, <span class="number">1</span>);</span><br><span class="line">            Block::update(R, <span class="number">1</span>);</span><br><span class="line">            ++cnt[arr[R]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = st.begin();</span><br><span class="line">        advance(it, Q[i].k1 - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ecnt = *it;</span><br><span class="line">        ans[Q[i].id] = Block::query(ecnt, Q[i].k2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 优化 </category>
          
          <category> 莫队算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDQ分治学习</title>
      <link href="/2018/01/04/CDQ%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/01/04/CDQ%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>一直很想学$CDQ$分治，多次尝试都是看到一半看不懂放弃了(弱比就是这样的吧……)，由于最近数据库作业天天要上机，但实际上也写的差不多了，就还是没放弃想继续学习一波这个高级分治姿势。<br><a id="more"></a><br>网上看了很多人的博客，发现$CDQ$分治中比较重要的就是<strong>序</strong>这个东西，因为有了序才能不重复不遗漏地统计贡献，比如最简单的归并法求逆序对，就是分治的应用之一，这个问题是一个二维偏序问题，如果把下标设为$i$，值设为$a[i]$，那么我们求的就是  $i \lt j,a[i] \gt a[j]$的个数，第一维是下标，第二维是值，显然给定的数组下标是递增的，即第一维已经排好了，那么可以直接扫描线的思想一遍从左到右扫过去用树状数组统计每一个元素值右边的个数再相加即可。但是分治怎么做呢？假如我们已经处理好了左区间$[l,m]$,$[m+1,r]$，那么对于每一个$a[j], j \in [m+1,r]$，只要统计出左区间大于$a[j]$的数的个数即可，如果在对左右区间分治处理完毕之后，顺便将左右区间分别归并排序一下，这样一来个数就可以直接得到为：$m-i+1$。</p><p><a href="http://poj.org/problem?id=2299" target="_blank" rel="noopener"><strong>POJ 2299</strong></a>统计逆序对模板题<br>这里的$CDQ$遵循的<strong>序</strong>就是下标<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N], temp[N];</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = MID (l, r);</span><br><span class="line">    CDQ (l, mid);</span><br><span class="line">    CDQ (mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j])</span><br><span class="line">            temp[sz++] = arr[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += (LL)(mid - i + <span class="number">1</span>);</span><br><span class="line">            temp[sz++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[sz++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        temp[sz++] = arr[j++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        CDQ (<span class="number">1</span>, n);</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一道类似的题：<a href="https://www.nowcoder.com/acm/contest/16/A" target="_blank" rel="noopener"><strong>牛客练习赛4 A.Laptop</strong></a><br>题意就是统计每一个位置的元素与其前面的元素可以形成的顺序对有多少个，输出顺序对不为$0$的位置个数。<br>实际上跟上一题一样，只是求的是每一个位置的顺序对，且第一维第二维均无序，由于是顺序对，先按第一维从小到大排序，然后再在第二维上$CDQ$分治一波，统计的时候算出对应位置可形成的顺序对个数即可。<br>这里$CDQ$遵循的<strong>序</strong>就是第一维的值<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; rhs.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N], temp[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    CDQ(l, mid);</span><br><span class="line">    CDQ(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[arr[i].id] += (r - j + <span class="number">1</span>);</span><br><span class="line">            temp[sz++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[sz++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[sz++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        temp[sz++] = arr[j++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;arr[i].a, &amp;arr[i].b);</span><br><span class="line">        arr[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, [](info a, info b) &#123;<span class="keyword">return</span> a.a &lt; b.a;&#125;);</span><br><span class="line">    CDQ(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count_if(ans + <span class="number">1</span>, ans + <span class="number">1</span> + n, [](<span class="keyword">int</span> x) &#123;<span class="keyword">return</span> x != <span class="number">0</span>;&#125;));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后二维的$CDQ$分治还可以拓展一下，可以解决单点修改区间求和这种问题（虽然明显用$BIT$更简单）<br>假设给定一个具有初值的数组，然后可以对齐进行单点更新，区间求和操作，那么这里的<strong>序</strong>就是操作的时间顺序，显然能对询问产生影响的，只可能是询问之前所做的更新操作，那么这里就可以按照“时间”分治，将单点更新和询问均变为操作，数组的初值也变成单点更新操作即可，那么如何分治呢？显然$[l,m]$区间的更新对$[m+1,r]$的询问影响只能是更新点在询问范围之内的，但是如何简单地统计是一个问题，这里可以将询问拆成差分形式：$sum(l,r) = sum(1,r)-sum(1,l-1)$，这样就可以用一个变量统计出前缀和，然后根据询问是左端点还是右端点，在对应的询问编号记录点上加加减减。当然，如果序相同的话要更新优先，这个也是显然的<br><a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener"><strong>洛谷 P3374</strong></a><br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">500010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, v, qid, type;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> query &amp;rhs)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x || (x == rhs.x &amp;&amp; type &lt; rhs.type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N + M * <span class="number">2</span>], temp[N + M * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = MID (l, r);</span><br><span class="line">    CDQ (l, mid);</span><br><span class="line">    CDQ (mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = l, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i] &lt; Q[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[i].type == <span class="number">1</span>)</span><br><span class="line">                sum += Q[i].v;</span><br><span class="line">            temp[sz++] = Q[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[j].type == <span class="number">2</span>)</span><br><span class="line">                ans[Q[j].qid] -= sum;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Q[j].type == <span class="number">3</span>)</span><br><span class="line">                ans[Q[j].qid] += sum;</span><br><span class="line">            temp[sz++] = Q[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[sz++] = Q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[j].type == <span class="number">2</span>)</span><br><span class="line">            ans[Q[j].qid] -= sum;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Q[j].type == <span class="number">3</span>)</span><br><span class="line">            ans[Q[j].qid] += sum;</span><br><span class="line">        temp[sz++] = Q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        Q[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, qid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">        Q[++tot] = &#123;i, v, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ops;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;ops);</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x, k;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>, &amp;x, &amp;k);</span><br><span class="line">            Q[++tot] = &#123;x, k, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            Q[++tot] = &#123;l - <span class="number">1</span>, <span class="number">0</span>, ++qid, <span class="number">2</span>&#125;;</span><br><span class="line">            Q[++tot] = &#123;r, <span class="number">0</span>, qid, <span class="number">3</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ (<span class="number">1</span>, tot);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= qid; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NYOJ 95 众数问题（分治法求众数）</title>
      <link href="/2017/12/28/NYOJ-95-%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2017/12/28/NYOJ-95-%E4%BC%97%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>众数问题<br>时间限制：3000 ms  |  内存限制：65535 KB<br>难度：3<br><a id="more"></a><br>描述<br>所谓众数，就是对于给定的含有N个元素的多重集合，每个元素在S中出现次数最多的成为该元素的重数，</p><p>多重集合S重的重数最大的元素成为众数。例如：S={1,2,2,2,3,5}，则多重集S的众数是2，其重数为3。</p><p>现在你的任务是：对于给定的由m个自然数组成的多重集S，计算出S的众数及其重数。</p><p>输入<br>第一行为n，表示测试数据组数。(n&lt;30)<br>每组测试的第一行是一个整数m，表示多重集S中元素的个数为m<br>接下来的一行中给出m(m&lt;100)个不大于10万的自然数<br>（不会出现不同元素出现的次数相同的情况，如：S={11,11,22,22,33,33}）。<br>输出<br>每组测试数据输出一行，包含两个数，第一个是众数，第二个是其重数，中间以空格隔开。<br>样例输入<br>1<br>6<br>1 2 2 2 3 5<br>样例输出<br>2 3</p><p>题目链接：<a href="http://59.69.128.203/JudgeOnline/problem.php?pid=95" target="_blank" rel="noopener">NYOJ 95</a><br>由于算法课讲了用分治的思想求众数，而我以前不知道有这种方法（虽然时间复杂度上都是$nlog(n)$的，但是空间复杂度分治似乎比map更优一点，sort后再遍历的这种方法太简单就不讲了），想着还是要好好学习一波，打好基础。<br>本来前几周就该写了，但是由于眼瞎导致一直$WA$到怀疑人生，刚才发现原来$n$是数据组数，$m$才是数组长度（温柔是你的美……）<br>然后中间又去膜了下快排的基本原理，发现在快排中统计$pivot$的个数的话需要考虑一些边界问题，还不如重新$O(N)$地再扫一次好了。<br>主要过程如下：</p><ol><li>假设当前枢轴元素为$pivot$，将$pivot$归位后的位置为$mid$（偷懒用nth_element()也行），然后统计出$pivot$的个数，先拿去更新全局最优解。</li><li>假设有出现次数比全局最优解更多的数，记为$mode_t$。<ol><li>$mode_t=pivot$，本次递归本身已经计算过，无需再考虑。</li><li>$mode_t \lt pivot$，只可能在左半边，递归处理$[l,mid-1]$</li><li>$mode_t \gt pivot$，只可能在右半边，递归处理$[mid+1,r]$</li></ol></li></ol><p>这样一来时间复杂度是$O(Nlog(N))$，空间复杂度基本上是$O(N)$。这玩意儿写完发现跟$KD-tree$递归查询的剪枝很像啊，就是用全局最优解来剪枝<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;<span class="comment">//数组长度最大为100，而不是30……</span></span><br><span class="line"><span class="keyword">int</span> arr[N], cnt, mode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[l];</span><br><span class="line">    <span class="keyword">int</span> i = l, j = r;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= temp)</span><br><span class="line">            --j;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= temp)</span><br><span class="line">            ++i;</span><br><span class="line">        swap(arr[i], arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[l], arr[i]);</span><br><span class="line">    <span class="keyword">int</span> tcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; ++k)</span><br><span class="line">        <span class="keyword">if</span> (arr[k] == arr[i])</span><br><span class="line">            ++tcnt;</span><br><span class="line">    <span class="keyword">if</span> (tcnt &gt; cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = tcnt;</span><br><span class="line">        mode = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> - l + <span class="number">1</span> &gt; tcnt)</span><br><span class="line">        solve(l, i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r - (i + <span class="number">1</span>) + <span class="number">1</span> &gt; tcnt)</span><br><span class="line">        solve(i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        solve(<span class="number">1</span>, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, mode, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 3311 Hie with the Pie（floyed预处理+状压+优先队列分支限界法求哈密顿回路）</title>
      <link href="/2017/12/17/POJ-3311-Hie-with-the-Pie/"/>
      <url>/2017/12/17/POJ-3311-Hie-with-the-Pie/</url>
      
        <content type="html"><![CDATA[<p>Hie with the Pie<br>Time Limit: 2000MS      Memory Limit: 65536K<br>Total Submissions: 8401     Accepted: 4582<br><a id="more"></a><br>Description</p><p>The Pizazz Pizzeria prides itself in delivering pizzas to its customers as fast as possible. Unfortunately, due to cutbacks, they can afford to hire only one driver to do the deliveries. He will wait for 1 or more (up to 10) orders to be processed before he starts any deliveries. Needless to say, he would like to take the shortest route in delivering these goodies and returning to the pizzeria, even if it means passing the same location(s) or the pizzeria more than once on the way. He has commissioned you to write a program to help him.</p><p>Input</p><p>Input will consist of multiple test cases. The first line will contain a single integer n indicating the number of orders to deliver, where 1 ≤ n ≤ 10. After this will be n + 1 lines each containing n + 1 integers indicating the times to travel between the pizzeria (numbered 0) and the n locations (numbers 1 to n). The jth value on the ith line indicates the time to go directly from location i to location j without visiting any other locations along the way. Note that there may be quicker ways to go from i to j via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location i to j may not be the same as the time to go directly from location j to i. An input value of n = 0 will terminate input.</p><p>Output</p><p>For each test case, you should output a single number indicating the minimum time to deliver all of the pizzas and return to the pizzeria.</p><p>Sample Input</p><p>3<br>0 1 10 10<br>1 0 1 2<br>10 1 0 10<br>10 2 10 0<br>0<br>Sample Output</p><p>8</p><p>题目链接：<a href="http://poj.org/problem?id=3311" target="_blank" rel="noopener">POJ 3311</a><br>最近算法课有一个作业要用优先队列来优化分支限界法求哈密顿回路即$TSP$问题，要画出优先队列的解空间树，不知道如何实现，于是只能找道题来做做<br>写了好一会儿一直$WA$，后来发现是状态不对，应该多加一维表示最后所在点才行。<br>分支限界法根据书上定义应该是把不必要的状态剪枝去掉，在代码中体现在<strong>不压入优先队列</strong>，那如何剪枝呢，假设我们要拓展的下一个状态是$nxt$，如果$nxt$已经被计算过且其代价大于当前的估算代价上界，那么显然$nxt$就没必要存在，扔掉即可。<br>代码上实现的话就是用二进制$[1,2^n)$表示当前走过的点状态，$Mincost[st][u$记录是当前走过的点的状态$st$，此状态最后所在点为$u$的最小代价，那么可以得到状态转移方程:</p><script type="math/tex; mode=display">dp[st|(1<<v)][v] = min(dp[st|(1<<v)][v], dp[st][u] + cost(u,v)),\;\; st\&(1<<v)=0</script><p>如果$0-n$都走过之后再回到$0$可以特判一下让此时的第$0$个位置作为第$n+1$的位置处理。<br>要输出解空间树的话就给每一个状态加上标号，每次压入队列时输出当前节点的标号和状态，下一个节点的标号的状态。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, w;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _w): to(_to), nxt(_nxt), w(_w) &#123;&#125;</span><br><span class="line">&#125; E[N * N];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> dis[(<span class="number">1</span> &lt;&lt; N) + <span class="number">10</span>][N], n;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    CLR(dis, INF);</span><br><span class="line">    CLR(G, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], w);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, st, cost;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> cost &gt; rhs.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;info&gt;Q;</span><br><span class="line">    CLR(dis, INF);</span><br><span class="line">    Q.push((info) &#123;<span class="number">0</span>, <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    dis[Q.top().st][Q.top().u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        info u = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u.u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = E[i].w;</span><br><span class="line">            <span class="keyword">if</span> (u.st == ((<span class="number">1</span> &lt;&lt; (n + <span class="number">1</span>)) - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span> &amp;&amp; dis[u.st][u.u] + w &lt; dis[(<span class="number">1</span> &lt;&lt; (n + <span class="number">2</span>)) - <span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[(<span class="number">1</span> &lt;&lt; (n + <span class="number">2</span>)) - <span class="number">1</span>][<span class="number">0</span>] = dis[u.st][u.u] + w;</span><br><span class="line">                    Q.push((info) &#123;<span class="number">0</span>, (<span class="number">1</span> &lt;&lt; (n + <span class="number">2</span>)) - <span class="number">1</span>, dis[(<span class="number">1</span> &lt;&lt; (n + <span class="number">2</span>)) - <span class="number">1</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((!(u.st &amp; (<span class="number">1</span> &lt;&lt; v))) &amp;&amp; dis[u.st][u.u] + w &lt; dis[u.st | (<span class="number">1</span> &lt;&lt; v)][v])</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[u.st | (<span class="number">1</span> &lt;&lt; v)][v] = dis[u.st][u.u] + w;</span><br><span class="line">                    Q.push((info) &#123;v, u.st | (<span class="number">1</span> &lt;&lt; v), dis[u.st | (<span class="number">1</span> &lt;&lt; v)][v]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">                    G[i][j] = min(G[i][j], G[i][k] + G[k][j]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                add(i, j, G[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[(<span class="number">1</span> &lt;&lt; (n + <span class="number">2</span>)) - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛8 B 储物点的距离（前缀和+思维）</title>
      <link href="/2017/12/16/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B8-B-%E5%82%A8%E7%89%A9%E7%82%B9%E7%9A%84%E8%B7%9D%E7%A6%BB/"/>
      <url>/2017/12/16/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B8-B-%E5%82%A8%E7%89%A9%E7%82%B9%E7%9A%84%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 131072K，其他语言262144K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述</p><p> 一个数轴，每一个储物点会有一些东西，同时它们之间存在距离。<br>每次给个区间[l,r],查询把这个区间内所有储物点的东西运到另外一个储物点的代价是多少？<br>比如储物点i有x个东西，要运到储物点j，代价为x * dist( i , j )<br>dist就是储物点间的距离。 </p><p>输入描述:<br>第一行两个数表示n,m<br>第二行n-1个数，第i个数表示第i个储物点与第i+1个储物点的距离ai<br>第三行n个数，表示每个储物点的东西个数bi<br>之后m行每行三个数x l r<br>表示查询要把区间[l,r]储物点的物品全部运到储物点x的花费<br>每次查询独立<br>输出描述:<br>对于每个询问输出一个数表示答案<br>答案对1000000007取模<br>示例1<br>输入</p><p>5 5<br>2 3 4 5<br>1 2 3 4 5<br>1 1 5<br>3 1 5<br>2 3 3<br>3 3 3<br>1 5 5<br>输出</p><p>125<br>72<br>9<br>0<br>70<br>备注:<br>对于100%的数据n,m &lt;= 200000 , 0 &lt;= ai,bi &lt;= 2000000000</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/39/B" target="_blank" rel="noopener">B.储物点的距离</a><br>题意就是给你$n$个点的位置$p<em>i$和其点上的物品个数$b_i$，每次询问$\Sigma</em>{i=l}^{r}{b<em>i \times \lvert p_i-p_x \rvert}$。<br>显然这里的求和公式是可以拆成：$b_i \times \Sigma</em>{i=l}^r p<em>i- b_i \times {\Sigma</em>{i=l}^r p_x}$，然后预处理出$\Sigma b_i$和$\Sigma p_i \times b_i$的两个前缀和，然后分三类讨论一下</p><ol><li>$x \ge r$, $ans = p_x \times \Sigma_l^r{b_i} - \Sigma_l^r{p_i \times b_i}$</li><li>$x \le l$, $ans = \Sigma_l^r{p_i*b_i} - p_x \times \Sigma_l^r{b_i}$</li><li>$l \lt x \lt r$, $ans = \Sigma_x^r{p_i \times b_i} -p_x \times \Sigma_x^r{b_i} + p_x \times \Sigma_l^{x-1}b_i - \Sigma_l^{x-1}b_i \times p_i$</li></ol><p>最恶心的是负数的取模，这里一旦弄错很可能一组数据都过不了（开始怀疑人生）……，<strong>负数取模可以先取模，再加模数，再取模即可</strong></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1000000007L</span>L;</span><br><span class="line">LL pos[N], b[N], sb[N], pos_b[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (r + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">S</span><span class="params">(LL arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (arr[r] - arr[l - <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    pos[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        LL d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;d);</span><br><span class="line">        pos[i + <span class="number">1</span>] = (pos[i] + d) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pos_b[i] = (pos_b[i - <span class="number">1</span>] + mul(pos[i], b[i])) % mod;</span><br><span class="line">        sb[i] = (sb[i - <span class="number">1</span>] + b[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            LL ans = mul(S(sb, l, r), pos[x]) - S(pos_b, l, r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans % mod + mod) % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= l)</span><br><span class="line">        &#123;</span><br><span class="line">            LL ans = S(pos_b, l, r) - mul(S(sb, l, r), pos[x]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans % mod + mod) % mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LL ans = S(pos_b, x, r) - mul(S(sb, x, r), pos[x]);</span><br><span class="line">            LL ans2 = mul(S(sb, l, x - <span class="number">1</span>), pos[x]) - S(pos_b, l, x - <span class="number">1</span>);</span><br><span class="line">            ans = ((ans + ans2) % mod + mod) % mod;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年浙江工业大学大学生程序设计迎新赛热身赛 H 方块 III（思维+线段树）</title>
      <link href="/2017/12/14/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-H-%E6%96%B9%E5%9D%97-III/"/>
      <url>/2017/12/14/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-H-%E6%96%B9%E5%9D%97-III/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 131072K，其他语言262144K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>有 N 个方块排成一排，每个方块都染有颜色，第 i 个的颜色为 Ci，一共有M种颜色，每种颜色的方块都有不同的价值Wi，现在要求找出一段方块，使得其中只出现过一次的方块的价值总和最大。<br>输入描述:<br>T组数据。<br>每组数据第一行，包含两个整数N和M<br>接下来一行包含N个整数Ci，代表每个方块的颜色<br>最后一行包含M个整数Wi，表示每种颜色的价值<br>T = 10<br>1 &lt;= N, M &lt;= 105，1 &lt;= Ci &lt;= M，1 &lt;= Wi &lt;= 109<br>输出描述:<br>每组数据一个整数，表示答案。<br>示例1<br>输入</p><p>5 3<br>1 2 1 1 3<br>30 40 50<br>10 5<br>5 4 3 5 3 1 2 4 2 1<br>78 65 99 132 200<br>输出</p><p>90<br>574</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/51/H" target="_blank" rel="noopener">H.方块 III</a><br>膜了别人的代码才发现这题这么简单，一直以为是什么$O(n)$的神奇算法，实际上是考虑每一个位置的颜色的贡献，进行范围更新。<br>假设当前的位置为$i$，颜色为$c_i$，该种颜色的权值为$w_i$，那么由于两个即以上颜色共存在一个区间的时候贡献为$0$，也就是说当前颜色有贡献的区间仅仅是$[上一个c_i出现位置+1,i]$，考虑完当前位置的颜色贡献，还要取消掉上一个该颜色出现位置的影响，然后所有点的贡献中的最大值就是数列$[1,i]$答案，维护一个区间更新，区间查询（实际上只需要查询根节点即可）的线段树，做一遍$O(nlog(n))$的更新即可。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r;</span><br><span class="line">    LL v, ad;</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> c[N], n, m;</span><br><span class="line">LL w[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        pos[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].v = max(T[LC(k)].v, T[RC(k)].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].ad)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].v += T[k].ad;</span><br><span class="line">        T[RC(k)].v += T[k].ad;</span><br><span class="line">        T[LC(k)].ad += T[k].ad;</span><br><span class="line">        T[RC(k)].ad += T[k].ad;</span><br><span class="line">        T[k].ad = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    T[k].v = T[k].ad = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    build(LC(k), l, T[k].mid);</span><br><span class="line">    build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].v += v;</span><br><span class="line">        T[k].ad += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; T[k].mid)</span><br><span class="line">            update(RC(k), l, r, v);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;w[i]);</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sz = pos[c[i]].size();</span><br><span class="line">            <span class="keyword">int</span> C = c[i];</span><br><span class="line">            <span class="keyword">int</span> V = w[C];</span><br><span class="line">            <span class="keyword">if</span> (!sz)</span><br><span class="line">                update(<span class="number">1</span>, <span class="number">1</span>, i, V);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sz == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                update(<span class="number">1</span>, <span class="number">1</span>, pos[C][sz - <span class="number">1</span>], -V);</span><br><span class="line">                update(<span class="number">1</span>, pos[C][sz - <span class="number">1</span>] + <span class="number">1</span>, i, V);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                update(<span class="number">1</span>, pos[C][sz - <span class="number">2</span>] + <span class="number">1</span>, pos[C][sz - <span class="number">1</span>], -V);</span><br><span class="line">                update(<span class="number">1</span>, pos[C][sz - <span class="number">1</span>] + <span class="number">1</span>, i, V);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, T[<span class="number">1</span>].v);</span><br><span class="line">            pos[C].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈尔滨理工大学第七届程序设计竞赛决赛（网络赛-低年级组）J 长跑（DP+滚动数组）</title>
      <link href="/2017/12/10/%E5%93%88%E5%B0%94%E6%BB%A8%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%EF%BC%88%E7%BD%91%E7%BB%9C%E8%B5%9B-%E4%BD%8E%E5%B9%B4%E7%BA%A7%E7%BB%84%EF%BC%89J-%E9%95%BF%E8%B7%91/"/>
      <url>/2017/12/10/%E5%93%88%E5%B0%94%E6%BB%A8%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%B8%83%E5%B1%8A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%EF%BC%88%E7%BD%91%E7%BB%9C%E8%B5%9B-%E4%BD%8E%E5%B9%B4%E7%BA%A7%E7%BB%84%EF%BC%89J-%E9%95%BF%E8%B7%91/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>小明参加了长跑比赛，只要到达终点就算小明成功了，长跑总路径长度为L，赛道是直线的，我们可以视为最左边为起点，最右边为终点。沿途上共计N个补给节点，补给节点可以供给选手休息，补充体力，直接可以将体力补满。第i个补给节点位于位子Pi(从左往右第Pi个单位位子)，想要在这里补充体力需要花费Ci个硬币。<br>小明的体力上限为Maxn，初始的时候视为小明的体力是满额的，每消耗一单位体力，能够跑一单位距离。当小明没有体力的时候，他会趴在地上不动(如果当前位子上有补给节点，他仍然可以花费对应硬币补充能量)<br>小明初始的时候教练会给他S个硬币，小明想知道自己能否成功跑到终点。<br>输入描述:<br>本题包含多组数据，每组数据包含N+1行。<br>第一行输入四个个数字N,L,Maxn,S<br>接下来N行，每行输入两个数字，Pi，Ci<br>数据范围：<br>每个点上边可能有多个补给站(毕竟要货比三家啊)；<br>0&lt;=N&lt;=2000<br>0&lt;=L&lt;=20000<br>0&lt;=Maxn&lt;=20000<br>0&lt;=S&lt;=2000<br>1&lt;=Pi&lt;=N<br>1000&lt;=Ci&lt;=3000<br>输出描述:<br>每组数据输出一行，如果小明能够跑到终点，那么输出Yes，否则输出No<br>示例1<br>输入</p><p>1 1000 500 2000<br>500 2000<br>1 1000 500 2000<br>500 3000<br>输出</p><p>Yes<br>No</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/29/J" target="_blank" rel="noopener">J.长跑</a><br>根据题目的范围发现似乎可以用$DP$写啊，$dp[i][j]$表示当前跑的长度为$i$，剩余硬币数为$j$，所能保存的最大体力值，那么转移方程就是：</p><script type="math/tex; mode=display">\begin{cases}dp[i][j] = max(dp[i][j],dp[i-1][j]-1), \;dp[i-1][j]状态至少有一点体力且第i个位置没有补给包\\dp[i][j-cost[i]] = Maxn, \;dp[i-1][j]状态至少有一点体力且第i个位置有补给包且j \ge cost[i]\end{cases}</script><p>然后直接看$dp[l][\;]$这一行是否有一个位置体力大于等于$0$即可。<br>咦，发现样例可过，难道$DP$蒟蒻选手这样就可以轻松$AC$了吗（滑稽，显然没有这么容易$AC$），可惜$memset$爆内存了，于是又回去把$cost$数组改成了$short$，还是爆内存，再看转移方程发现卧槽这不是明显滚动数组吗，果断修改修改就过了233（真是ZZ啊）<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">short</span> cost[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, l, mn, s, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;l, &amp;mn, &amp;s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= s; ++j)</span><br><span class="line">                dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            cost[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p, c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;c);</span><br><span class="line">            <span class="keyword">if</span> (!cost[p] || cost[p] &gt; c)</span><br><span class="line">                cost[p] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nxt = <span class="number">1</span>, pre = <span class="number">0</span>;</span><br><span class="line">        dp[pre][s] = mn;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= s; ++j)</span><br><span class="line">                dp[nxt][j] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cost[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= s; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[pre][j] &gt;= <span class="number">1</span>)</span><br><span class="line">                        dp[nxt][j] = max(dp[nxt][j], dp[pre][j] - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j &gt;= cost[i + <span class="number">1</span>] &amp;&amp; dp[pre][j] &gt;= <span class="number">1</span>)</span><br><span class="line">                        dp[nxt][j - cost[i + <span class="number">1</span>]] = mn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= s; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (dp[pre][j] &gt;= <span class="number">1</span>)</span><br><span class="line">                        dp[nxt][j] = max(dp[nxt][j], dp[pre][j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nxt, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s; ++i)</span><br><span class="line">            ans = max(ans, dp[pre][i]);</span><br><span class="line">        <span class="built_in">puts</span>(ans &gt;= <span class="number">0</span> ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 滚动数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年浙江工业大学大学生程序设计迎新赛热身赛 G 方块 II（离散化+线段树+尺取）</title>
      <link href="/2017/12/09/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-G-%E6%96%B9%E5%9D%97-II/"/>
      <url>/2017/12/09/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-G-%E6%96%B9%E5%9D%97-II/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 131072K，其他语言262144K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>有 N 个方块排成一排，每个方块都染有颜色，第 i 个的颜色为 Ci。现在你可以最多移除 K 个方块，把剩下的方块按照原来的顺序重新排好，找出最长的颜色相同的连续方块。<br>输入描述:<br>T组数据。<br>每组数据第一行，包含两个整数 N 和 K<br>接下来一行包含 N 个整数 Ci，代表每个方块的颜色<br>T &lt;= 300<br>1 &lt;= N &lt;= 105，0 &lt;= K &lt;= N，1 &lt;= Ci &lt;= 109<br>输出描述:<br>每组数据一个整数，表示答案。<br>示例1<br>输入</p><p>10 1<br>1 1 1 1 1 1 1 1 1 1<br>10 5<br>3 2 3 5 1 2 5 3 2 2<br>输出</p><p>10<br>4</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/51/G" target="_blank" rel="noopener">G.方块 II</a><br>看样例感觉尺取可行，实际上对于任何区间，最优的方案肯定是留下这个区间里的众数，去掉其余的数，设区间为$[L,R]$，众数为$x$，众数的个数为$c$，那么去掉的数就是$R-L+1-c$，那么直接把颜色离散化到$10^5$范围内，然后以权值建立线段树，加入数的时候就把颜色的位置$+1$，去掉的时候就$-1$，因此需要单点更新区间查询最大值的线段树，用来维护尺取时区间内的最大值，每一次都找到一个最大的区间使得其范围合法且最少去掉的数小于等于$k$。注意题目是多组数据，每一次都要初始化，难怪一开始只通过了$0.8\%$的case………<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r;</span><br><span class="line">    <span class="keyword">int</span> id, v;</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ls = LC(k), rs = RC(k);</span><br><span class="line">    <span class="keyword">if</span> (T[ls].v &gt; T[rs].v)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].v = T[ls].v;</span><br><span class="line">        T[k].id = T[ls].id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T[k].v = T[rs].v;</span><br><span class="line">        T[k].id = T[rs].id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].v = <span class="number">0</span>;</span><br><span class="line">        T[k].id = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        build(LC(k), l, T[k].mid);</span><br><span class="line">        build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == T[k].l &amp;&amp; T[k].r == x)</span><br><span class="line">        T[k].v += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), x, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update(RC(k), x, v);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">            vec.push_back(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.begin(), vec.end());</span><br><span class="line">        vec.erase(unique(vec.begin(), vec.end()), vec.end());</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            arr[i] = lower_bound(vec.begin(), vec.end(), arr[i]) - vec.begin() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span> (L &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (R &lt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                update(<span class="number">1</span>, arr[R], <span class="number">1</span>);</span><br><span class="line">                ++R;</span><br><span class="line">                <span class="keyword">if</span> (R - L - T[<span class="number">1</span>].v &gt; k)</span><br><span class="line">                &#123;</span><br><span class="line">                    update(<span class="number">1</span>, arr[--R], <span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, T[<span class="number">1</span>].v);</span><br><span class="line">            update(<span class="number">1</span>, arr[L], <span class="number">-1</span>);</span><br><span class="line">            ++L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 优化 </category>
          
          <category> 尺取法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 尺取法 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年浙江工业大学大学生程序设计迎新赛热身赛 E 递推（矩阵快速幂）</title>
      <link href="/2017/12/08/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-E-%E9%80%92%E6%8E%A8/"/>
      <url>/2017/12/08/2017%E5%B9%B4%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%BF%8E%E6%96%B0%E8%B5%9B%E7%83%AD%E8%BA%AB%E8%B5%9B-E-%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 131072K，其他语言262144K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>JYM和XJ转眼就从小学上了高中。在学习递推的时候，JYM在纸上随手写了一个递推关系式：an=2<em>an-1，a0=0。写完这个递推式，JYM拿给XJ看，XJ觉得太过简单，于是大笔一挥，在等式右边又加了一个式子，变成了这样：an=2</em>an-1+n2。JYM看到这个式子，想要算几个项来看看，可是一算就发现这个数据量太大了，你能帮他解决这个问题吗？<br>输入描述:<br>输入数据有多组（不超过100组数据），每组数据包含一个整数N&lt;=1018<br>输出描述:<br>一个整数X，表示递推式第n项的值。由于数字太大，因此结果对于1000000009取模后输出。<br>示例1<br>输入</p><p>0<br>1<br>2<br>3<br>输出</p><p>0<br>1<br>6<br>21</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/51/E" target="_blank" rel="noopener">E.递推</a><br>看范围懂做法系列……明显的矩阵快速幂啊，主要就是构造转移矩阵使得$(n-1)^2$变成$n^2$，通过YY+观察可以发现$n^2=(n-1)^2+2*(n-1)+1$，那么矩阵应该有三项，一个是平方数本身，一个是平方数下的底数，一个是$1$，然后就YY构造出了以下矩阵：</p><script type="math/tex; mode=display">  \begin{pmatrix}  a_{n-1} & (n-1)^2 & n-1 & 1 \\  a_{n-2} & (n-2)^2 & n-2 & 1 \\  \end{pmatrix}  \times  \begin{pmatrix}  2 & 0 & 0 & 0\\  1 & 1 & 0 & 0\\  2 & 2 & 1 & 0\\  1 & 1 & 1 & 1\\  \end{pmatrix}  =  \begin{pmatrix}  a_{n} & n^2 & n & 1 \\  a_{n-1} & (n-1)^2 & n-1 & 1 \\  \end{pmatrix}</script><p>即</p><script type="math/tex; mode=display">  \begin{pmatrix}  a_{1} & 1^2 & 1 & 1 \\  a_{0} & 0^2 & 0 & 1 \\  \end{pmatrix}  \times  \begin{pmatrix}  2 & 0 & 0 & 0\\  1 & 1 & 0 & 0\\  2 & 2 & 1 & 0\\  1 & 1 & 1 & 1\\  \end{pmatrix}^{n-1}  =  \begin{pmatrix}  a_{n} & n^2 & n & 1 \\  a_{n-1} & (n-1)^2 & n-1 & 1 \\  \end{pmatrix}</script><p>那么在$N&gt;=2$的时候，我们可以用矩阵快速幂优化转移矩阵的乘法，中间过程取模用带取模的快速乘法即可。退役老年人果然只能做做新生赛了……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000009</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (r + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> A[N][N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                A[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">one</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            A[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (b.A[k][j])</span><br><span class="line">                            c.A[i][j] = (c.A[i][j] + mul(A[i][k], b.A[k][j])) % mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span>^(Mat a, LL b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat r;</span><br><span class="line">        r.one();</span><br><span class="line">        <span class="keyword">while</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                r = r * a;</span><br><span class="line">            a = a * a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">21</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[n]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Mat A, M;</span><br><span class="line">            A.zero();</span><br><span class="line">            M.zero();</span><br><span class="line">            A.A[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>]; A.A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>; A.A[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>; A.A[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            A.A[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">0</span>]; A.A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; A.A[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>; A.A[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            M.A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">            M.A[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; M.A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            M.A[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">2</span>; M.A[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>; M.A[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            M.A[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">1</span>; M.A[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>; M.A[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>; M.A[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            M = M ^ (n - <span class="number">1</span>);</span><br><span class="line">            A = A * M;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, A.A[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 矩阵快速幂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPFA的SLF和LLL优化</title>
      <link href="/2017/12/05/SPFA%E7%9A%84LLL%E5%92%8CSLF%E4%BC%98%E5%8C%96/"/>
      <url>/2017/12/05/SPFA%E7%9A%84LLL%E5%92%8CSLF%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>最近学了下$SPFA$的两个优化，感觉效果确实有，代码也简单，但是感觉一般不会卡$SPFA$<br><a id="more"></a></p><h1 id="SLF-Small-Label-First-优化："><a href="#SLF-Small-Label-First-优化：" class="headerlink" title="$SLF$(Small Label First)优化："></a>$SLF$(Small Label First)优化：</h1><p>假设当前队列的队头点为$front​$，拓展出去的点为$v​$，如果更新后$dis[v] \lt dis[front]​$，那很可能$v​$比$front​$更有潜力，因此把$v​$点放到队列的头部而不是尾部，因此这里我们所说的队列指的是滋瓷前后都可以插入数据的双端队列$std::deque​$</p><h2 id="SLF-代码："><a href="#SLF-代码：" class="headerlink" title="$SLF$代码："></a>$SLF$代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    CLR(d, INF);</span><br><span class="line">    CLR(vis, <span class="literal">false</span>);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    Q.push_back(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop_front();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + E[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + E[i].d;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//SLF优化</span></span><br><span class="line">                    <span class="keyword">if</span> (!Q.empty() &amp;&amp; d[v] &lt; d[Q.front()])</span><br><span class="line">                        Q.push_front(v);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Q.push_back(v);</span><br><span class="line">                    <span class="comment">//SLF优化</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;<br>&nbsp;</p><h1 id="LLL-Large-Label-Last-优化："><a href="#LLL-Large-Label-Last-优化：" class="headerlink" title="$LLL$(Large Label Last)优化："></a>$LLL$(Large Label Last)优化：</h1><p>假设当前从队列取出的点为$u$，如果当前点$u$到源点$S$的距离$dis[u]$<strong>小于</strong>队列$Q$中所有点的距离平均值${\sum{dis[i]}} \over |Q|$，即$dis[u]*|Q| \lt \sum\limits_{i \in Q}{dis[i]}$（在代码实现上把这个判定式子转换成乘法判断会更简单），那么就将$u$放到队列末尾，直到找到一个点$x$比平均值要小，再从$x$开始拓展更新，这个优化感觉效果一般，似乎不如代码简洁的$SLF$，有时候甚至比普通的$SPFA​$都慢<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fm67tdrmipj302m02xglh.jpg" alt="&quot;Jianjie&quot;"></p><h2 id="LLL-代码："><a href="#LLL-代码：" class="headerlink" title="$LLL$代码："></a>$LLL$代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    CLR(d, INF);</span><br><span class="line">    CLR(vis, <span class="literal">false</span>);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    Q.push_back(s);</span><br><span class="line">    LL qsz = <span class="number">1</span>, sum = <span class="number">0</span>;<span class="comment">//LLL</span></span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop_front();</span><br><span class="line">        <span class="comment">//LLL优化</span></span><br><span class="line">        <span class="keyword">if</span> ((LL)d[u] * qsz &gt;= sum)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push_back(u);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --qsz;</span><br><span class="line">        sum -= d[u];</span><br><span class="line">        <span class="comment">//LLL优化</span></span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + E[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + E[i].d;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//SLF优化</span></span><br><span class="line">                    <span class="keyword">if</span> (!Q.empty() &amp;&amp; d[v] &lt; d[Q.front()])</span><br><span class="line">                        Q.push_front(v);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Q.push_back(v);</span><br><span class="line">                    <span class="comment">//SLF优化</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//LLL优化</span></span><br><span class="line">                    ++sz;</span><br><span class="line">                    sum += (LL)d[v];</span><br><span class="line">                    <span class="comment">//LLL优化</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 图论 </category>
          
          <category> 最短路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #448 Div.2题解</title>
      <link href="/2017/11/30/CF-448-Div-2%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/11/30/CF-448-Div-2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Pizza-Separation"><a href="#A-Pizza-Separation" class="headerlink" title="A.Pizza Separation"></a><a href="http://codeforces.com/contest/895/problem/A" target="_blank" rel="noopener">A.Pizza Separation</a></h1><p>题意就是给你一个环形的披萨，已经切成很多个扇形， 要分成<strong>连续的</strong>两部分大扇形，求最小的扇形角度和的差值。<br>既然是环形的，当然是把原数组复制一份接到后面然后用前缀和或者暴力枚举某一半的开始和结束位置，更新答案，特判一下$n==1$的情况就可以了<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">        arr[n + i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i)</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i + n - <span class="number">1</span> &lt; (n &lt;&lt; <span class="number">1</span>); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r = i + n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt; r; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ll = i, lr = j;</span><br><span class="line">            <span class="keyword">int</span> rl = j + <span class="number">1</span>, rr = r;</span><br><span class="line">            ans = min(ans, <span class="built_in">abs</span>(pre[lr] - pre[ll - <span class="number">1</span>] - (pre[rr] - pre[rl - <span class="number">1</span>])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-XK-Segments"><a href="#B-XK-Segments" class="headerlink" title="B.XK Segments"></a><a href="http://codeforces.com/contest/895/problem/B" target="_blank" rel="noopener">B.XK Segments</a></h1><p>题意就是让你在给定数列里找两个数$a_i$和$a_j$，使得$a_i \le a_j$且$[a_i,a_j]$区间中可以被$x$整除的数有恰好$k$个，求符合此条件的数对的数量<br>$O(n)$枚举$a_i$，设$a_i=t*x+b$，然后分类讨论：</p><ol><li>$k==0$, $a_i \le a_j \le tx+x-1$</li><li>$a_i\%x==0$, $tx+kx \le a_j \le tx+(k+1)x-1$</li><li>$a_i\%x!=0$, $a_i+(k-1)x \le a_j \le a_i+kx-1$</li></ol><p>这样做两次二分查找，找到符合$a_j$的区间，答案加上这段区间的长度即可<br>具体如何推导出来打个草稿画一画就知道了。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getl</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    LL x, k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">        sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n);</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] % x)</span><br><span class="line">                &#123;</span><br><span class="line">                    LL l_lim = arr[i], r_lim = arr[i] / x * x + x - <span class="number">1L</span>L;</span><br><span class="line">                    <span class="keyword">int</span> l = getl(<span class="number">1</span>, n, l_lim), r = getr(<span class="number">1</span>, n, r_lim);</span><br><span class="line">                    <span class="keyword">if</span> (l &gt; r || l == <span class="number">-1</span> || r == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    ans += (LL)(r - l + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] % x)</span><br><span class="line">            &#123;</span><br><span class="line">                LL l_lim = arr[i] / x * x + k * x, r_lim = arr[i] / x * x + (k + <span class="number">1</span>) * x - <span class="number">1L</span>L;</span><br><span class="line">                <span class="keyword">int</span> l = getl(<span class="number">1</span>, n, l_lim), r = getr(<span class="number">1</span>, n, r_lim);</span><br><span class="line">                <span class="keyword">if</span> (l &gt; r || l == <span class="number">-1</span> || r == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                ans += (LL)(r - l + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LL l_lim = arr[i] + (k - <span class="number">1</span>) * x, r_lim = arr[i] + k * x - <span class="number">1L</span>L;</span><br><span class="line">                <span class="keyword">int</span> l = getl(<span class="number">1</span>, n, l_lim), r = getr(<span class="number">1</span>, n, r_lim);</span><br><span class="line">                <span class="keyword">if</span> (l &gt; r || l == <span class="number">-1</span> || r == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                ans += (LL)(r - l + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Square-Subsets"><a href="#C-Square-Subsets" class="headerlink" title="C.Square Subsets"></a><a href="http://codeforces.com/contest/895/problem/C" target="_blank" rel="noopener">C.Square Subsets</a></h1><p>题目就是给你一个数列，从中选出不为空的一些数，使得这些数的乘积为一个平方数。<br>考虑将所有的数质数分解，实际上题目条件变成了将一些数用其分解出来的质数和对应的指数代表，相加之后指数均为偶数，由于$1-70$内的数只有$19$个，因此用状压来求。<br>将一个数分解之后第$i$的因子的指数如果为奇数，那么这个位置的值为$1$，否则为$0$<br>设$dp[i][j]$代表从只考虑范围为数列中值为$0 \sim i$的数所能组合出来的状态为$j$，那么有：</p><script type="math/tex; mode=display">dp[i][j \oplus st[i]]=dp[i-1][j \oplus st[i]]+dp[i-1][j]*2^{cnt[i]-1},\\dp[i][j]=dp[i-1][j]+dp[i-1][j]*2^{cnt[i]-1}, \\dp[0][0]=1</script><p>为什么是$2^{cnt[i]-1}$,因为第一个式子$j$被改变了，只需要奇数个数$i$即可，那么选奇数个的情况实际上就是二项式展开的奇数项之和，刚好是所有情况的一般，偶数项同理，因此两个式子虽然后一项是一样的，但是意义上不一样。最后答案减去一个都不选的方案即可。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> st[N], cnt[<span class="number">71</span>], POW[N];</span><br><span class="line">LL dp[<span class="number">2</span>][(<span class="number">1</span> &lt;&lt; <span class="number">19</span>) + <span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= <span class="number">70</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (prime(i))</span><br><span class="line">            P.push_back(i);</span><br><span class="line">    POW[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        POW[i] = POW[i - <span class="number">1</span>] * <span class="number">2L</span>L % mod;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">70</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = i;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">19</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % P[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (x % P[j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++up;</span><br><span class="line">                    x /= P[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (up &amp; <span class="number">1</span>)</span><br><span class="line">                    st[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        ++cnt[x];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">70</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(dp[cur], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!cnt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; <span class="number">19</span>); ++j)</span><br><span class="line">                dp[cur][j] = dp[pre][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; <span class="number">19</span>); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[cur][j ^ st[i]] = (dp[cur][j ^ st[i]] + dp[pre][j] * POW[cnt[i] - <span class="number">1</span>] % mod) % mod;</span><br><span class="line">                dp[cur][j] = (dp[cur][j] + dp[pre][j] * POW[cnt[i] - <span class="number">1</span>] % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(cur, pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, (dp[pre][<span class="number">0</span>] - <span class="number">1L</span>L + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-String-Mark"><a href="#D-String-Mark" class="headerlink" title="D.String Mark"></a><a href="http://codeforces.com/contest/895/problem/D" target="_blank" rel="noopener">D.String Mark</a></h1><p>题意就是给你字符串$a$和$b$，求用$a$的重排列中字典序严格大于$a$但小于$b$的方案数。<br>如果我们可以写一个函数$F(s)$仅计算出小于某个字符串的方案数的话，那么答案就是$F(b)-F(a)-1$。<br>那么可以这样按位考虑：首先令前$i$个字符与$s$相等，然后后续的字符显然就是剩下的可重集的全排列，设这个可重集大小为$n$，每一个元素的个数为$s_i$，其方案数为</p><script type="math/tex; mode=display">{n!} \over {\prod{s_i!} }</script><p>那么这样固定好之后，把方案数加上这个数值，然后将当前位置的字符置为跟目标串该位置一样的字符，即从可重集中去掉该字符的一个贡献表示该字符已经被使用，然后继续考虑下一个位置。<br>若当前位置已经不能和目标串的位置“对齐”时，说明后面的字符的全排列已经包含了所有剩下的情况了， 不需要再计算了。<br>可以发现枚举位置、枚举小于当前目标串的字符、对可重集的求连乘操作，这样做的复杂度是$n*k^2$的，基本上是超时的，但是显然可以发现求连乘的操作可以预处理优化成$O(1)$获得，因为每一次我们都只会更新一个$cnt[j]$，因此先预先获得$<br>1 \over {\prod{s_i!} }$的模意义下的值，由于每一次分母中的一项要变，那么直接乘上原来该项的值，再“除以”该项现在的值就可以了，其中除法均用逆元代替。<br>最后这里还学习到了一个线性求阶乘逆元的方法，先预处理出阶乘，然后计算逆元的最后一项，再逆序地乘得到逆元的每一项，这是显然的，因为</p><script type="math/tex; mode=display">{1 \over {(i+1)!}} * (i+1) = {1 \over {i!}}</script><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s1[N], s2[N];</span><br><span class="line"><span class="keyword">int</span> fac[N], invfac[N], cnt[<span class="number">26</span>], buc[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (LL)r * a % mod;</span><br><span class="line">        a = (LL)a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> t[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(cnt, buc, <span class="keyword">sizeof</span>(buc));</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    LL down = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        down = (LL)down * invfac[cnt[i]] % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t[i] - <span class="string">'a'</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[j])</span><br><span class="line">            &#123;</span><br><span class="line">                --cnt[j];</span><br><span class="line">                LL temp = (((LL)down * fac[len - <span class="number">1</span> - i]) % mod) * (((LL)fac[cnt[j] + <span class="number">1</span>] * invfac[cnt[j]]) % mod) % mod;</span><br><span class="line">                ans = (ans + temp) % mod;</span><br><span class="line">                ++cnt[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[t[i] - <span class="string">'a'</span>])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        --cnt[t[i] - <span class="string">'a'</span>];</span><br><span class="line">        down = (LL)down * fac[cnt[t[i] - <span class="string">'a'</span>] + <span class="number">1</span>] % mod * invfac[cnt[t[i] - <span class="string">'a'</span>]] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        fac[i] = (LL)fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    invfac[N - <span class="number">1</span>] = qpow(fac[N - <span class="number">1</span>], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        invfac[i] = (LL)invfac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s1, s2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            buc[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s1);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ++buc[s1[i] - <span class="string">'a'</span>];</span><br><span class="line">        LL A = calc(s1, s2, len);</span><br><span class="line">        LL B = calc(s1, s1, len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, (LL)(A - B - <span class="number">1L</span>L + mod) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Eyes-Closed"><a href="#E-Eyes-Closed" class="headerlink" title="E.Eyes Closed"></a><a href="http://codeforces.com/contest/895/problem/E" target="_blank" rel="noopener">E.Eyes Closed</a></h1><p>题意就是给你两个操作，一个是随机地交换区间$[l_1,r_1]$和$[l_2,r_2]$中的两个数，另一种就是问你$[l,r]$区间的和的期望值是多少<br>一眼线段树啊，但是写完发现样例都过不去，然后膜了下别人的题解，发现是我把区间的和算在了单个的数值上，错误的做法就是把<strong>当前区间减去当前区间的平均数</strong>，<strong>加上另一个区间的平均数</strong>，因为这样仅仅对该区间成立，对区间内的单独数字不成立，比如1 1000 1000 0 0 0，将$[1,3]$与$[4,6]$区间做一次随机互换操作，那么如果按照我错误的写法，查询$[1,1]$区间的期望值是实际上它变成了一个比较大的负数，然而这是不可能的。因此正确的做法是考虑每一个数的期望变化：区间内的任意一个数都可能被等概率地换出去，不被换出去的概率是$(len_1-1) \over len_1$。<br>即每个数的期望值要要乘以$(len_1-1) \over len_1$，然后对于一个换进来的数，它会被等概率地换到任意一个位置，因此每一个数的期望值还要再加上$sum_2 \over {len_2*len_1}$，最后我们需要维护的就是一个滋瓷区间乘法、区间加法、区间求和的线段树，过程中要随时注意先乘后加的优先级关系。</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r;</span><br><span class="line">    <span class="keyword">double</span> mul, add, s;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].s = T[LC(k)].s + T[RC(k)].s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(T[k].mul - <span class="number">1.0</span>) &gt;= eps)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].add *= T[k].mul;</span><br><span class="line">        T[LC(k)].s *= T[k].mul;</span><br><span class="line">        T[LC(k)].mul *= T[k].mul;</span><br><span class="line">        T[RC(k)].add *= T[k].mul;</span><br><span class="line">        T[RC(k)].s *= T[k].mul;</span><br><span class="line">        T[RC(k)].mul *= T[k].mul;</span><br><span class="line">        T[k].mul = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(T[k].add) &gt;= eps)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].add += T[k].add;</span><br><span class="line">        T[LC(k)].s += T[k].add * T[LC(k)].len();</span><br><span class="line">        T[RC(k)].add += T[k].add;</span><br><span class="line">        T[RC(k)].s += T[k].add * T[RC(k)].len();</span><br><span class="line">        T[k].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    T[k].add = <span class="number">0</span>;</span><br><span class="line">    T[k].mul = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        T[k].s = arr[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        build(LC(k), l, T[k].mid);</span><br><span class="line">        build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">double</span> mul, <span class="keyword">double</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].add *= mul;</span><br><span class="line">        T[k].s *= mul;</span><br><span class="line">        T[k].mul *= mul;</span><br><span class="line">        T[k].add += v;</span><br><span class="line">        T[k].s += T[k].len() * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), l, r, mul, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; T[k].mid)</span><br><span class="line">            update(RC(k), l, r, mul, v);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> T[k].s;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">double</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            s += query(LC(k), l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; T[k].mid)</span><br><span class="line">            s += query(RC(k), l, r);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, arr + i);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ops, l1, r1;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ops, &amp;l1, &amp;r1);</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l2, r2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l2, &amp;r2);</span><br><span class="line">            <span class="keyword">double</span> len1 = r1 - l1 + <span class="number">1</span>, len2 = r2 - l2 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">double</span> av1 = query(<span class="number">1</span>, l1, r1) / len1, av2 = query(<span class="number">1</span>, l2, r2) / len2;</span><br><span class="line">            update(<span class="number">1</span>, l1, r1, (len1 - <span class="number">1</span>) / len1, av2 / len1);</span><br><span class="line">            update(<span class="number">1</span>, l2, r2, (len2 - <span class="number">1</span>) / len2, av1 / len2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.7f\n"</span>, query(<span class="number">1</span>, l1, r1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> DP </tag>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Educational #33 题解</title>
      <link href="/2017/11/27/CF-Educational-33-%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/11/27/CF-Educational-33-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Chess-For-Three"><a href="#A-Chess-For-Three" class="headerlink" title="A.Chess For Three"></a><a href="http://codeforces.com/contest/893/problem/A" target="_blank" rel="noopener">A.Chess For Three</a></h1><p>题意就是三个人不停地下棋，输了的那个人下去观战，观战的人上来和赢家继续下，按照时间顺序给定一系列的赢家和输家，问是否合法。<br>可以发现某一局的赢家只可能是上一局的观战者或者上一局的赢家，某一局的输家也只可能是上一局的观战者或者上一局的赢家，由于规定了第一局对战的两个人，因此每一局都可以由上一局的记录的到，那就用三个变量模拟记录一下每一局的三种人，看是否出现矛盾即可。<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">1</span>] == <span class="number">3</span>)</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> win, lose, sp;</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            win = <span class="number">1</span>;</span><br><span class="line">            lose = <span class="number">2</span>;</span><br><span class="line">            sp = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">1</span>] == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            win = <span class="number">2</span>;</span><br><span class="line">            lose  = <span class="number">1</span>;</span><br><span class="line">            sp = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == win)</span><br><span class="line">            &#123;</span><br><span class="line">                win = win;</span><br><span class="line">                lose = sp;</span><br><span class="line">                sp = <span class="number">6</span> - win - lose;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] == sp)</span><br><span class="line">            &#123;</span><br><span class="line">                lose = win;</span><br><span class="line">                win = arr[i];</span><br><span class="line">                sp = <span class="number">6</span> - win - lose;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(flag ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Beautiful-Divisors"><a href="#B-Beautiful-Divisors" class="headerlink" title="B.Beautiful Divisors"></a><a href="http://codeforces.com/contest/893/problem/B" target="_blank" rel="noopener">B.Beautiful Divisors</a></h1><p>题意就是给你一个数找出这个数最大的美丽因数，由于美丽因数仅由低位的连续$k$个$0$加上高位的连续$k+1$个$1$组成，那么直接预处理出这些美丽因数，最多也就几十个吧，每次输入逆序找到第一个能被整除的因数就是答案了，当然答案是一定存在的因为$1$总是任意一个正整数的因数</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        LL one = <span class="number">0</span>;</span><br><span class="line">        one = (<span class="number">1L</span>L &lt;&lt; (i + <span class="number">1</span>)) - <span class="number">1L</span>L;</span><br><span class="line">        one &lt;&lt;= i;</span><br><span class="line">        arr[i] = one;</span><br><span class="line">    &#125;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">14</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % arr[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, arr[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Rumor"><a href="#C-Rumor" class="headerlink" title="C.Rumor"></a><a href="http://codeforces.com/contest/893/problem/C" target="_blank" rel="noopener">C.Rumor</a></h1><p>题意就是让你去传播言论，使得最终所有人都知道这个言论，每一个人要花一定价格才能让他去传播，但是一个人被传播之后会无偿地向它认识的人传播，因此可能只需要找到其中几个人传播就可以达到最终目的了，求最后的花费最小。很容易想到对这个朋友关系图求强连通分量，把每个$SCC$中花费最小的拿出来加到答案上即可，但是这个样子码量大。所以既然是无向图干嘛不考虑用并查集呢，把认识的人合并起来，最终一个集合就是代表了一个$SCC$，拿每一个点的花费去更新他所在集合的最小花费，最后把所有集合的最小花费加起来就是答案了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> price[N], pre[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre[n] == <span class="number">0</span> ? n : pre[n] = Find(pre[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = Find(a), b = Find(b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">        pre[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; price[i];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        Merge(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = Find(i);</span><br><span class="line">        price[f] = min(price[i], price[f]);</span><br><span class="line">    &#125;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = Find(i);</span><br><span class="line">        <span class="keyword">if</span> (vis[f])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        sum += (LL)price[f];</span><br><span class="line">        vis[f] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Credit-Card"><a href="#D-Credit-Card" class="headerlink" title="D.Credit Card"></a><a href="http://codeforces.com/contest/893/problem/D" target="_blank" rel="noopener">D.Credit Card</a></h1><p>题意就是你有一张银行卡，有$N$天的晚间操作记录，如果操作记录大于$0$代表你向里面存款，小于$0$就是取款，等于$0$就是检查余额，要求是每当检查余额时存款不能为负数否则就输出$-1$，如果某一时刻存的钱大于$d$，也将输出$-1$，另外你在任意一天的早上可以直接去银行存任意多的钱，求尽量不出现$-1$时最少去银行存款的次数。显然任意一天的早上去存款实际上还不如在检查余额那天的早上去存款，然后考虑存款的影响， 假如我在第$x$天早上存款了$k$元，那么$[x,n]$天都会受到影响，即剩下那些天的余额一定会增加$k$，那么我只要在检查余额时如果发现余额为负数，那么一定要存款，贪心地存入对剩下的日子均没有影响的最大钱数，然后看这样存进去之后是不是还是负数，如果这天还是负数，说明只能输出$-1$，否则继续遍历更新，所以这里需要用线段树更新和查询区间的最大值。</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">LL arr[N], pre[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r;</span><br><span class="line">    LL mx, ad;</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].mx = max(T[LC(k)].mx, T[RC(k)].mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].ad)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].ad += T[k].ad;</span><br><span class="line">        T[RC(k)].ad += T[k].ad;</span><br><span class="line">        T[LC(k)].mx += T[k].ad;</span><br><span class="line">        T[RC(k)].mx += T[k].ad;</span><br><span class="line">        T[k].ad = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    T[k].ad = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        T[k].mx = pre[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        build(LC(k), l, T[k].mid);</span><br><span class="line">        build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].ad += v;</span><br><span class="line">        T[k].mx += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; T[k].mid)</span><br><span class="line">            update(RC(k), l, r, v);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> T[k].mx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= T[k].mid)</span><br><span class="line">            <span class="keyword">return</span> query(LC(k), l, r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; T[k].mid)</span><br><span class="line">            <span class="keyword">return</span> query(RC(k), l, r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> max(query(LC(k), l, T[k].mid), query(RC(k), T[k].mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    LL d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>, &amp;n, &amp;d);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;arr[i]);</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">        <span class="keyword">if</span> (pre[i] &gt; d)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pre[i] = query(<span class="number">1</span>, i, i);</span><br><span class="line">            <span class="keyword">if</span> (pre[i] &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LL sufmax = query(<span class="number">1</span>, i, n);</span><br><span class="line">                LL delta = d - sufmax;</span><br><span class="line">                update(<span class="number">1</span>, i, n, delta);</span><br><span class="line">                <span class="keyword">if</span> (pre[i] + delta &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ++day;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Counting-Arrays"><a href="#E-Counting-Arrays" class="headerlink" title="E.Counting Arrays"></a><a href="http://codeforces.com/contest/893/problem/E" target="_blank" rel="noopener">E.Counting Arrays</a></h1><p>把一个数$x$恰好分解成$y$个数的乘积，问这样的$y$个数组成的序列有几种。由于是乘积的问题，我们可以先把$x$因数分解（准确的说应该叫质数分解），假设第$i$个因数为$a<em>i$，它在$x$中所占的指数为$b_i$，那么所要做的就是把这个$b_i$个$a_i$分到$y$个位置中去，问题就变成了将$b_i$个<strong>相同</strong>物品装入$y$的箱子，且<strong>允许出现空箱</strong>，那么这个因数$a_i$贡献的答案就是$C</em>{b<em>i+y-1}^{y-1}$（由于答案与补集的方案数等价，可以优化成$C</em>{b<em>i+y-1}^{b_i+y-1-(y-1)}=C</em>{b<em>i+y-1}^{b_i}$），那么把每一个因数按此方法求出来的方案数相乘就是$y$项全为正数的答案，但是题目说还可以用负数，那就是从$y$项中选出偶数项，在其前面添加负号，那这样的贡献就是$C</em>{y}^{0}+C<em>{y}^{2}+C</em>{y}^{4}+C_{y}^{6}$，即二项式展开的偶数项求和，用定理可以直接得到答案为$2^{y-1}$，最后再乘上这个数即可。注意过程中要即时取模，或者用快速乘法，否则很容易爆$long\ long$</p><h2 id="树套树代码："><a href="#树套树代码：" class="headerlink" title="树套树代码："></a>树套树代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">64</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL fac[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">qpow</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = r * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">mul</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (r + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">rev</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qpow(x, mod - <span class="number">2L</span>L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul(mul(fac[n], rev(fac[m])), rev(fac[n - m]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * (LL)i % mod;</span><br><span class="line">    LL x, y;</span><br><span class="line">    <span class="keyword">int</span> TC;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;x, &amp;y);</span><br><span class="line">        LL ans = qpow(<span class="number">2L</span>L, y - <span class="number">1L</span>L);</span><br><span class="line">        <span class="keyword">for</span> (LL i = <span class="number">2</span>; i * i &lt;= x; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LL cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                    x /= i;</span><br><span class="line">                &#125;</span><br><span class="line">                ans = mul(ans, C(cnt + y - <span class="number">1</span>, cnt));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">            ans = mul(ans, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Subtree-Minimum-Query"><a href="#F-Subtree-Minimum-Query" class="headerlink" title="F.Subtree Minimum Query"></a><a href="http://codeforces.com/contest/893/problem/F" target="_blank" rel="noopener">F.Subtree Minimum Query</a></h1><p>题意就是给你一棵树，树边长度均为$1$，每个点均有权值，询问你某一个节点的子树中到这个节点的距离不超过$k$的这些节点集合中，最小权值是多少。询问强制在线<br>思路有一点，完全不知道代码如何实现，一开始用$BFS$、$DFS$序，（然后发现这样显然是错的），真的不会了……搜了波题解，发现原来是线段树套线段树（以前想学苦于智商太低想象力又不够好看不懂XD），然后就是照着人家的代码临摹一发，粗略地地理解一下，一维显然是按照$DFS$序开一个静态线段树，记这个静态线段树的下标为$p$p，以$root[p]$为根，按照节点的深度建立动态开点的线段树，最后询问就是查询一维在$[L[u], R[u]]$，二维在$[dep[u], dep[u] + k]$范围内的最小值。</p><hr><p>早上起来突然发现如果我们用$DFS$序当第一维的关键字，到根节点的距离当第二维的关键字，当这玩意儿不就是个$KD-tree$的静态建树+二维矩阵最小值查询的模板题吗，而且空间复杂度才$O(n)$，赶紧码了一发，结果时间居然跟树套树几乎一样……只能说666了</p><h2 id="树套树代码：-1"><a href="#树套树代码：-1" class="headerlink" title="树套树代码："></a>树套树代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n, rt, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> G &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;E[N];</span><br><span class="line">    <span class="keyword">int</span> L[N], R[N], ts;</span><br><span class="line">    <span class="keyword">int</span> ver[N], dis[N], val[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        E[s].push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">const</span> <span class="keyword">int</span> &amp;dep)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[u] = ++ts;</span><br><span class="line">        ver[ts] = u;</span><br><span class="line">        dis[u] = dep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">            <span class="keyword">if</span> (v != f)</span><br><span class="line">                dfs(v, u, dep + <span class="number">1</span>);</span><br><span class="line">        R[u] = ts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SG &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> ls, rs, v;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _v)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ls = rs = <span class="number">0</span>;</span><br><span class="line">            v = _v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; T[<span class="number">10000010</span>];</span><br><span class="line">    <span class="keyword">int</span> root[N &lt;&lt; <span class="number">2</span>], sz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!k)</span><br><span class="line">            T[k = ++sz].init(v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T[k].v = min(T[k].v, v);</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            update(T[k].ls, l, mid, x, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update(T[k].rs, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        update(root[k], <span class="number">0</span>, n - <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            build(LC(k), l, mid, pos, x, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            build(RC(k), mid + <span class="number">1</span>, r, pos, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!k)</span><br><span class="line">            <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> T[k].v;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> query(T[k].ls, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(T[k].rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> min(query(T[k].ls, l, mid, ql, mid), query(T[k].rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> dl, <span class="keyword">int</span> dr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">            ans = min(ans, query(root[k], <span class="number">0</span>, n - <span class="number">1</span>, dl, dr));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">            <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">                query(LC(k), l, mid, ql, qr, dl, dr);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">                query(RC(k), mid + <span class="number">1</span>, r, ql, qr, dl, dr);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                query(LC(k), l, mid, ql, mid, dl, dr), query(RC(k), mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, dl, dr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;rt);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G::val[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        G::add(x, y);</span><br><span class="line">        G::add(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    G::dfs(rt, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = G::ver[i];</span><br><span class="line">        SG::build(<span class="number">1</span>, <span class="number">1</span>, n, i, G::dis[u], G::val[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, k, p, q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;q);</span><br><span class="line">        x = (p + ans) % n + <span class="number">1</span>;</span><br><span class="line">        k = (q + ans) % n;</span><br><span class="line">        ans = INF;</span><br><span class="line">        SG::query(<span class="number">1</span>, <span class="number">1</span>, n, G::L[x], G::R[x], G::dis[x], min(G::dis[x] + k, n - <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KDtree-代码"><a href="#KDtree-代码" class="headerlink" title="$KDtree$代码"></a>$KDtree$代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n, rt, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> G &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;E[N];</span><br><span class="line">    <span class="keyword">int</span> L[N], R[N], ts;</span><br><span class="line">    <span class="keyword">int</span> ver[N], dis[N], val[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        E[s].push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">const</span> <span class="keyword">int</span> &amp;dep)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[u] = ++ts;</span><br><span class="line">        ver[ts] = u;</span><br><span class="line">        dis[u] = dep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : E[u])</span><br><span class="line">            <span class="keyword">if</span> (v != f)</span><br><span class="line">                dfs(v, u, dep + <span class="number">1</span>);</span><br><span class="line">        R[u] = ts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SG &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> ls, rs;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>], v, Min;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ls = rs = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; T[N];</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">2</span>], v;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; node[N];</span><br><span class="line">    <span class="keyword">int</span> rt, sz, _x1, _y1, _x2, _y2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rt = sz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ls = T[k].ls, rs = T[k].rs;</span><br><span class="line">        T[k].Min = T[k].v;</span><br><span class="line">        <span class="keyword">if</span> (ls)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                T[k].mn[i] = min(T[k].mn[i], T[ls].mn[i]);</span><br><span class="line">                T[k].mx[i] = max(T[k].mx[i], T[ls].mx[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            T[k].Min = min(T[k].Min, T[ls].Min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                T[k].mn[i] = min(T[k].mn[i], T[rs].mn[i]);</span><br><span class="line">                T[k].mx[i] = max(T[k].mx[i], T[rs].mx[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            T[k].Min = min(T[k].Min, T[rs].Min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        idx = dim;</span><br><span class="line">        nth_element(node + l, node + mid, node + r + <span class="number">1</span>);</span><br><span class="line">        T[k = ++sz].init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            T[k].d[i] = T[k].mn[i] = T[k].mx[i] = node[mid].d[i];</span><br><span class="line">        T[k].Min = T[k].v = node[mid].v;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">            build(T[k].ls, l, mid - <span class="number">1</span>, dim ^ <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">            build(T[k].rs, mid + <span class="number">1</span>, r, dim ^ <span class="number">1</span>);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inMat</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _x1 &lt;= x &amp;&amp; xx &lt;= _x2 &amp;&amp; _y1 &lt;= y &amp;&amp; yy &lt;= _y2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">outmat</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _x2 &lt; x || xx &lt; _x1 || _y2 &lt; y || yy &lt; _y1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inMat(T[k].mn[<span class="number">0</span>], T[k].mn[<span class="number">1</span>], T[k].mx[<span class="number">0</span>], T[k].mx[<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">return</span> T[k].Min;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = INF;</span><br><span class="line">            <span class="keyword">if</span> (inMat(T[k].d[<span class="number">0</span>], T[k].d[<span class="number">1</span>], T[k].d[<span class="number">0</span>], T[k].d[<span class="number">1</span>]))</span><br><span class="line">                ret = min(ret, T[k].v);</span><br><span class="line">            <span class="keyword">int</span> l = T[k].ls, r = T[k].rs;</span><br><span class="line">            <span class="keyword">if</span> (l &amp;&amp; !outmat(T[l].mn[<span class="number">0</span>], T[l].mn[<span class="number">1</span>], T[l].mx[<span class="number">0</span>], T[l].mx[<span class="number">1</span>]))</span><br><span class="line">                ret = min(ret, query(l));</span><br><span class="line">            <span class="keyword">if</span> (r &amp;&amp; !outmat(T[r].mn[<span class="number">0</span>], T[r].mn[<span class="number">1</span>], T[r].mx[<span class="number">0</span>], T[r].mx[<span class="number">1</span>]))</span><br><span class="line">                ret = min(ret, query(r));</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;rt);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G::val[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        G::add(x, y);</span><br><span class="line">        G::add(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    G::dfs(rt, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        SG::node[i].d[<span class="number">0</span>] = G::L[i];</span><br><span class="line">        SG::node[i].d[<span class="number">1</span>] = G::dis[i];</span><br><span class="line">        SG::node[i].v = G::val[i];</span><br><span class="line">    &#125;</span><br><span class="line">    SG::build(SG::rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, k, p, q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;q);</span><br><span class="line">        x = (p + ans) % n + <span class="number">1</span>;</span><br><span class="line">        k = (q + ans) % n;</span><br><span class="line">        SG::_x1 = G::L[x], SG::_x2 = G::R[x], SG::_y1 = G::dis[x], SG::_y2 = min(G::dis[x] + k, n - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = SG::query(SG::rt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 逆元 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wannafly挑战赛4 D 树的距离（DFS序+离线+树状数组）</title>
      <link href="/2017/11/25/Wannafly%E6%8C%91%E6%88%98%E8%B5%9B4-D/"/>
      <url>/2017/11/25/Wannafly%E6%8C%91%E6%88%98%E8%B5%9B4-D/</url>
      
        <content type="html"><![CDATA[<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 262144K，其他语言524288K<br>64bit IO Format: %lld<br><a id="more"></a><br>题目描述<br>wyf非常喜欢树。一棵有根数树上有N个节点，1号点是他的根，每条边都有一个距离，而wyf是个爱问奇怪问题的熊孩子，他想知道对于某个点x,以x为根的子树上，所有与x距离大于等于k的点与x的距离之和。<br>输入描述:<br>第一行一个正整数N<br>接下来N-1描述这棵树，每行两个数第i行两个数p和D表示树上有一条p到i+1长度为D的边。(p&lt;=i)<br>下面一行一个正整数Q表示wyf的询问次数。<br>接下来Q行每行两个正整数x和k。 (1&lt;=N,Q&lt;=2x105,1&lt;=D,K&lt;=106)<br>输出描述:<br>对于每次询问x,k输出以x为根的子树上，所有与x距离大于等于k的点与x的距离之和。(若不存在这样的点，则输出应为0)<br>示例1<br>输入</p><p>3<br>1 2<br>1 3<br>2<br>1 3<br>1 2<br>输出</p><p>3<br>5</p><p>题目链接：<a href="https://www.nowcoder.com/acm/contest/35/D" target="_blank" rel="noopener">Wannafly挑战赛4 D</a><br>一开始感觉很像CF最近的某道题，然后按照那个思路预处理出每一个节点为根的子树下的所有距离及其前缀和，然后在线二分地回答，然而无限MLE……，后来看了别人的代码发现是我想多了，重新想了下题目的意思，实际上就是叫你求DFS序后某一个节点对应区间内大于等于询某长度的值那些数的和，显然只要对所有节点按照到树根的距离排序从大到小排序，对询问也按询问距离从大到小排序，然后离线做一遍树状数组更新答案即可，当然它询问的值需要变一下，比如询问的二元组是${u,k}$，也就是说某一个点到$u$的距离大于等于$k$，这样显然不太好求，由于是一棵树，两点之间路径唯一，因此我们要求的是这颗$u$的子树中的点到根节点的距离大于等于$dis[u]+k$的那些点。写到凌晨各种WA，早上起来重写一遍就AC了……神奇……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    LL d;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, LL _d): to(_to), nxt(_nxt), d(_d) &#123;&#125;</span><br><span class="line">&#125; E[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL T[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, LL v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k] += v;</span><br><span class="line">            k += (k &amp; -k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += T[k];</span><br><span class="line">            k -= (k &amp; -k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum(r) - sum(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Dis, Man;</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> L[N], R[N], ts;</span><br><span class="line">LL dis[N], ans[N];</span><br><span class="line">pair&lt;LL, <span class="keyword">int</span>&gt;arr[N];</span><br><span class="line">pair&lt;LL, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;Q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    CLR(vis, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[u] = d;</span><br><span class="line">    L[u] = ++ts;</span><br><span class="line">    arr[u].fi = d;</span><br><span class="line">    arr[u].se = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        dfs(v, d + E[i].d);</span><br><span class="line">    &#125;</span><br><span class="line">    R[u] = ts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, LL d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s], d);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        LL d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;p, &amp;d);</span><br><span class="line">        add(p, i + <span class="number">1</span>, d);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">    sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n, [](<span class="keyword">const</span> pair&lt;LL, <span class="keyword">int</span>&gt; &amp;a, <span class="keyword">const</span> pair&lt;LL, <span class="keyword">int</span>&gt; &amp;b)&#123;<span class="keyword">return</span> a.fi &gt; b.fi;&#125;);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;Q[i].se.fi, &amp;Q[i].fi);</span><br><span class="line">        Q[i].fi += dis[Q[i].se.fi];</span><br><span class="line">        Q[i].se.se = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Q, Q + q, [](<span class="keyword">const</span> pair&lt;LL, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &amp;a, <span class="keyword">const</span> pair&lt;LL, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &amp;b)&#123;<span class="keyword">return</span> a.fi &gt; b.fi;&#125;);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur &lt;= n &amp;&amp; arr[cur].fi &gt;= Q[i].fi)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = arr[cur].se;</span><br><span class="line">            Dis.add(L[pos], arr[cur].fi);</span><br><span class="line">            Man.add(L[pos], <span class="number">1L</span>L);</span><br><span class="line">            ++cur;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[Q[i].se.se] = Dis.query(L[Q[i].se.fi], R[Q[i].se.fi]) - dis[Q[i].se.fi] * Man.query(L[Q[i].se.fi], R[Q[i].se.fi]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 树状数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 离线 </tag>
            
            <tag> DFS序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NYOJ 104 最大和（最大子矩阵经典问题）</title>
      <link href="/2017/11/23/NYOJ-104/"/>
      <url>/2017/11/23/NYOJ-104/</url>
      
        <content type="html"><![CDATA[<p>最大和<br>时间限制：1000 ms  |  内存限制：65535 KB<br>难度：5<br><a id="more"></a><br>描述<br>给定一个由整数组成二维矩阵（r*c），现在需要找出它的一个子矩阵，使得这个子矩阵内的所有元素之和最大，并把这个子矩阵称为最大子矩阵。<br>例子：<br>\begin{array}{c|lcr}<br>&amp;0 &amp;-2 &amp;-7 &amp;0 \<br>&amp;9 &amp;2 &amp;-6 &amp;2  \<br>&amp;-4 &amp;1 &amp;-4 &amp;1 \<br>&amp;-1 &amp;8 &amp;0 &amp;-2 \<br>\end{array}<br>其最大子矩阵为：<br>\begin{array}{c|lcr}<br>&amp;9 &amp;2  \<br>&amp;-4 &amp;1 \<br>&amp;-1 &amp;8 \<br>\end{array}<br>其元素总和为15。 </p><p>输入<br>第一行输入一个整数n（0&lt;n&lt;=100）,表示有n组测试数据；<br>每组测试数据：<br>第一行有两个的整数r，c（0&lt;r,c&lt;=100），r、c分别代表矩阵的行和列；<br>随后有r行，每行有c个整数；<br>输出<br>输出矩阵的最大子矩阵的元素之和。<br>样例输入<br>1<br>4 4<br>0 -2 -7 0<br>9 2 -6 2<br>-4 1 -4 1<br>-1 8 0 -2<br>样例输出<br>15</p><p>题目链接：<a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=104" target="_blank" rel="noopener">NYOJ 104</a><br>首先这题很容易想到作一遍二维前缀和，然后枚举对角线差分更新答案，显然复杂度是$O(n^4)$的，实际上我们可以用另外的方法做，考虑答案的矩阵肯定是一个连续的列向量构成，那么我们可以枚举这个列向量的顶端和底端，将每一个列向量压缩求和成一项，然后再对$m$个列向量的和做一遍$(n)$的$DP$，那么复杂度就变成$O(n^3)$了，最后似乎子矩阵不能为空，因此如果都是负数就输出一个最大的负数。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> G[N][N], arr[N], dp[N], colsum[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>)f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[l - <span class="number">1</span>] = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        dp[i] = max(dp[i - <span class="number">1</span>] + a[i], a[i]);</span><br><span class="line">    <span class="keyword">return</span> *max_element(dp + l, dp + r + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, n, m, i, j;</span><br><span class="line">    TC = read();</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        n = read();</span><br><span class="line">        m = read();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                G[i][j] = read();</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                colsum[i][j] = colsum[i - <span class="number">1</span>][j] + G[i][j];<span class="comment">//用于差分求列和的前缀数组</span></span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k)<span class="comment">//压缩的和放到arr数组里</span></span><br><span class="line">                &#123;</span><br><span class="line">                    arr[k] = colsum[j][k] - colsum[i - <span class="number">1</span>][k];</span><br><span class="line">                &#125;</span><br><span class="line">                ans = max(ans, solve(arr, <span class="number">1</span>, m));<span class="comment">//对arr做一遍dp</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 3494 Largest Submatrix of All 1’s（单调栈入门题）</title>
      <link href="/2017/11/23/POJ-3494/"/>
      <url>/2017/11/23/POJ-3494/</url>
      
        <content type="html"><![CDATA[<p>Largest Submatrix of All 1’s<br>Time Limit: 5000MS      Memory Limit: 131072K<br>Total Submissions: 7390     Accepted: 2664<br>Case Time Limit: 2000MS<br>Description<br><a id="more"></a><br>Given a m-by-n (0,1)-matrix, of all its submatrices of all 1’s which is the largest? By largest we mean that the submatrix has the most elements.</p><p>Input</p><p>The input contains multiple test cases. Each test case begins with m and n (1 ≤ m, n ≤ 2000) on line. Then come the elements of a (0,1)-matrix in row-major order on m lines each with n numbers. The input ends once EOF is met.</p><p>Output</p><p>For each test case, output one line containing the number of elements of the largest submatrix of all 1’s. If the given matrix is of all 0’s, output 0.</p><p>Sample Input</p><p>2 2<br>0 0<br>0 0<br>4 4<br>0 0 0 0<br>0 1 1 0<br>0 1 1 0<br>0 0 0 0<br>Sample Output</p><p>0<br>4</p><p>题目链接：<a href="http://poj.org/problem?id=3494" target="_blank" rel="noopener">POJ 3494</a><br>由于是最大全$1$矩阵，其实跟直方图的最大矩形是一样的，预处理出每一个点向上连续的最大高度，然后对每一行做一次最大面积直方图算法即可。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> G[N][N], H[N][N];</span><br><span class="line"><span class="keyword">int</span> L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty() &amp;&amp; arr[st.top()] &gt;= arr[i])</span><br><span class="line">            st.pop();</span><br><span class="line">        L[i] = st.empty() ? l : st.top() + <span class="number">1</span>;</span><br><span class="line">        st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!st.empty())</span><br><span class="line">        st.pop();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= l; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty() &amp;&amp; arr[i] &lt;= arr[st.top()])</span><br><span class="line">            st.pop();</span><br><span class="line">        R[i] = st.empty() ? r : st.top() - <span class="number">1</span>;</span><br><span class="line">        ret = max(ret, arr[i] * (R[i] - L[i] + <span class="number">1</span>));</span><br><span class="line">        st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;G[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (G[i][j])</span><br><span class="line">                    ++sum;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sum = <span class="number">0</span>;</span><br><span class="line">                H[j][i] = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            ans = max(ans, solve(H[i], <span class="number">1</span>, m));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 优化 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 1861 Book 书架（splay插入和删除等操作）</title>
      <link href="/2017/11/23/BZOJ-1861/"/>
      <url>/2017/11/23/BZOJ-1861/</url>
      
        <content type="html"><![CDATA[<p>1861: [Zjoi2006]Book 书架</p><p>Time Limit: 4 Sec  Memory Limit: 64 MB<br>Submit: 1841  Solved: 1049<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>小T有一个很大的书柜。这个书柜的构造有些独特，即书柜里的书是从上至下堆放成一列。她用1到n的正整数给每本书都编了号。 小T在看书的时候，每次取出一本书，看完后放回书柜然后再拿下一本。由于这些书太有吸引力了，所以她看完后常常会忘记原来是放在书柜的什么位置。不过小T的记忆力是非常好的，所以每次放书的时候至少能够将那本书放在拿出来时的位置附近，比如说她拿的时候这本书上面有X本书，那么放回去时这本书上面就只可能有X-1、X或X+1本书。 当然也有特殊情况，比如在看书的时候突然电话响了或者有朋友来访。这时候粗心的小T会随手把书放在书柜里所有书的最上面或者最下面，然后转身离开。 久而久之，小T的书柜里的书的顺序就会越来越乱，找到特定的编号的书就变得越来越困难。于是她想请你帮她编写一个图书管理程序，处理她看书时的一些操作，以及回答她的两个提问：(1)编号为X的书在书柜的什么位置；(2)从上到下第i本书的编号是多少。</p><p>Input</p><p>第一行有两个数n，m，分别表示书的个数以及命令的条数；第二行为n个正整数：第i个数表示初始时从上至下第i个位置放置的书的编号；第三行到m+2行，每行一条命令。命令有5种形式： 1． Top S——表示把编号为S的书房在最上面。 2． Bottom S——表示把编号为S的书房在最下面。 3． Insert S T——T∈{-1，0，1}，若编号为S的书上面有X本书，则这条命令表示把这本书放回去后它的上面有X+T本书； 4． Ask S——询问编号为S的书的上面目前有多少本书。 5． Query S——询问从上面数起的第S本书的编号。</p><p>Output</p><p>对于每一条Ask或Query语句你应该输出一行，一个数，代表询问的答案。</p><p>Sample Input</p><p>10 10 </p><p>1 3 2 7 5 8 10 4 9 6</p><p>Query 3 </p><p>Top 5 </p><p>Ask 6 </p><p>Bottom 3 </p><p>Ask 3 </p><p>Top 6 </p><p>Insert 4 -1 </p><p>Query 5 </p><p>Query 2 </p><p>Ask 2<br>Sample Output</p><p>2</p><p>9</p><p>9</p><p>7</p><p>5</p><p>3<br>HINT</p><p>数据范围</p><p>100%的数据，n,m &lt; = 80000</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1861" target="_blank" rel="noopener">BZOJ 1861</a><br>splay的插入和删除、找第$k$大操作，由于$hzwer$大佬的奇怪的建树和记录点姿势和感觉不太懂，就还是用原来的建树方式了（还是熟悉的配方），由于$pos$数组记录的是编号对应在树上的下标，因此我的代码在建树时才更新$pos$数组而不是预先设定好。其余的操作都是参考大佬的博客，这里的$del$操作有两种，一种是找到要删除节点的前驱和后继然后将前驱点旋转到根，后继点旋转到根的右儿子，然后将后继点的左儿子删除掉即可；第二种是我尝试用之前学的删除的方法，只将要删除的点旋转到根，然后合并以左儿子和右儿子为根的两颗子树，其中涉及到的点用一个数组记录下来，然后按深度从大到小依次$pushup$上去，没想到这样也可以而且速度居然比前面一种快了$300ms$+，好神奇……。<br>最后由于我们插入了两个虚拟节点当做边界点，因此计算排名的时候注意$+1$或$-1$<br>第二种的del操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = Find_kth(rt, k);</span><br><span class="line">    splay(x, rt);</span><br><span class="line">    top = <span class="number">0</span>;<span class="comment">//用top指针和st数组记录需要pushup的点</span></span><br><span class="line">    <span class="keyword">if</span> (T[x].ch[<span class="number">0</span>] * T[x].ch[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt = T[x].ch[<span class="number">0</span>] + T[x].ch[<span class="number">1</span>];</span><br><span class="line">        st[top++] = rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = T[x].ch[<span class="number">1</span>];</span><br><span class="line">        st[top++] = k;</span><br><span class="line">        <span class="keyword">while</span> (T[k].ch[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            k = T[k].ch[<span class="number">0</span>];</span><br><span class="line">            st[top++] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        T[k].ch[<span class="number">0</span>] = T[x].ch[<span class="number">0</span>];</span><br><span class="line">        T[T[x].ch[<span class="number">0</span>]].f = k;</span><br><span class="line">        rt = T[x].ch[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = top - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        pushup(st[i]);</span><br><span class="line">    T[rt].f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">80010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>], sz, f, id;</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz, ID[N], pos[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> f, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].ch[<span class="number">0</span>] = T[k].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    T[k].f = f;</span><br><span class="line">    T[k].id = id;</span><br><span class="line">    T[k].sz = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getson</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> T[T[x].f].ch[<span class="number">1</span>] == x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[x].sz = T[T[x].ch[<span class="number">0</span>]].sz + T[T[x].ch[<span class="number">1</span>]].sz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = T[x].f, ff = T[f].f, l = getson(x), r = l ^ <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (f == k)</span><br><span class="line">        k = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        T[ff].ch[getson(f)] = x;</span><br><span class="line">    T[x].f = ff;</span><br><span class="line">    T[f].ch[l] = T[x].ch[r];</span><br><span class="line">    <span class="keyword">if</span> (T[x].ch[r])</span><br><span class="line">        T[T[x].ch[r]].f = f;</span><br><span class="line">    T[x].ch[r] = f;</span><br><span class="line">    T[f].f = x;</span><br><span class="line">    pushup(f);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = T[x].f;</span><br><span class="line">        <span class="keyword">if</span> (f != k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (getson(x)^getson(f))</span><br><span class="line">                rotate(x, k);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rotate(f, k);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(x, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    newnode(k = ++sz, f, ID[mid]);</span><br><span class="line">    pos[T[k].id] = k;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ch[<span class="number">0</span>], l, mid - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].ch[<span class="number">1</span>], mid + <span class="number">1</span>, r, k);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_kth</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = T[T[x].ch[<span class="number">0</span>]].sz + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == w)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; w)</span><br><span class="line">        <span class="keyword">return</span> Find_kth(T[x].ch[<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">return</span> Find_kth(T[x].ch[<span class="number">1</span>], k - w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = Find_kth(rt, k - <span class="number">1</span>), y = Find_kth(rt, k + <span class="number">1</span>);</span><br><span class="line">    splay(x, rt);</span><br><span class="line">    splay(y, T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> z = T[y].ch[<span class="number">0</span>];</span><br><span class="line">    T[y].ch[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    T[z].f = <span class="number">0</span>;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z = pos[id];</span><br><span class="line">    splay(z, rt);</span><br><span class="line">    <span class="keyword">int</span> ran = T[T[z].ch[<span class="number">0</span>]].sz + <span class="number">1</span>;<span class="comment">//原来的排名</span></span><br><span class="line">    del(ran);</span><br><span class="line">    <span class="keyword">if</span> (val == INF)</span><br><span class="line">        x = Find_kth(rt, n), y = Find_kth(rt, n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == -INF)</span><br><span class="line">        x = Find_kth(rt, <span class="number">1</span>), y = Find_kth(rt, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x = Find_kth(rt, ran + val - <span class="number">1</span>), y = Find_kth(rt, ran + val);</span><br><span class="line">    splay(x, rt);</span><br><span class="line">    splay(y, T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    newnode(z, y, id);</span><br><span class="line">    T[y].ch[<span class="number">0</span>] = z;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, id;</span><br><span class="line">    <span class="keyword">char</span> ops[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ID[i]);</span><br><span class="line">        build(rt, <span class="number">1</span>, n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ops);</span><br><span class="line">            <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'T'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                Move(id, -INF);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'B'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                Move(id, INF);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'I'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> S, T;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S, &amp;T);</span><br><span class="line">                Move(S, T);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'A'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">                splay(pos[id], rt);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T[T[rt].ch[<span class="number">0</span>]].sz - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> S;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;S);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, T[Find_kth(rt, S + <span class="number">1</span>)].id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> splay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 3468 A Simple Problem with Integers（splay区间操作）</title>
      <link href="/2017/11/22/POJ-3468/"/>
      <url>/2017/11/22/POJ-3468/</url>
      
        <content type="html"><![CDATA[<p>A Simple Problem with Integers<br>Time Limit: 5000MS      Memory Limit: 131072K<br>Total Submissions: 121627       Accepted: 37761<br>Case Time Limit: 2000MS<br>Description<br><a id="more"></a><br>You have N integers, A1, A2, … , AN. You need to deal with two kinds of operations. One type of operation is to add some given number to each number in a given interval. The other is to ask for the sum of numbers in a given interval.</p><p>Input</p><p>The first line contains two numbers N and Q. 1 ≤ N,Q ≤ 100000.<br>The second line contains N numbers, the initial values of A1, A2, … , AN. -1000000000 ≤ Ai ≤ 1000000000.<br>Each of the next Q lines represents an operation.<br>“C a b c” means adding c to each of Aa, Aa+1, … , Ab. -10000 ≤ c ≤ 10000.<br>“Q a b” means querying the sum of Aa, Aa+1, … , Ab.</p><p>Output</p><p>You need to answer all Q commands in order. One answer in a line.</p><p>Sample Input</p><p>10 5<br>1 2 3 4 5 6 7 8 9 10<br>Q 4 4<br>Q 1 10<br>Q 2 4<br>C 3 6 3<br>Q 2 4<br>Sample Output</p><p>4<br>55<br>9<br>15<br>Hint</p><p>The sums may exceed the range of 32-bit integers.</p><p>题目链接：<a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">POJ 3468</a><br>$splay$居然还能用来更新区间，某位想到强行$splay$做这种题的大佬太厉害了%%%。<br>一开始我们先预先建立两个点，根节点和根节点的右儿子作为数列的第$0$个数和第$n+1$个数（后面会用到），然后用下标作为关键字，做一遍线段树动态开点建树，该$pushup$的$pushup$，然后就是重点，由于我们有$splay$操作，就把第$l-1$个点$splay$到根节点处，把第$r+1$个点$splay$到根节点的右儿子处，然后根据定义，以根节点的右儿子的左节点为根的子树内的点就是我们要的处理的所有区间节点，将其更新或者询问一下就好<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>], f, w;</span><br><span class="line">    LL v, s, ad;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = f = w = <span class="number">0</span>;</span><br><span class="line">        v = s = ad = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> f, LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k = ++sz].init();</span><br><span class="line">    T[k].v = v;</span><br><span class="line">    T[k].f = f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, LL ad)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    T[k].ad += ad;</span><br><span class="line">    T[k].s += (LL)T[k].w * ad;</span><br><span class="line">    T[k].v += ad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].w = T[T[k].ch[<span class="number">0</span>]].w + T[T[k].ch[<span class="number">1</span>]].w + <span class="number">1</span>;</span><br><span class="line">    T[k].s = T[T[k].ch[<span class="number">0</span>]].s + T[T[k].ch[<span class="number">1</span>]].s + T[k].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].ad)</span><br><span class="line">    &#123;</span><br><span class="line">        update(T[k].ch[<span class="number">0</span>], T[k].ad);</span><br><span class="line">        update(T[k].ch[<span class="number">1</span>], T[k].ad);</span><br><span class="line">        T[k].ad = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    newnode(k, f, arr[mid]);</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ch[<span class="number">0</span>], l, mid - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].ch[<span class="number">1</span>], mid + <span class="number">1</span>, r, k);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getson</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> T[T[k].f].ch[<span class="number">1</span>] == k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = T[x].f, ff = T[f].f, l = getson(x), r = l ^ <span class="number">1</span>;</span><br><span class="line">    pushdown(f);</span><br><span class="line">    pushdown(x);</span><br><span class="line">    <span class="keyword">if</span> (f == k)</span><br><span class="line">        k = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        T[ff].ch[getson(f)] = x;</span><br><span class="line">    T[x].f = ff;</span><br><span class="line">    T[f].ch[l] = T[x].ch[r];</span><br><span class="line">    <span class="keyword">if</span> (T[x].ch[r])</span><br><span class="line">        T[T[x].ch[r]].f = f;</span><br><span class="line">    T[x].ch[r] = f;</span><br><span class="line">    T[f].f = x;</span><br><span class="line">    pushup(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pushdown(x);</span><br><span class="line">    <span class="keyword">while</span> (x != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = T[x].f;</span><br><span class="line">        <span class="keyword">if</span> (f != k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (getson(f)^getson(x))</span><br><span class="line">                rotate(x, k);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rotate(f, k);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(x, k);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pushdown(x);</span><br><span class="line">    <span class="keyword">int</span> w = T[T[x].ch[<span class="number">0</span>]].w + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == w)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; w)</span><br><span class="line">        <span class="keyword">return</span> get_kth(T[x].ch[<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> get_kth(T[x].ch[<span class="number">1</span>], k - w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">    T[<span class="number">0</span>].init();</span><br><span class="line">    newnode(rt, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    newnode(T[rt].ch[<span class="number">1</span>], rt, <span class="number">-1</span>);</span><br><span class="line">    build(T[T[rt].ch[<span class="number">1</span>]].ch[<span class="number">0</span>], l, r, T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    pushup(T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    splay(get_kth(rt, l), rt);</span><br><span class="line">    splay(get_kth(rt, r + <span class="number">2</span>), T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    update(T[T[rt].ch[<span class="number">1</span>]].ch[<span class="number">0</span>], v);</span><br><span class="line">    pushup(T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    splay(get_kth(rt, l), rt);</span><br><span class="line">    splay(get_kth(rt, r + <span class="number">2</span>), T[rt].ch[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> T[T[T[rt].ch[<span class="number">1</span>]].ch[<span class="number">0</span>]].s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, l, r, i;</span><br><span class="line">    LL v;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, arr + i);</span><br><span class="line">        init(<span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ops[<span class="number">4</span>];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, ops, &amp;l, &amp;r);</span><br><span class="line">            <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(l, r));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;v);</span><br><span class="line">                add(l, r, v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> splay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 1208 宠物收养所（splay入门题）</title>
      <link href="/2017/11/22/BZOJ-1208/"/>
      <url>/2017/11/22/BZOJ-1208/</url>
      
        <content type="html"><![CDATA[<p>1208: [HNOI2004]宠物收养所</p><p>Time Limit: 10 Sec  Memory Limit: 162 MB<br>Submit: 9802  Solved: 3926<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>最近，阿Q开了一间宠物收养所。收养所提供两种服务：收养被主人遗弃的宠物和让新的主人领养这些宠物。每个领养者都希望领养到自己满意的宠物，阿Q根据领养者的要求通过他自己发明的一个特殊的公式，得出该领养者希望领养的宠物的特点值a（a是一个正整数，a&lt;2^31），而他也给每个处在收养所的宠物一个特点值。这样他就能够很方便的处理整个领养宠物的过程了，宠物收养所总是会有两种情况发生：被遗弃的宠物过多或者是想要收养宠物的人太多，而宠物太少。 1． 被遗弃的宠物过多时，假若到来一个领养者，这个领养者希望领养的宠物的特点值为a，那么它将会领养一只目前未被领养的宠物中特点值最接近a的一只宠物。（任何两只宠物的特点值都不可能是相同的，任何两个领养者的希望领养宠物的特点值也不可能是一样的）如果有两只满足要求的宠物，即存在两只宠物他们的特点值分别为a-b和a+b，那么领养者将会领养特点值为a-b的那只宠物。 2． 收养宠物的人过多，假若到来一只被收养的宠物，那么哪个领养者能够领养它呢？能够领养它的领养者，是那个希望被领养宠物的特点值最接近该宠物特点值的领养者，如果该宠物的特点值为a，存在两个领养者他们希望领养宠物的特点值分别为a-b和a+b，那么特点值为a-b的那个领养者将成功领养该宠物。 一个领养者领养了一个特点值为a的宠物，而它本身希望领养的宠物的特点值为b，那么这个领养者的不满意程度为abs(a-b)。【任务描述】你得到了一年当中，领养者和被收养宠物到来收养所的情况，希望你计算所有收养了宠物的领养者的不满意程度的总和。这一年初始时，收养所里面既没有宠物，也没有领养者。</p><p>Input</p><p>第一行为一个正整数n，n&lt;=80000，表示一年当中来到收养所的宠物和领养者的总数。接下来的n行，按到来时间的先后顺序描述了一年当中来到收养所的宠物和领养者的情况。每行有两个正整数a, b，其中a=0表示宠物，a=1表示领养者，b表示宠物的特点值或是领养者希望领养宠物的特点值。（同一时间呆在收养所中的，要么全是宠物，要么全是领养者，这些宠物和领养者的个数不会超过10000个）</p><p>Output</p><p>仅有一个正整数，表示一年当中所有收养了宠物的领养者的不满意程度的总和mod 1000000以后的结果。</p><p>Sample Input</p><p>5</p><p>0 2</p><p>0 4</p><p>1 3</p><p>1 2</p><p>1 5</p><p>Sample Output</p><p>3</p><p>(abs(3-2) + abs(2-4)=3，最后一个领养者没有宠物可以领养)</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1208" target="_blank" rel="noopener">BZOJ 1208</a><br>splay入门题，只要找前驱和后继即可，主要用的操作是splay上的插入、删除，找前驱和后继操作，代码是参考大牛<a href="http://hzwer.com/1311.html" target="_blank" rel="noopener"><strong>hzwer</strong></a>的<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">80010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>], v, f;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz, pp, sp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getson</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> T[T[x].f].ch[<span class="number">1</span>] == x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = T[x].f, ff = T[f].f, l = getson(x), r = l ^ <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (f == k)</span><br><span class="line">        k = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        T[ff].ch[getson(f)] = x;</span><br><span class="line">    T[x].f = ff;</span><br><span class="line">    T[f].ch[l] = T[x].ch[r];</span><br><span class="line">    <span class="keyword">if</span> (T[x].ch[r])</span><br><span class="line">        T[T[x].ch[r]].f = f;</span><br><span class="line">    T[x].ch[r] = f;</span><br><span class="line">    T[f].f = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = T[x].f;</span><br><span class="line">        <span class="keyword">if</span> (f != k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (getson(f)^getson(x))</span><br><span class="line">                rotate(x, k);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rotate(f, k);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(x, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> f, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k = ++sz].init();</span><br><span class="line">        T[k].f = f;</span><br><span class="line">        T[k].v = v;</span><br><span class="line">        splay(k, rt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v &lt; T[k].v)</span><br><span class="line">        ins(T[k].ch[<span class="number">0</span>], k, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ins(T[k].ch[<span class="number">1</span>], k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getpre</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= T[k].v)</span><br><span class="line">    &#123;</span><br><span class="line">        pp = k;</span><br><span class="line">        getpre(T[k].ch[<span class="number">1</span>], v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        getpre(T[k].ch[<span class="number">0</span>], v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsuc</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= T[k].v)</span><br><span class="line">    &#123;</span><br><span class="line">        sp = k;</span><br><span class="line">        getsuc(T[k].ch[<span class="number">0</span>], v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        getsuc(T[k].ch[<span class="number">1</span>], v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    splay(x, rt);</span><br><span class="line">    <span class="keyword">if</span> (T[x].ch[<span class="number">0</span>] * T[x].ch[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">        rt = T[x].ch[<span class="number">0</span>] + T[x].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = T[x].ch[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (T[k].ch[<span class="number">0</span>])</span><br><span class="line">            k = T[k].ch[<span class="number">0</span>];</span><br><span class="line">        T[k].ch[<span class="number">0</span>] = T[x].ch[<span class="number">0</span>];</span><br><span class="line">        T[T[x].ch[<span class="number">0</span>]].f = k;</span><br><span class="line">        rt = T[x].ch[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    T[rt].f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ops, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> kind = <span class="number">-1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;ops, &amp;v);</span><br><span class="line">            <span class="keyword">if</span> (!rt)</span><br><span class="line">            &#123;</span><br><span class="line">                kind = ops;</span><br><span class="line">                ins(rt, <span class="number">0</span>, v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (kind == ops)</span><br><span class="line">                ins(rt, <span class="number">0</span>, v);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pp = sp = <span class="number">0</span>;</span><br><span class="line">                getpre(rt, v);</span><br><span class="line">                getsuc(rt, v);</span><br><span class="line">                <span class="keyword">if</span> (pp &amp;&amp; sp)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> pv = v - T[pp].v, sv = T[sp].v - v;</span><br><span class="line">                    <span class="keyword">if</span> (pv &lt;= sv)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans = (ans + pv) % mod;</span><br><span class="line">                        del(pp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans = (ans + sv) % mod;</span><br><span class="line">                        del(sp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = (ans + v - T[pp].v) % mod;</span><br><span class="line">                    del(pp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sp)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = (ans + T[sp].v - v) % mod;</span><br><span class="line">                    del(sp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> splay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lonlife 1169 既然有B那还得有C（高斯消元）</title>
      <link href="/2017/11/21/Lonlife-1169/"/>
      <url>/2017/11/21/Lonlife-1169/</url>
      
        <content type="html"><![CDATA[<p>1169 - 既然有B那还得有C</p><p>Time Limit：2s Memory Limit：128MByte </p><p>Submissions：83Solved：28<br><a id="more"></a></p><p>DESCRIPTION</p><p>输入n个长度为n的01向量，</p><p>问有多少组解，取出解中的向量，将他们异或起来，恰好等于解本身。</p><p>比如n = 3<br>1 0 1<br>0 1 1<br>1 1 0</p><p>如果我们取出第1个和第2个向量异或起来可以得到<br>1 1 0</p><p>恰好等于这个解本身，其中1表示取这个向量，0表示不取这个向量。</p><p>显而易见，空集一定是一个解，因为异或起来都是0。</p><p>INPUT</p><p>第一行一个整数n<br>接下来n行，第i行n个0或1表示第i个向量。</p><p>(1 &lt;= n &lt;= 300)</p><p>OUTPUT</p><p>一行一个整数表示解的个数。</p><p>SAMPLE INPUT</p><p>3<br>1 0 1<br>0 1 1<br>1 1 0</p><p>SAMPLE OUTPUT</p><p>2</p><p>SOLUTION</p><p>“玲珑杯”ACM比赛 Round #22</p><p>题目连接：<a href="http://www.ifrog.cc/acm/problem/1169" target="_blank" rel="noopener">Lonlife 1169</a><br>中文题意就不说了，由于智商硬伤，比赛的时候完全没想出来，第一个提交，但是到最后也没有过……<br>实际上异或其实就是模$2$的加法，那么肯定先用加法的思想做，如果将给定的向量视为行向量，从上到下一次放置，此时就构成了一个$n*n$的矩阵，记为$A$，那么题意显然就是叫我们求$A \times X=X$（暂时这么写）这个矩阵方程解的个数，那么如何构造$X$呢，显然如果是用行向量构成$A$的话实际上要左乘（比赛的时候一直在用行向量+右乘构造，当然是构造不了的）一个$X$使得某几行的所有维向量得以相乘并相加。也就是求$X \times A=X$的解的个数，然后我们用乘法分配律或者直接两边同时左乘一个$X^{-1}$，得到$A-E=\vec{0}$，由于是题目是异或，因此对角线减$1$就相当于对角线异或$1$。最后高斯消元求秩记为$q$，答案就是$2^{q}$，这里还学到一个不用大数模板就可以输出$2^{1023}$以下的大数的技巧<br>拿样例举个例子：</p><script type="math/tex; mode=display">  \begin{pmatrix}  x1 & x2 & x3 \\  \end{pmatrix}  \times  \begin{pmatrix}  1 & 0 & 1 \\  0 & 1 & 1 \\  1 & 1 & 0 \\  \end{pmatrix}  =  \begin{pmatrix}  x1 & x2 & x3 \\  \end{pmatrix}</script><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="keyword">int</span> Mat[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gaussian</span><span class="params">(<span class="keyword">int</span> ne, <span class="keyword">int</span> nv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ce, cv;</span><br><span class="line">    <span class="keyword">for</span> (ce = <span class="number">1</span>, cv = <span class="number">1</span>; ce &lt;= ne &amp;&amp; cv &lt;= nv; ++ce, ++cv)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> te = ce;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ce + <span class="number">1</span>; i &lt;= ne; ++i)</span><br><span class="line">            <span class="keyword">if</span> (Mat[i][cv])</span><br><span class="line">                te = i;</span><br><span class="line">        <span class="keyword">if</span> (te != ce)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cv; j &lt;= nv + <span class="number">1</span>; ++j)</span><br><span class="line">                swap(Mat[ce][j], Mat[te][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!Mat[ce][cv])</span><br><span class="line">        &#123;</span><br><span class="line">            --ce;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ce + <span class="number">1</span>; i &lt;= ne; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Mat[i][cv])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = cv; j &lt;= nv + <span class="number">1</span>; ++j)</span><br><span class="line">                    Mat[i][j] ^= Mat[ce][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ne - ce + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Mat[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            Mat[i][i] ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> fr = Gaussian(n, n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">0</span>) &lt;&lt; <span class="built_in">pow</span>(<span class="number">2</span>, fr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 高斯消元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF #447 Div.2题解</title>
      <link href="/2017/11/20/CF-447-Div-2%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/11/20/CF-447-Div-2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-QAQ"><a href="#A-QAQ" class="headerlink" title="A.QAQ"></a><a href="http://codeforces.com/contest/894/problem/A" target="_blank" rel="noopener">A.QAQ</a></h1><p>题意就是找出所有构成”QAQ”三个字母的子序列个数，听说还有统计什么的，果然蒟蒻选手只知道三个for……<br><a id="more"></a></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; len; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i] == <span class="string">'Q'</span> &amp;&amp; s[j] == <span class="string">'A'</span> &amp;&amp; s[k] == <span class="string">'Q'</span>)</span><br><span class="line">                        ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Ralph-And-His-Magic-Field"><a href="#B-Ralph-And-His-Magic-Field" class="headerlink" title="B.Ralph And His Magic Field"></a><a href="http://codeforces.com/contest/894/problem/B" target="_blank" rel="noopener">B.Ralph And His Magic Field</a></h1><p>题意就是给你$n$、$m$和$k$，问你构造出每一行每一列的乘积都是$k$的方案数有多少种，由于智商感人，比赛的时候没想出来<br>显然那每一个格子只能放$1$或$-1$，然后只要考虑$k==-1$和$k==1$两种情况即可，然后用$n*m$个元素的乘积和每行每列之间的乘积之间的关系，可以得到：</p><ol><li>$k==1$时答案为$2^{(n-1)*(m-1)}$，这里用费马小定理和快速乘法处理一下即可。</li><li>$k==-1$，当$n$和$m$奇偶性不同，则答案为$0$；否则答案还是$2^{(n-1)*(m-1)}$。</li></ol><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1000000007L</span>L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">qpow</span><span class="params">(LL a, LL b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            r = r * a % m;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">mul</span><span class="params">(LL a, LL b, LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            r = (r + a) % m;</span><br><span class="line">        a = (a + a) % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL n, m, k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; qpow(<span class="number">2L</span>L, mul(n - <span class="number">1</span>, m - <span class="number">1</span>, mod - <span class="number">1</span>), mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((n + m) &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, qpow(<span class="number">2L</span>L, mul(n - <span class="number">1</span>, m - <span class="number">1</span>, mod - <span class="number">1</span>), mod));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Marco-and-GCD-Sequence"><a href="#C-Marco-and-GCD-Sequence" class="headerlink" title="C.Marco and GCD Sequence"></a><a href="http://codeforces.com/contest/894/problem/C" target="_blank" rel="noopener">C.Marco and GCD Sequence</a></h1><p>题意就是给你$n$个数组成的集合，这个集合就是某个序列的所有区间$gcd$所构成的集合，构造这个数列。<br>Naive地以为只要相互之间$gcd$不为$1$就可以了，到最后用$ST$表暴力判断还是错的，正解就是看每一个数是不是那个最小数的倍数，如果有一个数不是的话无法构造；否则只要在两两之间插入一个最小的数就是所要构造的序列了</p><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(vis, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] % arr[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d%c"</span>, arr[<span class="number">1</span>], arr[i], <span class="string">" \n"</span>[i==n]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Ralph-And-His-Tour-in-Binary-Country"><a href="#D-Ralph-And-His-Tour-in-Binary-Country" class="headerlink" title="D.Ralph And His Tour in Binary Country"></a><a href="http://codeforces.com/contest/894/problem/D" target="_blank" rel="noopener">D.Ralph And His Tour in Binary Country</a></h1><p>题意就是给你一个完全二叉树（比赛的时候看了几眼还是选择去做E了，弱比我既没看出来题目所给的就是完全二叉树，也忘记去打表了找规律了），然后每一个树边都有权值（走过路径就要减去这条路径的权值），询问从某一个点$A_i$开始，拥有初始值为$H_i$，问那些点可以在$H_i$不被扣成负数前提下能走到，并求到这些点的时候所有剩余$H_i$的和。<br>完全不会写，还好大佬们的代码看得懂……感觉非常巧妙的一道题，做法就是先对树上的所有节点求出它子树内的节点（记得算自己）到自己的路径长度，记录到这个节点的信息中，对于询问：考虑候选点只能来自与子树内部或子树外部，因此先处理$A_i$子树，然后再处理$A_i$的兄弟子树，然后再往上走，单独处理父亲，依次循环，直到走到整棵树的根节点$1$为止。对于子树的处理，显然在上面排好序的路径长度中二分一下最后的位置，然后哪个位置的前缀和就是所要扣掉的总值，为了避免老是作前缀和，再用一个数组再预处理的时候顺便记录下前缀和就可以了。然后记录子树路径长度的时候用归并排序和代替暴力$sort$，速度可以加快接近一倍</p><h2 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line">LL L[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt;dis[N], presum[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL tl[N], tr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Getsubsum</span><span class="params">(<span class="keyword">int</span> u, LL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">0</span> || u &lt; <span class="number">1</span> || u &gt; n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = upper_bound(dis[u].begin(), dis[u].end(), v) - dis[u].begin() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (pos + <span class="number">1L</span>L) * v - presum[u][pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, L + i);</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i].emplace_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ls = LC(i), rs = RC(i);</span><br><span class="line">        <span class="keyword">int</span> lsz = <span class="number">0</span>, rsz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ls &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            LL w = L[ls - <span class="number">1</span>];</span><br><span class="line">            lsz = dis[ls].size();</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lsz; ++j)</span><br><span class="line">                tl[j] = dis[ls][j] + w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            LL w = L[rs - <span class="number">1</span>];</span><br><span class="line">            rsz = dis[rs].size();</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; rsz; ++j)</span><br><span class="line">                tr[j] = dis[rs][j] + w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (u &lt; lsz &amp;&amp; v &lt; rsz)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tl[u] &lt; tr[v])</span><br><span class="line">                dis[i].emplace_back(tl[u++]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dis[i].emplace_back(tr[v++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (u &lt; lsz)</span><br><span class="line">            dis[i].emplace_back(tl[u++]);</span><br><span class="line">        <span class="keyword">while</span> (v &lt; rsz)</span><br><span class="line">            dis[i].emplace_back(tr[v++]);</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;d : dis[i])</span><br><span class="line">            presum[i].emplace_back(sum += d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> A;</span><br><span class="line">        LL H;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>, &amp;A, &amp;H);</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        ans += Getsubsum(A, H);</span><br><span class="line">        <span class="keyword">while</span> (A != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (H &lt; L[A - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            H -= L[A - <span class="number">1</span>];</span><br><span class="line">            ans += H;</span><br><span class="line">            <span class="keyword">int</span> other = (A &amp; <span class="number">1</span>) ? A - <span class="number">1</span> : A + <span class="number">1</span>;</span><br><span class="line">            ans += Getsubsum(other, H - L[other - <span class="number">1</span>]);</span><br><span class="line">            A &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Ralph-and-Mushrooms"><a href="#E-Ralph-and-Mushrooms" class="headerlink" title="E.Ralph and Mushrooms"></a><a href="http://codeforces.com/contest/894/problem/E" target="_blank" rel="noopener">E.Ralph and Mushrooms</a></h1><p>题意就是给你一个有向可能带环的图，每一条边都有一个所能得到的蘑菇数量，设初始蘑菇为为$w$，第$i$次走这条路，蘑菇数量会减掉$i-1$，比如一开始蘑菇有$4$个，那么这条路可被采集的蘑菇数量依次为$4,3,1,0$，然后从一个给定起点$s$出发，求最多能采集到多少蘑菇。路可以来回走，但是蘑菇一旦为$0$就不能再采集了。<br>说起这题很痛心，没有预处理+智商低导致终测$TLE$，做法就是先缩点成多个连通分量目的是得到一个新的$DAG$，然后根据每一条输入边连接的端点，来更新新图的边权或者新图的点权，用二分或数学的方法把连通分量（即环）里的可采集蘑菇数量求出来作为点权（用到自然数前n项和的求和公式），然后然后做一遍$dfs$记忆化搜索（用spfa没必要且容易超时）求$DAG$上的点边均带权的最长路即可。最好预处理一下自然数的前$n$项和$S_n$的前$n$项和$T_n$，否则可能会超时</p><h2 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> pre;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, pre;</span><br><span class="line">    LL w;</span><br><span class="line">&#125;;</span><br><span class="line">edge E[N];</span><br><span class="line">Edge e[N];</span><br><span class="line"><span class="keyword">int</span> head[N], tot, h[N], Tot;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N], st[N], belong[N], ins[N], sc, ts, top, scnum[N];</span><br><span class="line"><span class="keyword">int</span> node[N][<span class="number">2</span>];</span><br><span class="line">LL w[N];</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt;vis;</span><br><span class="line">LL sumofsum[<span class="number">20010</span>];</span><br><span class="line"></span><br><span class="line">LL d[N], sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    CLR(h, <span class="number">-1</span>);</span><br><span class="line">    sc = ts = top = <span class="number">0</span>;</span><br><span class="line">    tot = Tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[Tot].to = t;</span><br><span class="line">    e[Tot].pre = h[s];</span><br><span class="line">    e[Tot].w = w;</span><br><span class="line">    h[s] = Tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot].to = t;</span><br><span class="line">    E[tot].pre = head[s];</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[u])</span><br><span class="line">        <span class="keyword">return</span> d[u];</span><br><span class="line">    LL nxt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; ~i; i = e[i].pre)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        nxt = max&lt;LL&gt;(dfs(v) + e[i].w, nxt);</span><br><span class="line">    &#125;</span><br><span class="line">    d[u] = sum[u] + nxt;</span><br><span class="line">    <span class="keyword">return</span> d[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++ts;</span><br><span class="line">    ins[u] = <span class="number">1</span>;</span><br><span class="line">    st[top++] = u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].pre)</span><br><span class="line">    &#123;</span><br><span class="line">        v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(v);</span><br><span class="line">            <span class="keyword">if</span> (low[v] &lt; low[u])</span><br><span class="line">                low[u] = low[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ins[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[v] &lt; low[u])</span><br><span class="line">                low[u] = dfn[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        ++sc;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = st[--top];</span><br><span class="line">            ins[v] = <span class="number">0</span>;</span><br><span class="line">            belong[v] = sc;</span><br><span class="line">            ++scnum[belong[v]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (u != v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">calcxiang</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL l = <span class="number">0</span>, r = x;</span><br><span class="line">    LL mid = <span class="number">0</span>;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((mid * (mid + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) &lt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= <span class="number">20000L</span>L; ++i)</span><br><span class="line">        sumofsum[i] = sumofsum[i - <span class="number">1</span>] + ((i * (i + <span class="number">1</span>)) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m,  i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%I64d"</span>, &amp;node[i][<span class="number">0</span>], &amp;node[i][<span class="number">1</span>], &amp;w[i]);</span><br><span class="line">        add(node[i][<span class="number">0</span>], node[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            Tarjan(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = node[i][<span class="number">0</span>], v = node[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (belong[u] == belong[v])</span><br><span class="line">        &#123;</span><br><span class="line">            LL nn = calcxiang(w[i]);</span><br><span class="line">            LL dsum = sumofsum[nn];</span><br><span class="line">            sum[belong[u]] += w[i] * (nn + <span class="number">1L</span>L) - dsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Add(belong[u], belong[v], w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, dfs(belong[s]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> DP </tag>
            
            <tag> 思维 </tag>
            
            <tag> 二分 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5955 Guessing the Dice Roll（AC自动机+高斯消元）</title>
      <link href="/2017/11/02/HDU-5955/"/>
      <url>/2017/11/02/HDU-5955/</url>
      
        <content type="html"><![CDATA[<p>Guessing the Dice Roll</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 1209    Accepted Submission(s): 352</p><a id="more"></a><p>Problem Description<br>There are N players playing a guessing game. Each player guesses a sequence consists of {1,2,3,4,5,6} with length L, then a dice will be rolled again and again and the roll out sequence will be recorded. The player whose guessing sequence first matches the last L rolls of the dice wins the game. </p><p>Input<br>The first line is the number of test cases. For each test case, the first line contains 2 integers N (1 ≤ N ≤ 10) and L (1 ≤ L ≤ 10). Each of the following N lines contains a guessing sequence with length L. It is guaranteed that the guessing sequences are consist of {1,2,3,4,5,6} and all the guessing sequences are distinct.</p><p>Output<br>For each test case, output a line containing the winning probability of each player with the precision of 6 digits.</p><p>Sample Input<br>3<br>5 1<br>1<br>2<br>3<br>4<br>5<br>6 2<br>1 1<br>2 1<br>3 1<br>4 1<br>5 1<br>6 1<br>4 3<br>1 2 3<br>2 3 4<br>3 4 5<br>4 5 6</p><p>Sample Output<br>0.200000 0.200000 0.200000 0.200000<br>0.200000<br>0.027778 0.194444 0.194444 0.194444<br>0.194444 0.194444<br>0.285337 0.237781 0.237781 0.239102</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5955" target="_blank" rel="noopener">HDU 5955</a><br>跟以前做过的挑战程序设计那本上的题目有点像<a href="http://www.cnblogs.com/Blackops/p/7204471.html" target="_blank" rel="noopener"><strong>传送门</strong></a>，这题是求概率，那题是求期望，反正都是写出公式，然后列出方程，得到系数矩阵再用高斯消元求答案。<br> 这题只能从非结束节点上转移过去，因此有：$p_v= {1 \over 6} * \sum{p_u}$，其中$u$是非结束节点，然后$p_0=1$，因为走到根节点是必需的。<br>然后用题目中的串构建$AC$自动机再根据上面的节点转移即可。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">7</span>], fail, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> n, l;</span><br><span class="line"><span class="keyword">double</span> A[N][N], ans[N];</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    CLR(A, <span class="number">0</span>);</span><br><span class="line">    CLR(ans, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> id, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L[u].nxt[s[i]] == <span class="number">-1</span>)</span><br><span class="line">            L[u].nxt[s[i]] = newnode();</span><br><span class="line">        u = L[u].nxt[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    L[u].v = <span class="number">1</span>;</span><br><span class="line">    pos[id] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">        <span class="keyword">if</span> (~v)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(v);</span><br><span class="line">            L[v].fail = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">        L[u].v |= L[uf].v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;v = L[u].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                L[v].fail = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v = L[uf].nxt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">(<span class="keyword">int</span> ne, <span class="keyword">int</span> nv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ce = <span class="number">0</span>, cv = <span class="number">0</span>; cv &lt; ne &amp;&amp; cv &lt; nv; ++ce, ++cv)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> te = ce;</span><br><span class="line">        <span class="keyword">for</span> (i = ce; i &lt; ne; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[i][cv]) &gt; <span class="built_in">fabs</span>(A[te][cv]))</span><br><span class="line">                te = i;</span><br><span class="line">        <span class="keyword">if</span> (te != ce)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = cv; j &lt;= nv; ++j)</span><br><span class="line">                swap(A[ce][j], A[te][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> bas = A[ce][cv];</span><br><span class="line">        <span class="keyword">for</span> (j = cv; j &lt;= nv; ++j)</span><br><span class="line">            A[ce][j] /= bas;</span><br><span class="line">        <span class="keyword">for</span> (i = ce + <span class="number">1</span>; i &lt; ne; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cv + <span class="number">1</span>; j &lt;= nv; ++j)</span><br><span class="line">                A[i][j] -= A[i][cv] * A[ce][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = ne - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = A[i][nv];</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; nv; ++j)</span><br><span class="line">            ans[i] -= ans[j] * A[i][j];</span><br><span class="line">        ans[i] /= A[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;l);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; l; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[j]);</span><br><span class="line">            ins(s, i, l);</span><br><span class="line">        &#125;</span><br><span class="line">        build();</span><br><span class="line">        A[<span class="number">0</span>][sz] = <span class="number">-1</span>;</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> P = <span class="number">1.0</span> / <span class="number">6.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            A[i][i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[i].v)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[i].nxt[j];</span><br><span class="line">                A[v][i] += P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Gauss(sz, sz);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.6f%c"</span>, ans[pos[i]], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 高斯消元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5952 Counting Cliques（DFS+剪枝）</title>
      <link href="/2017/11/02/HDU-5952/"/>
      <url>/2017/11/02/HDU-5952/</url>
      
        <content type="html"><![CDATA[<h2 id="Counting-Cliques"><a href="#Counting-Cliques" class="headerlink" title="Counting Cliques"></a>Counting Cliques</h2><p>Time Limit: 8000/4000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 3306    Accepted Submission(s): 1196</p><a id="more"></a><p>Problem Description<br>A clique is a complete graph, in which there is an edge between every pair of the vertices. Given a graph with N vertices and M edges, your task is to count the number of cliques with a specific size S in the graph. </p><p>Input<br>The first line is the number of test cases. For each test case, the first line contains 3 integers N,M and S (N ≤ 100,M ≤ 1000,2 ≤ S ≤ 10), each of the following M lines contains 2 integers u and v (1 ≤ u &lt; v ≤ N), which means there is an edge between vertices u and v. It is guaranteed that the maximum degree of the vertices is no larger than 20.</p><p>Output<br>For each test case, output the number of cliques with size S in the graph.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>4 3 2<br>1 2<br>2 3<br>3 4<br>5 9 3<br>1 3<br>1 4<br>1 5<br>2 3<br>2 4<br>2 5<br>3 4<br>3 5<br>4 5<br>6 15 4<br>1 2<br>1 3<br>1 4<br>1 5<br>1 6<br>2 3<br>2 4<br>2 5<br>2 6<br>3 4<br>3 5<br>3 6<br>4 5<br>4 6<br>5 6</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>3<br>7<br>15</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5952" target="_blank" rel="noopener">HDU 5952</a><br>很神奇的题目，当比赛做的时候一直T，没写出来，赛后看了题解发现其实只要用一个栈记录一下当前加入团的点就可以了，这样就不用遍历所有的点了，然后另外一个优化是对于大小为$S$的团，里面的任意点的度至少为$S-1$（画几个小的样例就可以发现了），因此在删点的时候把其他点的入度也更新一下，然后$DFS$的时候也不走这些入度不符合要求得点即可。然后如何排除重复计数的情况呢？比如得到${2,3,4}$之后又在$2$的另一颗搜索树中得到${2,4,3}$，对于这种情况只要保证边都是从小的编号连向大的编号即可。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;</span><br><span class="line">&#125; E[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> deg[N];</span><br><span class="line"><span class="keyword">int</span> n, m, s, ans;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> st[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    CLR(deg, <span class="number">0</span>);</span><br><span class="line">    CLR(G, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[top++] = u;</span><br><span class="line">    <span class="keyword">if</span> (top == s)</span><br><span class="line">    &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        st[--top] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (deg[v] &lt; s - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; top; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!G[v][st[j]])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    st[--top] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            add(a, b);</span><br><span class="line">            ++deg[a];</span><br><span class="line">            ++deg[b];</span><br><span class="line">            G[a][b] = G[b][a] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[i] &lt; s - <span class="number">1</span>)<span class="comment">//直接删除</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; ~j; j = E[j].nxt)</span><br><span class="line">                &#123;</span><br><span class="line">                    --deg[i];</span><br><span class="line">                    --deg[E[j].to];</span><br><span class="line">                    G[i][E[j].to] = G[E[j].to][i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; ~j; j = E[j].nxt)</span><br><span class="line">                &#123;</span><br><span class="line">                    --deg[i];</span><br><span class="line">                    --deg[E[j].to];</span><br><span class="line">                    G[i][E[j].to] = G[E[j].to][i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 搜索 </category>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> DFS </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4787 GRE Words Revenge（AC自动机+合并）</title>
      <link href="/2017/11/02/HDU-4787/"/>
      <url>/2017/11/02/HDU-4787/</url>
      
        <content type="html"><![CDATA[<p>GRE Words Revenge</p><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 327680/327680 K (Java/Others)<br>Total Submission(s): 2693    Accepted Submission(s): 668</p><a id="more"></a><p>Problem Description<br>　　Now Coach Pang is preparing for the Graduate Record Examinations as George did in 2011. At each day, Coach Pang can:<br>　　“+w”: learn a word w<br>　　“?p”: read a paragraph p, and count the number of learnt words. Formally speaking, count the number of substrings of p which is a learnt words.<br>　　Given the records of N days, help Coach Pang to find the count. For convenience, the characters occured in the words and paragraphs are only ‘0’ and ‘1’.</p><p>Input<br>　　The first line of the input file contains an integer T, which denotes the number of test cases. T test cases follow.<br>　　The first line of each test case contains an integer N (1 &lt;= N &lt;= 105), which is the number of days. Each of the following N lines contains either “+w” or “?p”. Both p and w are 01-string in this problem.<br>　　Note that the input file has been encrypted. For each string occured, let L be the result of last “?” operation. The string given to you has been shifted L times (the shifted version of string s1s2 … sk is sks1s2 … sk-1). You should decrypt the string to the original one before you process it. Note that L equals to 0 at the beginning of each test case.<br>　　The test data guarantees that for each test case, total length of the words does not exceed 105 and total length of the paragraphs does not exceed 5 * 106.</p><p>Output<br>　　For each test case, first output a line “Case #x:”, where x is the case number (starting from 1).<br>　　And for each “?” operation, output a line containing the result.</p><p>Sample Input<br>2<br>3<br>+01<br>+01<br>?01001<br>3<br>+01<br>?010<br>?011</p><p>Sample Output<br>Case #1:<br>2<br>Case #2:<br>1<br>0</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4787" target="_blank" rel="noopener">HDU 4787</a><br>用平方分割的优化技巧，建立两个$AC$自动机，先把所有字符往小的自动机里放，当小的自动机字符数大于$\sqrt{N}$的时候将小的和大的合并，然后清空小的；询问的时候输出两个自动机的答案和即可。主要学到的就是如何把两个$AC$自动机合并，$BFS$,$DFS$均可。<br>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e6</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[M], t[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt[<span class="number">2</span>], fail, v;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nxt[<span class="number">0</span>] = nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            fail = <span class="number">0</span>;</span><br><span class="line">            v = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; L[N];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[sz].init();</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!L[u].nxt[v])</span><br><span class="line">                L[u].nxt[v] = newnode();</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].v = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (v)</span><br><span class="line">                Q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (v)</span><br><span class="line">                &#123;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                    <span class="keyword">int</span> t = L[u].fail;</span><br><span class="line">                    <span class="keyword">while</span> (t &amp;&amp; !L[t].nxt[i])</span><br><span class="line">                        t = L[t].fail;</span><br><span class="line">                    L[v].fail = L[t].nxt[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">while</span> (u &amp;&amp; !L[u].nxt[v])</span><br><span class="line">                u = L[u].fail;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">            <span class="keyword">int</span> t = u;</span><br><span class="line">            <span class="keyword">while</span> (t)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[t].v)</span><br><span class="line">                    ++ret;</span><br><span class="line">                t = L[t].fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            u = L[u].nxt[s[i] - <span class="string">'0'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!u)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> L[u].v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; big, small;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    Q.push(<span class="number">0</span>);</span><br><span class="line">    Q.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> v = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        big.L[u].v |= small.L[v].v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (small.L[v].nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!big.L[u].nxt[i])</span><br><span class="line">                    big.L[u].nxt[i] = big.newnode();</span><br><span class="line">                Q.push(big.L[u].nxt[i]);</span><br><span class="line">                Q.push(small.L[v].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    big.build();</span><br><span class="line">    small.init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        s[i] = t[(i + k) % len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= TC; ++q)</span><br><span class="line">    &#123;</span><br><span class="line">        big.init();</span><br><span class="line">        small.init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, q);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c%s"</span>, &amp;c, t);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t);</span><br><span class="line">            Move(ans, len);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'+'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (small.exist(s, len) || big.exist(s, len))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                small.ins(s, len);</span><br><span class="line">                small.build();</span><br><span class="line">                <span class="keyword">if</span> (small.sz &gt; <span class="number">316</span>)</span><br><span class="line">                    Merge();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = small.query(s, len) + big.query(s, len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 平方分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 2460 元素（贪心+线性基）</title>
      <link href="/2017/10/31/BZOJ-2460/"/>
      <url>/2017/10/31/BZOJ-2460/</url>
      
        <content type="html"><![CDATA[<p>2460: [BeiJing2011]元素</p><p>Time Limit: 20 Sec  Memory Limit: 128 MB<br>Submit: 1583  Solved: 829<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>  相传，在远古时期，位于西方大陆的 Magic Land 上，人们已经掌握了用魔<br>法矿石炼制法杖的技术。那时人们就认识到，一个法杖的法力取决于使用的矿石。<br>一般地，矿石越多则法力越强，但物极必反：有时，人们为了获取更强的法力而<br>使用了很多矿石，却在炼制过程中发现魔法矿石全部消失了，从而无法炼制<br>出法杖，这个现象被称为“魔法抵消” 。特别地，如果在炼制过程中使用超过<br>一块同一种矿石，那么一定会发生“魔法抵消”。<br>  后来，随着人们认知水平的提高，这个现象得到了很好的解释。经过了大量<br>的实验后，著名法师 Dmitri 发现：如果给现在发现的每一种矿石进行合理的编<br>号（编号为正整数，称为该矿石的元素序号），那么，一个矿石组合会产生“魔<br>法抵消”当且仅当存在一个非空子集，那些矿石的元素序号按位异或起来<br>为零。 （如果你不清楚什么是异或，请参见下一页的名词解释。 ）例如，使用两<br>个同样的矿石必将发生“魔法抵消”，因为这两种矿石的元素序号相同，异或起<br>来为零。<br>  并且人们有了测定魔力的有效途径，已经知道了：合成出来的法杖的魔力<br>等于每一种矿石的法力之和。人们已经测定了现今发现的所有矿石的法力值，<br>并且通过实验推算出每一种矿石的元素序号。<br>   现在，给定你以上的矿石信息，请你来计算一下当时可以炼制出的法杖最多<br>有多大的魔力。 </p><p>Input</p><p>第一行包含一个正整数N，表示矿石的种类数。<br>  接下来 N行，每行两个正整数Numberi 和 Magici，表示这种矿石的元素序号<br>和魔力值。</p><p>Output</p><p>仅包一行，一个整数：最大的魔力值</p><p>Sample Input</p><p>3 </p><p>1 10 </p><p>2 20 </p><p>3 30 </p><p>Sample Output</p><p>50</p><p>HINT</p><p>由于有“魔法抵消”这一事实，每一种矿石最多使用一块。 </p><p>如果使用全部三种矿石，由于三者的元素序号异或起来：1 xor 2 xor 3 = 0 ，</p><p>则会发生魔法抵消，得不到法杖。 </p><p>可以发现，最佳方案是选择后两种矿石，法力为 20+30=50。 </p><p>对于全部的数据：N ≤ $1000$，Numberi ≤ $10^{18}$</p><p>，Magici ≤ $10^4$</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2460" target="_blank" rel="noopener">BZOJ 2460</a><br>按价值从大到小插入物品的$id$并维护线性基，如果$id$已经存在就跳过，否则答案加上这个物品的价值即可。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">61</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL id;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line">LL bit[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ins</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; (<span class="number">1L</span>L &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!bit[i])</span><br><span class="line">            &#123;</span><br><span class="line">                bit[i] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x ^= bit[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(bit, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%d"</span>, &amp;arr[i].id, &amp;arr[i].val);</span><br><span class="line">        sort(arr, arr + n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ins(arr[i].id))</span><br><span class="line">                ans += arr[i].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 线性基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1512 Monkey King（并查集+pd_ds库可并堆的应用）</title>
      <link href="/2017/10/30/HDU-1512/"/>
      <url>/2017/10/30/HDU-1512/</url>
      
        <content type="html"><![CDATA[<p>Monkey King</p><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 6586    Accepted Submission(s): 2821</p><a id="more"></a><p>Problem Description<br>Once in a forest, there lived N aggressive monkeys. At the beginning, they each does things in its own way and none of them knows each other. But monkeys can’t avoid quarrelling, and it only happens between two monkeys who does not know each other. And when it happens, both the two monkeys will invite the strongest friend of them, and duel. Of course, after the duel, the two monkeys and all of there friends knows each other, and the quarrel above will no longer happens between these monkeys even if they have ever conflicted.</p><p>Assume that every money has a strongness value, which will be reduced to only half of the original after a duel(that is, 10 will be reduced to 5 and 5 will be reduced to 2).</p><p>And we also assume that every monkey knows himself. That is, when he is the strongest one in all of his friends, he himself will go to duel.</p><p>Input<br>There are several test cases, and each case consists of two parts.</p><p>First part: The first line contains an integer N(N&lt;=100,000), which indicates the number of monkeys. And then N lines follows. There is one number on each line, indicating the strongness value of ith monkey(&lt;=32768).</p><p>Second part: The first line contains an integer M(M&lt;=100,000), which indicates there are M conflicts happened. And then M lines follows, each line of which contains two integers x and y, indicating that there is a conflict between the Xth monkey and Yth.</p><p>Output<br>For each of the conflict, output -1 if the two monkeys know each other, otherwise output the strongness value of the strongest monkey in all friends of them after the duel.</p><p>Sample Input<br>5<br>20<br>16<br>10<br>10<br>4<br>5<br>2 3<br>3 4<br>3 5<br>4 5<br>1 5</p><p>Sample Output<br>8<br>5<br>5<br>-1<br>10</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1512" target="_blank" rel="noopener">HDU 1512</a><br>显然题目主要难点就是如何快速得到一个集合的最大值，合并我们用并查集，但是堆怎么合并呢？此处就用$pd\_ds$库的优先队列来合并，就可以少写很多代码了。一开始把$!empty$写成$empty$怀疑了一会儿人生<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.join(B)<span class="comment">//将B合并到A的堆里，同时清空堆B</span></span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="keyword">int</span>, less&lt;<span class="keyword">int</span>&gt;, pairing_heap_tag&gt; Q[N];</span><br><span class="line"><span class="keyword">namespace</span> dsu </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> pre[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            pre[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Q[i].empty())</span><br><span class="line">                Q[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre[n] == <span class="number">-1</span> ? n : pre[n] = Find(pre[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        dsu::init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">            Q[i].push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">int</span> fa = dsu::Find(a), fb = dsu::Find(b);</span><br><span class="line">            <span class="keyword">if</span> (fa == fb)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> A = Q[fa].top(), B = Q[fb].top();</span><br><span class="line">                Q[fa].pop();</span><br><span class="line">                Q[fa].push(A &gt;&gt; <span class="number">1</span>);</span><br><span class="line">                Q[fb].pop();</span><br><span class="line">                Q[fb].push(B &gt;&gt; <span class="number">1</span>);</span><br><span class="line">                Q[fa].join(Q[fb]);</span><br><span class="line">                dsu::pre[fb] = fa;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Q[fa].top());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 优化 </category>
          
          <category> pb_ds </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 优化 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5056 Boring count（尺取法）</title>
      <link href="/2017/10/30/HDU-5056/"/>
      <url>/2017/10/30/HDU-5056/</url>
      
        <content type="html"><![CDATA[<p>Boring count</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 1650    Accepted Submission(s): 607</p><a id="more"></a><p>Problem Description<br>You are given a string S consisting of lowercase letters, and your task is counting the number of substring that the number of each lowercase letter in the substring is no more than K.</p><p>Input<br>In the first line there is an integer T , indicates the number of test cases.<br>For each case, the first line contains a string which only consist of lowercase letters. The second line contains an integer K.</p><p>[Technical Specification]<br>1&lt;=T&lt;= 100<br>1 &lt;= the length of S &lt;= 100000<br>1 &lt;= K &lt;= 100000</p><p>Output<br>For each case, output a line contains the answer.</p><p>Sample Input<br>3<br>abc<br>1<br>abcabc<br>1<br>abcabc<br>2</p><p>Sample Output<br>6<br>15<br>21</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5056" target="_blank" rel="noopener">HDU 5056</a><br>发现尺取法很久没写了，便找了道题写写，显然所有子串要么是同一个起点，不同长度；要么是不同起点，不同长度，那么我们可以枚举起点，然后$O(n^2)$暴力地求，但是这样明显会超时，但是又可以发现对于每一个起点$i$，如果它最长合法区间能拓展到右边的$j$，那么显然以$i$为固定起点，$S_{i…j}$都是合法的，对答案的贡献就是这段最长区间的长度，那么就可以用尺取法计算所有的最长区间，累加贡献得到答案。<br>通过这题好像发现尺取法的一个适用条件：假设区间的一端端点不变，另一端缩短，这种影响应该使得答案区间可以向未拓展的区间增加，或无影响，否则某一端还要返回去寻找最合适的指针，就退化成$O(n^2)$的算法了。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> buc[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(buc, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;k);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = s[r] - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (buc[v] + <span class="number">1</span> &lt;= k)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++buc[v];</span><br><span class="line">                    ++r;</span><br><span class="line">                    ++temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += r - l;</span><br><span class="line">            --buc[s[l++] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 优化 </category>
          
          <category> 尺取法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 6194 string string string（后缀自动机+parent树+性质理解）</title>
      <link href="/2017/10/28/HDU-6194/"/>
      <url>/2017/10/28/HDU-6194/</url>
      
        <content type="html"><![CDATA[<p>string string string</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 2057    Accepted Submission(s): 624</p><a id="more"></a><p>Problem Description<br>Uncle Mao is a wonderful ACMER. One day he met an easy problem, but Uncle Mao was so lazy that he left the problem to you. I hope you can give him a solution.<br>Given a string s, we define a substring that happens exactly k times as an important string, and you need to find out how many substrings which are important strings.</p><p>Input<br>The first line contains an integer T (T≤100) implying the number of test cases.<br>For each test case, there are two lines:<br>the first line contains an integer k (k≥1) which is described above;<br>the second line contain a string s (length(s)≤105).<br>It’s guaranteed that ∑length(s)≤2∗106.</p><p>Output<br>For each test case, print the number of the important substrings in a line.</p><p>Sample Input<br>2<br>2<br>abcabc<br>3<br>abcabcabcabc</p><p>Sample Output<br>6<br>9</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6194" target="_blank" rel="noopener">HDU 6194</a><br>比赛那会儿没做出来，因为刚学$SA$性质也不太理解，更不要说用还没学的$SAM$做了，这题如果能知道$right$集合的意义还有$len$的意义就比较好写了。<br>这里有一个要利用的性质：同一个$right$集合内的子串长度从$L[u].len$按公差为$1$递减，那么对于任意一个节点$u$，如果以它作为接受态，那么它有$|right{u}|$个可能构成的后缀串其长度为连续的$L[L[u].pre].len+1…L[u].len$中的值。<br>那么我们按照$parent$树自下而上叠加$|right|$的大小，然后看$|right|$的大小，如果等于$k$则说明这个节点接受的子串集合均出现过$k$次，那么答案累加上$u$的管辖长度$L[u].len-L[L[u].pre].len$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        v = <span class="number">0</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">int</span> node[N &lt;&lt; <span class="number">1</span>], cnt[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    CLR(cnt, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    L[u].v = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[np].v = <span class="number">0</span>;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, k, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;k, s);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ++cnt[L[i].len];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            node[--cnt[L[i].len]] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = node[i];</span><br><span class="line">            <span class="keyword">if</span> (~L[u].pre)</span><br><span class="line">                L[L[u].pre].v += L[u].v;</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            <span class="keyword">if</span> (L[i].v == k)</span><br><span class="line">                ans += L[i].len - L[L[i].pre].len;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5716 带可选字符的多字符串匹配（shift-and匹配算法）</title>
      <link href="/2017/10/27/HDU-5716/"/>
      <url>/2017/10/27/HDU-5716/</url>
      
        <content type="html"><![CDATA[<p>带可选字符的多字符串匹配</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 818    Accepted Submission(s): 194</p><a id="more"></a><p>Problem Description<br>有一个文本串，它的长度为m(1≤m≤2000000)，现在想找出其中所有的符合特定模式的子串位置。</p><p>符合特定模式是指，该子串的长度为n(1≤n≤500)，并且第i个字符需要在给定的字符集合Si中。</p><p>因此，描述这一特定模式，共需要S1,S2,…,Sn这n个字符集合。每个集合的大小都在1∼62之间，其中的字符只为数字或大小写字母。</p><p>Input<br>第一行为一个字符串，表示待匹配的文本串。注意文本串中可能含有数字和大小写字母之外的字符。</p><p>第二行为一个整数n。</p><p>以下n行，分别描述n个字符集合。每行开始是一个1∼62之间的整数，随后有一个空格，接下来有一个字符串表示对应字符集合的内容。整数表示字符集合的大小，因此它也就是字符串的长度。输入保证字符串中的字符只为数字或大小写字母且没有重复。<b>（注：本题有多组测试数据）</b></p><p>Output<br>每当从某个位置开头的，长度为n的子串符合输入的模式，就输出一行，其中包含一个整数，为它在文本串的起始位置。位置编号从1开始。</p><p>如果文本串没有任何位置符合输入模式，则最后输出一个字符串”NULL”，占一行。</p><p>Sample Input<br>aaaabacabcabd<br>3<br>3 abc<br>2 bc<br>3 abc</p><p>Sample Output<br>4<br>6<br>8<br>9</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5716" target="_blank" rel="noopener">HDU 5716</a><br>跟<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5972" target="_blank" rel="noopener"><strong>HDU 5972</strong></a>非常像，虽然在加了输入输出外挂之后解决了超时的问题，但是开始$WA$了，然后发现题目中的主串中的字符不一定是字符集里的字符，因此感觉应该有两种解决办法</p><ol><li>把给定字符集之外的字符映射到独立出来的$id$上，这样最多只用$|字符集|+1$个字符。</li><li>结合一下shift-and匹配的性质，当$ans[k]==1$说明$T<em>0…T_k==S</em>{i-k}…S_i$，注意这里的$S_i$是作为前缀的后缀的最后一位，既然是非空后缀，那么最后一位总是不会变的，然后考虑$S[i]$为非给定字符集内的字符的情况，它此时作为最后一位会使得$S[i]$无法和任意的字符匹配，那么$S$中以$i$结尾的前缀的后缀均无法与任何字符匹配，因此要把当前记录的结果清零。然后就可以做了。</li></ol><p>第一种代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">char</span> S[N], T[M];</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;M&gt;bit[<span class="number">63</span>], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; ++i)</span><br><span class="line">        bit[i].reset();</span><br><span class="line">    ans.reset();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> a)</span>      <span class="comment">//输出外挂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">        a = -a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="number">10</span>)</span><br><span class="line">        Out(a / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(a % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, i, j, n, m, len;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">        id[i] = <span class="number">62</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'0'</span>; i &lt;= <span class="string">'9'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'A'</span>; i &lt;= <span class="string">'Z'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">while</span> (gets(S) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        m = <span class="built_in">strlen</span>(S);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %d %s"</span>, &amp;len, T);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">                bit[id[T[j]]][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            ans &amp;= bit[id[S[i]]];</span><br><span class="line">            <span class="keyword">if</span> (ans[n - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                Out(i - n + <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">                tot = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tot)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NULL"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">char</span> S[N], T[M];</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;M&gt;bit[<span class="number">62</span>], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">62</span>; ++i)</span><br><span class="line">        bit[i].reset();</span><br><span class="line">    ans.reset();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> a)</span>      <span class="comment">//输出外挂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="number">10</span>)</span><br><span class="line">        Out(a / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(a % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, i, j, n, m, len;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">        id[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'0'</span>; i &lt;= <span class="string">'9'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="string">'A'</span>; i &lt;= <span class="string">'Z'</span>; ++i)</span><br><span class="line">        id[i] = idx++;</span><br><span class="line">    <span class="keyword">while</span> (gets(S))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        m = <span class="built_in">strlen</span>(S);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %d %s"</span>, &amp;len, T);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">                bit[id[T[j]]][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (~id[S[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                ans &amp;= bit[id[S[i]]];</span><br><span class="line">                <span class="keyword">if</span> (ans[n - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    Out(i - n + <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">                    tot = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans.reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tot)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NULL"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> shift-and/or </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> shift-and/or </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5972 Regular Number（shift-and匹配算法）</title>
      <link href="/2017/10/27/HDU-5972/"/>
      <url>/2017/10/27/HDU-5972/</url>
      
        <content type="html"><![CDATA[<p>Regular Number</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 1589    Accepted Submission(s): 430</p><a id="more"></a><p>Problem Description<br>Using regular expression to define a numeric string is a very common thing. Generally, use the shape as follows:<br>(0|9|7) (5|6) (2) (4|5)<br>Above regular expression matches 4 digits:The first is one of 0,9 and 7. The second is one of 5 and 6. The third is 2. And the fourth is one of 4 and 5. The above regular expression can be successfully matched to 0525, but it cannot be matched to 9634.<br>Now,giving you a regular expression like the above formula,and a long string of numbers,please find out all the substrings of this long string that can be matched to the regular expression.</p><p>Input<br>It contains a set of test data.The first line is a positive integer N (1 ≤ N ≤ 1000),on behalf of the regular representation of the N bit string.In the next N lines,the first integer of the i-th line is ai(1≤ai≤10),representing that the i-th position of regular expression has ai numbers to be selected.Next there are ai numeric characters. In the last line,there is a numeric string.The length of the string is not more than 5 * 10^6.</p><p>Output<br>Output all substrings that can be matched by the regular expression. Each substring occupies one line</p><p>Sample Input<br>4<br>3 0 9 7<br>2 5 7<br>2 2 5<br>2 4 5<br>09755420524</p><p>Sample Output<br>9755<br>7554<br>0524</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5972" target="_blank" rel="noopener">HDU 5972</a><br>不看题解不会写系列……很神奇的算法，只能理解一点。<br>注：下面的文字中的下标全部从$0$开始，且起始和结束都是闭区间。</p><ol><li>对于主串$S$和模式串$T$，当$S$串处理完第$i$个字符后，对于某个位置$k(0 \le k \le lent-1)$，若$ans[k]==1$，那么说明$T<em>0…T_k==S</em>{i-k}…S_i$（结论1）。</li><li>显然$T<em>0…T_k$是$T$串的前缀，$S</em>{i-k}…S<em>i$是$S$串的前缀$S_0…S</em>{i}$的后缀。</li><li>那么当$ans[lent-1]==1$时，令$k=lent-1$，则有$T<em>0…T</em>{lent-1}==S_{i-(lent-1)}…S_i$（利用结论1），这个式子可以看出$T$串出现在$S$串中，且起始位置为$i-(lent-1)$。<br>既然知道起始位置，输出长度为$lent$的子串就可以了。当然这题似乎有一点卡输入，建议用输入外挂配合$gets()$输入，输出用$puts()$<br>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; bit[<span class="number">10</span>], T; <span class="comment">//bit[i][j]表示字符集中第i个字符可以出现在第j个位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Scan</span><span class="params">()</span>      <span class="comment">//输入外挂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span> ((ch = getchar()) == <span class="string">'-'</span>) flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) res = ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + (ch - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> flag ? -res : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, k, x;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">            bit[i].reset();</span><br><span class="line">        T.reset();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            k = Scan();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                x = Scan();</span><br><span class="line">                bit[x].<span class="built_in">set</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        gets(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; s[i]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T = T &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            T[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            T &amp;= bit[s[i] - <span class="string">'0'</span>];</span><br><span class="line">            <span class="keyword">if</span> (T[n - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                ch = s[i + <span class="number">1</span>];</span><br><span class="line">                s[i + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">                <span class="built_in">puts</span>(s + i - n + <span class="number">1</span>);</span><br><span class="line">                s[i + <span class="number">1</span>] = ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> shift-and/or </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> shift-and/or </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 6086 Rikka with String（AC自动机+状压DP+滚动数组优化+思维）</title>
      <link href="/2017/10/26/HDU-6086/"/>
      <url>/2017/10/26/HDU-6086/</url>
      
        <content type="html"><![CDATA[<p>Rikka with String</p><p>Time Limit: 6000/3000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 656    Accepted Submission(s): 236</p><a id="more"></a><p>Problem Description<br>As we know, Rikka is poor at math. Yuta is worrying about this situation, so he gives Rikka some math tasks to practice. There is one of them:</p><p>Yuta has n 01 strings si, and he wants to know the number of 01 antisymmetric strings of length 2L which contain all given strings si as continuous substrings.</p><p>A 01 string s is antisymmetric if and only if s[i]≠s[|s|−i+1] for all i∈[1,|s|].</p><p>It is too difficult for Rikka. Can you help her?</p><p>In the second sample, the strings which satisfy all the restrictions are 000111,001011,011001,100110.</p><p>Input<br>The first line contains a number t(1≤t≤5), the number of the testcases. </p><p>For each testcase, the first line contains two numbers n,L(1≤n≤6,1≤L≤100). </p><p>Then n lines follow, each line contains a 01 string si(1≤|si|≤20).</p><p>Output<br>For each testcase, print a single line with a single number — the answer modulo 998244353.</p><p>Sample Input<br>2<br>2 2<br>011<br>001<br>2 3<br>011<br>001</p><p>Sample Output<br>1<br>4</p><p>题目链接：<a href="https://vjudge.net/problem/HDU-6086" target="_blank" rel="noopener">HDU 6086</a><br>这题如果不用对称，只要构造长度为$n$的字符串使得包含所有给定的字符串那就是简单的状压一下就好了，但是这里要求左右相反，看了大佬们的题解，发现其实还是将这些串“对折到”左半边长度为$L$的地方，然后再根据上面的状压+AC自动机就可以求了，考虑一个子串的出现位置：</p><ol><li>完全在左边，显然就是直接插入自动机</li><li>完全在右边，显然就是按照题意得到此串在左边的形态，再插入AC自动机</li><li>有$lenl$在左边，有$lenr$在右边，其中$lenl+lenr=len$，那么其实右边有$lenl$的部分是已知的，可以不用管，剩下的未知的就是$2*lenl+1…len$的位置，根据题意这段显然也是可以翻转到左边去得到其在左边的形态后跟$lenl$部分拼接，再插入AC自动机，这里的状态要记录为另一种新的状态，只能在处理长度为$L$的时候才可以用到。</li></ol><p>然后建立AC自动机，做一下状压DP就好了，<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">130</span>;</span><br><span class="line"><span class="keyword">namespace</span> ac &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt[<span class="number">2</span>], fail, st[<span class="number">2</span>];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            nxt[<span class="number">0</span>] = nxt[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">            st[<span class="number">0</span>] = st[<span class="number">1</span>] = fail = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; L[N * <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[sz].init();</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> id, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                L[u].nxt[v] = newnode();</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].st[index] |= (<span class="number">1</span> &lt;&lt; id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            L[u].st[<span class="number">0</span>] |= L[uf].st[<span class="number">0</span>];</span><br><span class="line">            L[u].st[<span class="number">1</span>] |= L[uf].st[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> &amp;v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    v = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[N], rs[N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][N * <span class="number">3</span>][<span class="number">1</span> &lt;&lt; <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, n, L, i, j, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        CLR(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;L);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            ac::ins(s, len, i, <span class="number">0</span>);<span class="comment">//左半边</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">                rs[j] = s[len - <span class="number">1</span> - j] == <span class="string">'1'</span> ? <span class="string">'0'</span> : <span class="string">'1'</span>;</span><br><span class="line">            ac::ins(rs, len, i, <span class="number">0</span>);<span class="comment">//右半边等价映射到左半边</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; ++j) <span class="comment">//把超出中线的右半部分也等价映射到左半边</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> lenl = j + <span class="number">1</span>, lenr = len - lenl;</span><br><span class="line">                <span class="keyword">int</span> canmap = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; min(lenl, lenr); ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[j - k] == s[j + <span class="number">1</span> + k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        canmap = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (canmap)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> str = <span class="built_in">string</span>(s, <span class="number">0</span>, lenl);</span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">2</span> * lenl; k &lt; len; ++k)</span><br><span class="line">                        str = (s[k] == <span class="string">'1'</span> ? <span class="string">'0'</span> : <span class="string">'1'</span>) + str;</span><br><span class="line">                    <span class="built_in">strcpy</span>(rs, str.c_str());</span><br><span class="line">                    ac::ins(rs, str.size(), i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>, nxt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            CLR(dp[nxt], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; ac::sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; R; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[now][j][k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">2</span>; ++s)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> v = ac::L[j].nxt[s];</span><br><span class="line">                            <span class="keyword">int</span> vst = k | ac::L[v].st[<span class="number">0</span>];</span><br><span class="line">                            <span class="keyword">if</span> (i == L - <span class="number">1</span>)</span><br><span class="line">                                vst |= ac::L[v].st[<span class="number">1</span>];</span><br><span class="line">                            dp[nxt][v][vst] = (dp[nxt][v][vst] + dp[now][j][k]) % mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(now, nxt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ac::sz; ++i)</span><br><span class="line">            ans = (ans + dp[now][i][R - <span class="number">1</span>]) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-2018 NEERC G.Orientation of Edges（BFS）</title>
      <link href="/2017/10/21/2017-2018-NEERC-G-Orientation-of-Edges/"/>
      <url>/2017/10/21/2017-2018-NEERC-G-Orientation-of-Edges/</url>
      
        <content type="html"><![CDATA[<p>G. Orientation of Edges<br>time limit per test3 seconds<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>Vasya has a graph containing both directed (oriented) and undirected (non-oriented) edges. There can be multiple edges between a pair of vertices.<br><a id="more"></a><br>Vasya has picked a vertex s from the graph. Now Vasya wants to create two separate plans:</p><p>to orient each undirected edge in one of two possible directions to maximize number of vertices reachable from vertex s;<br>to orient each undirected edge in one of two possible directions to minimize number of vertices reachable from vertex s.<br>In each of two plans each undirected edge must become directed. For an edge chosen directions can differ in two plans.</p><p>Help Vasya find the plans.</p><p>Input<br>The first line contains three integers n, m and s (2 ≤ n ≤ 3·105, 1 ≤ m ≤ 3·105, 1 ≤ s ≤ n) — number of vertices and edges in the graph, and the vertex Vasya has picked.</p><p>The following m lines contain information about the graph edges. Each line contains three integers ti, ui and vi (1 ≤ ti ≤ 2, 1 ≤ ui, vi ≤ n, ui ≠ vi) — edge type and vertices connected by the edge. If ti = 1 then the edge is directed and goes from the vertex ui to the vertex vi. If ti = 2 then the edge is undirected and it connects the vertices ui and vi.</p><p>It is guaranteed that there is at least one undirected edge in the graph.</p><p>Output<br>The first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices.</p><p>A description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols ‘+’ and ‘-‘, where f is the number of undirected edges in the initial graph. Print ‘+’ as the j-th symbol of the string if the j-th undirected edge (u, v) from the input should be oriented from u to v. Print ‘-‘ to signify the opposite direction (from v to u). Consider undirected edges to be numbered in the same order they are given in the input.</p><p>If there are multiple solutions, print any of them.</p><p>Examples<br>input<br>2 2 1<br>1 1 2<br>2 2 1<br>output<br>2<br>-<br>2<br>+<br>input<br>6 6 3<br>2 2 6<br>1 4 5<br>2 3 4<br>1 4 1<br>1 3 1<br>2 2 3<br>output<br>6<br>++-<br>2<br>+-+</p><p>题目链接：<a href="http://codeforces.com/contest/883/problem/G" target="_blank" rel="noopener">CF 2017-2018 NEERC G. Orientation of Edges</a><br>最大应该比较好做，从$S$开始$BFS$即可，遇到有向边就走，遇到无向边也走就行了，记得储存一下此时的答案就好；然后是最小的点数，感觉是先只对有向边构成的图$BFS$出$S$可到达的点，然后枚举无向边$(u,v)$，应该有两种情况：$u$与$v$有一个点可达或者两者均不可达，前者的话肯定是要从不可达指向可达的点，这样才能把这条边返回去不增加任何点数，后者的话随意吧，由于前者这种情况的存在，后者实际上两个点应该是不会被$s$连通的，那么方向就保持原来的方向好了。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, nxt, id;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _from, <span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt, <span class="keyword">int</span> _id, <span class="keyword">int</span> _flag): from(_from), to(_to), nxt(_nxt), id(_id), flag(_flag) &#123;&#125;</span><br><span class="line">&#125; E[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> A[N], B[N];</span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt;vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(A, <span class="number">-1</span>);</span><br><span class="line">    CLR(B, <span class="number">-1</span>);</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> id, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(s, t, head[s], id, flag);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        E[tot] = edge(t, s, head[t], id, -flag);</span><br><span class="line">        head[t] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis.reset();</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    Q.push(s);</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (E[i].flag == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                    A[E[i].id] = E[i].flag &lt; <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis.reset();</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    Q.push(s);</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">            <span class="keyword">if</span> (E[i].flag != <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> unid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++unid;</span><br><span class="line">                add(a, b, unid, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                add(a, b, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, vis.count());</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= unid; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, A[i] ? <span class="string">'+'</span> : <span class="string">'-'</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        bfs2();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, vis.count());</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tot; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (E[i].flag != <span class="number">1</span> &amp;&amp; E[i].flag &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = E[i].to, u = E[i].from;</span><br><span class="line">                <span class="keyword">if</span> (vis[u] &amp;&amp; !vis[v])</span><br><span class="line">                    B[E[i].id] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    B[E[i].id] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= unid; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, B[i] ? <span class="string">'+'</span> : <span class="string">'-'</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 搜索 </category>
          
          <category> BFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5536 Chip Factory（01字典树）</title>
      <link href="/2017/10/18/HDU-5536/"/>
      <url>/2017/10/18/HDU-5536/</url>
      
        <content type="html"><![CDATA[<p>Chip Factory</p><p>Time Limit: 18000/9000 MS (Java/Others)    Memory Limit: 262144/262144 K (Java/Others)<br>Total Submission(s): 3814    Accepted Submission(s): 1678</p><a id="more"></a><p>Problem Description<br>John is a manager of a CPU chip factory, the factory produces lots of chips everyday. To manage large amounts of products, every processor has a serial number. More specifically, the factory produces n chips today, the i-th chip produced this day has a serial number si.</p><p>At the end of the day, he packages all the chips produced this day, and send it to wholesalers. More specially, he writes a checksum number on the package, this checksum is defined as below:<br>maxi,j,k(si+sj)⊕sk</p><p>which i,j,k are three different integers between 1 and n. And ⊕ is symbol of bitwise XOR.</p><p>Can you help John calculate the checksum number of today?</p><p>Input<br>The first line of input contains an integer T indicating the total number of test cases.</p><p>The first line of each test case is an integer n, indicating the number of chips produced today. The next line has n integers s1,s2,..,sn, separated with single space, indicating serial number of each chip.</p><p>1≤T≤1000<br>3≤n≤1000<br>0≤si≤109<br>There are at most 10 testcases with n&gt;100</p><p>Output<br>For each test case, please output an integer indicating the checksum number in a line.</p><p>Sample Input<br>2<br>3<br>1 2 3<br>3<br>100 200 300</p><p>Sample Output<br>6<br>400</p><p>Source<br>2015ACM/ICPC亚洲区长春站-重现赛（感谢东北师大）</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5536" target="_blank" rel="noopener">HDU 5533</a><br>今天训练的时候队友突然跟我说减掉$k$一开始没听懂，后来想着确定$i$与$j$，然后把区间分成三段，用可持久化01字典树嘛，结果T了（暴力据说才6s，苦逼……）。然后有发现每一次查询前把$arr[i]$和$arr[j]$从字典树中删除，查询好再加回去不就好了吗，判断一条路可不可走就用$cnt$记录这条路被覆盖过几次即可，然后就是个大水题了，但是不知道为什么中间好几分钟没调出来样例……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">2</span>], cnt, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        nxt[<span class="number">0</span>] = nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt = v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N * <span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;31&gt;s(val);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i];</span><br><span class="line">        <span class="keyword">if</span> (!L[u].nxt[v])</span><br><span class="line">            L[u].nxt[v] = newnode();</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">        ++L[u].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    L[u].v = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;31&gt;s(val);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i];</span><br><span class="line">        u = L[u].nxt[v];</span><br><span class="line">        L[u].cnt += c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;31&gt;s(val);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = s[i];</span><br><span class="line">        <span class="keyword">if</span> (L[L[u].nxt[v ^ <span class="number">1</span>]].cnt)</span><br><span class="line">            u = L[u].nxt[v ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L[u].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">            ins(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                update(arr[i], <span class="number">-1</span>);</span><br><span class="line">                update(arr[j], <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">int</span> t = arr[i] + arr[j];</span><br><span class="line">                ans = max(ans, query(t)^t);</span><br><span class="line">                update(arr[i], <span class="number">1</span>);</span><br><span class="line">                update(arr[j], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 字典树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ SUBLEX Lexicographical Substring Search（后缀自动机+parent树）</title>
      <link href="/2017/10/17/SPOJ-SUBLEX/"/>
      <url>/2017/10/17/SPOJ-SUBLEX/</url>
      
        <content type="html"><![CDATA[<p>SUBLEX - Lexicographical Substring Search<br>suffix-array-8<br><a id="more"></a><br>Little Daniel loves to play with strings! He always finds different ways to have fun with strings! Knowing that, his friend Kinan decided to test his skills so he gave him a string S and asked him Q questions of the form:</p><p>If all distinct substrings of string S were sorted lexicographically, which one will be the K-th smallest?</p><p>After knowing the huge number of questions Kinan will ask, Daniel figured out that he can’t do this alone. Daniel, of course, knows your exceptional programming skills, so he asked you to write him a program which given S will answer Kinan’s questions.</p><p>Example:</p><p>S = “aaa” (without quotes)<br>substrings of S are “a” , “a” , “a” , “aa” , “aa” , “aaa”. The sorted list of substrings will be:<br>“a”, “aa”, “aaa”.</p><p>Input</p><p>In the first line there is Kinan’s string S (with length no more than 90000 characters). It contains only small letters of English alphabet. The second line contains a single integer Q (Q &lt;= 500) , the number of questions Daniel will be asked. In the next Q lines a single integer K is given (0 &lt; K &lt; 2^31).</p><p>Output</p><p>Output consists of Q lines, the i-th contains a string which is the answer to the i-th asked question.</p><p>Example</p><p>Input:<br>aaa<br>2<br>2<br>3</p><p>Output:<br>aa<br>aaa</p><p>题目链接：<a href="http://www.spoj.com/problems/SUBLEX/en/" target="_blank" rel="noopener">SPOJ SUBLEX</a><br>题意就是询问去重后的第$K$小子串，我们用栈+回溯$dfs$一次$parent$树可以直接输出字典序从小到大的子串，可以记录一下某一个节点的子树一共可以构成几个子串，显然这些子串都是连续的，把每一个节点初始赋值权值$1$，然后按照$parent$叠加就可以得到子树的权值，此时任意一个节点的值就是这个节点结尾的字典序上连续的子串个数；假设当前节点$u$控制了$A$种连续字典序子串，当前要查询第$k$小子串，如果$k \le A$，那么显然答案在这个点的子树中，因此往这个点走，但是走过之后这个节点本身已经不能算子串了，因此要$k=k-1$；否则显然是$k-=A$，即直接排除掉$u$上的所有子串情况。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">90010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len;</span><br><span class="line">    LL cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], x[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    <span class="comment">//L[0].cnt = 0;</span></span><br><span class="line">    CLR(cnt, <span class="number">0</span>);</span><br><span class="line">    CLR(ans, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[np].pre = L[v].pre;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, q;</span><br><span class="line">    LL k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ++cnt[L[i].len];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            x[--cnt[L[i].len]] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = x[i];</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[j];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                    L[u].cnt += L[v].cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                    <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (k &lt;= L[v].cnt)</span><br><span class="line">                    &#123;</span><br><span class="line">                        --k;</span><br><span class="line">                        <span class="built_in">putchar</span>(i + <span class="string">'a'</span>);</span><br><span class="line">                        u = v;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        k -= L[v].cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ NSUBSTR Substrings（后缀自动机+parent树）</title>
      <link href="/2017/10/17/SPOJ-NSUBSTR/"/>
      <url>/2017/10/17/SPOJ-NSUBSTR/</url>
      
        <content type="html"><![CDATA[<p>NSUBSTR - Substrings<br>suffix-array-8<br><a id="more"></a><br>You are given a string S which consists of 250000 lowercase latin letters at most. We define F(x) as the maximal number of times that some string with length x appears in S. For example for string ‘ababa’ F(3) will be 2 because there is a string ‘aba’ that occurs twice. Your task is to output F(i) for every i so that 1&lt;=i&lt;=|S|.<br>Input</p><p>String S consists of at most 250000 lowercase latin letters.</p><p>Output</p><p>Output |S| lines. On the i-th line output F(i).</p><p>Example</p><p>Input:<br>ababa</p><p>Output:<br>3<br>2<br>2<br>1<br>1</p><p>题目链接：<a href="http://www.spoj.com/problems/NSUBSTR/en/" target="_blank" rel="noopener">SPOJ NSUBSTR</a><br>题意就是输出长度为$i$的子串最多出现的次数（可重复），由于每一个节点$L[i]$都是一个子串，那么根据$parent$树的性质，先把$endpos$设为1，然后从下往上叠加上去，然后遍历所有节点，$L[i].len$就是当前节点作为接受态形成子串的长度，那么只要$ans[L[i].len] = max(ans[L[i].len], L[i].endpos)$就可以了<br>不知道为什么最后一定要从后往前更新一遍，不更新也可以过数据啊，反正先这么写了吧<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], x[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    CLR(cnt, <span class="number">0</span>);</span><br><span class="line">    CLR(ans, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    L[u].v = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[np].v = <span class="number">0</span>;</span><br><span class="line">            L[np].pre = L[v].pre;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ++cnt[L[i].len];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            x[--cnt[L[i].len]] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            L[L[x[i]].pre].v += L[x[i]].v;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ans[L[i].len] = max(ans[L[i].len], L[i].v);</span><br><span class="line">        <span class="keyword">for</span> (i = len; i &gt;= <span class="number">1</span>; --i)<span class="comment">//这里感觉不必要啊？？</span></span><br><span class="line">            ans[i] = max(ans[i], ans[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ LCS2 Longest Common Substring II（后缀自动机+parent树）</title>
      <link href="/2017/10/17/SPOJ-LCS2/"/>
      <url>/2017/10/17/SPOJ-LCS2/</url>
      
        <content type="html"><![CDATA[<p>LCS2 - Longest Common Substring II<br>suffix-array-8<br>A string is finite sequence of characters over a non-empty finite set Σ.<br><a id="more"></a><br>In this problem, Σ is the set of lowercase letters.</p><p>Substring, also called factor, is a consecutive sequence of characters occurrences at least once in a string.</p><p>Now your task is a bit harder, for some given strings, find the length of the longest common substring of them.</p><p>Here common substring means a substring of two or more strings.</p><p>Input</p><p>The input contains at most 10 lines, each line consists of no more than 100000 lowercase letters, representing a string.</p><p>Output</p><p>The length of the longest common substring. If such string doesn’t exist, print “0” instead.</p><p>Example</p><p>Input:<br>alsdfkjfjkdsal<br>fdjskalajfkdsla<br>aaaajfaaaa</p><p>Output:<br>2<br>Notice: new testcases added</p><p>题目链接：<a href="http://www.spoj.com/problems/LCS2/en/" target="_blank" rel="noopener">SPOJ LCS2</a><br>跟$LCSI$很像的做法，每一个节点记录${第i个串在此匹配到的最长长度}$，然后对每一个节点再记录$min{第i个串在此匹配到的最长长度}$其中的最小值（因为只有最小值才能满足所有串）。所有节点的最小值组成的集合中的最大值就是答案了，当然由于$fail$指向的子串是以当前节点结尾子串的后缀，因此如果$L[i].sumlen$存在，那么$L[L[i].fail].sumlen$完全可以达到$L[i].sumlen$的长度，但是由于肯定不能超过自身的最长长度，因此在传递的时候也要按条件更新一下：</p><script type="math/tex; mode=display">L[L[i].fail].sumlen = min(L[L[i].fail].len, max(L[L[i].fail].sumlen, L[u].sumlen))</script><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len, Min, sum;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        Min = INF, sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last, x[N &lt;&lt; <span class="number">1</span>], cnt[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> len, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        ++cnt[L[i].len];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        x[--cnt[L[i].len]] = i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            L[i].sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (~L[u].nxt[c])</span><br><span class="line">            &#123;</span><br><span class="line">                ++l;</span><br><span class="line">                u = L[u].nxt[c];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (~u &amp;&amp; L[u].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">                    u = L[u].pre;</span><br><span class="line">                <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">                    u = l = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    l = L[u].len + <span class="number">1</span>;</span><br><span class="line">                    u = L[u].nxt[c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            L[u].sum = max(L[u].sum, l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = x[i], pre = L[u].pre;</span><br><span class="line">            L[pre].sum = min(L[pre].len, max(L[pre].sum, L[u].sum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            L[i].Min = min(L[i].Min, L[i].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        ans = max(ans, L[i].Min);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hihoCoder 1441 后缀自动机一·基本概念（后缀自动机+parent树）</title>
      <link href="/2017/10/16/hihoCoder-1441/"/>
      <url>/2017/10/16/hihoCoder-1441/</url>
      
        <content type="html"><![CDATA[<p>时间限制:10000ms<br>单点时限:1000ms<br>内存限制:256MB<br>描述<br><a id="more"></a><br>小Hi：今天我们来学习一个强大的字符串处理工具：后缀自动机（Suffix Automaton，简称SAM）。对于一个字符串S，它对应的后缀自动机是一个最小的确定有限状态自动机（DFA），接受且只接受S的后缀。</p><p>小Hi：比如对于字符串S=”aabbabd”，它的后缀自动机是：<br><img src="http://media.hihocoder.com/problem_images/20161203/14807564643248.png" alt="SAM.png"></p><p>其中红色状态是终结状态。你可以发现对于S的后缀，我们都可以从S出发沿着字符标示的路径（蓝色实线）转移，最终到达终结状态。例如”bd”对应的路径是S59，”abd”对应的路径是S189，”abbabd”对应的路径是S184679。而对于不是S后缀的字符串，你会发现从S出发，最后会到达非终结状态或者“无路可走”。特别的，对于S的子串，最终会到达一个合法状态。例如”abba”路径是S1846，”bbab”路径是S5467。而对于其他不是S子串的字符串，最终会“无路可走”。 例如”aba”对应S18X，”aaba”对应S123X。（X表示没有转移匹配该字符）</p><p>小Ho：好像很厉害的样子！对于任意字符串都能构造出一个SAM吗？另外图中那些绿色虚线是什么？</p><p>小Hi：是的，任意字符串都能构造出一个SAM。我们知道SAM本质上是一个DFA，DFA可以用一个五元组 &lt;字符集，状态集，转移函数、起始状态、终结状态集&gt;来表示。下面我们将依次介绍对于一个给定的字符串S如何确定它对应的 状态集 和 转移函数 。至于那些绿色虚线虽然不是DFA的一部分，却是SAM的重要部分，有了这些链接SAM是如虎添翼，我们后面再细讲。</p><p>SAM的States</p><p>小Hi：这一节我们将介绍给定一个字符串S，如何确定S对应的SAM有哪些状态。首先我们先介绍一个概念 子串的结束位置集合 endpos。对于S的一个子串s，endpos(s) = s在S中所有出现的结束位置集合。还是以S=”aabbabd”为例，endpos(“ab”) = {3, 6}，因为”ab”一共出现了2次，结束位置分别是3和6。同理endpos(“a”) = {1, 2, 5}, endpos(“abba”) = {5}。</p><p>小Hi：我们把S的所有子串的endpos都求出来。如果两个子串的endpos相等，就把这两个子串归为一类。最终这些endpos的等价类就构成的SAM的状态集合。例如对于S=”aabbabd”：</p><p>状态  子串  endpos<br>S   空串  {0,1,2,3,4,5,6}<br>1   a   {1,2,5}<br>2   aa  {2}<br>3   aab {3}<br>4   aabb,abb,bb {4}<br>5   b   {3,4,6}<br>6   aabba,abba,bba,ba   {5}<br>7   aabbab,abbab,bbab,bab   {6}<br>8   ab  {3,6}<br>9   aabbabd,abbabd,bbabd,babd,abd,bd,d  {7}<br>小Ho：这些状态恰好就是上面SAM图中的状态。</p><p>小Hi：没错。此外，这些状态还有一些美妙的性质，且等我一一道来。首先对于S的两个子串s1和s2，不妨设length(s1) &lt;= length(s2)，那么 s1是s2的后缀当且仅当endpos(s1) ⊇ endpos(s2)，s1不是s2的后缀当且仅当endpos(s1) ∩ endpos(s2) = ∅。</p><p>小Ho：我验证一下啊… 比如”ab”是”aabbab”的后缀，而endpos(“ab”)={3,6}，endpos(“aabbab”)={6}，是成立的。”b”是”ab”的后缀，endpos(“b”)={3,4,6}, endpos(“ab”)={3,6}也是成立的。”ab”不是”abb”的后缀，endpos(“ab”)={3,6}，endpos(“abb”)={4}，两者没有交集也是成立的。怎么证明呢？</p><p>小Hi：证明还是比较直观的。首先证明s1是s2的后缀=&gt;endpos(s1) ⊇ endpos(s2)：既然s1是s2后缀，所以每次s2出现时s1以必然伴随出现，所以有endpos(s1) ⊇ endpos(s2)。再证明endpos(s1) ⊇ endpos(s2)=&gt;s1是s2的后缀：我们知道对于S的子串s2，endpos(s2)不会是空集，所以endpos(s1) ⊇ endpos(s2)=&gt;存在结束位置x使得s1结束于x，并且s2也结束于x，又length(s1) &lt;= length(s2)，所以s1是s2的后缀。综上我们可知s1是s2的后缀当且仅当endpos(s1) ⊇ endpos(s2)。s1不是s2的后缀当且仅当endpos(s1) ∩ endpos(s2) = ∅是一个简单的推论，不再赘述。</p><p>小Ho：我好像对SAM的状态有一些认识了！我刚才看上面的表格就觉得SAM的一个状态里包含的子串好像有规律。考虑到SAM中的一个状态包含的子串都具有相同的endpos，那它们应该都互为后缀？</p><p>小Hi：你观察力还挺敏锐的。下面我们就来讲讲一个状态包含的子串究竟有什么关系。上文提到我们把S的所有子串按endpos分类，每一类就代表一个状态，所以我们可以认为一个状态包含了若干个子串。我们用substrings(st)表示状态st中包含的所有子串的集合，longest(st)表示st包含的最长的子串，shortest(st)表示st包含的最短的子串。例如对于状态7，substring(7)={aabbab,abbab,bbab,bab}，longest(7)=aabbab，shortest(7)=bab。</p><p>小Hi：对于一个状态st，以及任意s∈substrings(st)，都有s是longest(st)的后缀。证明比较容易，因为endpos(s)=endpos(longest(st))，所以endpos(s) ⊇ endpos(longest(st))，根据我们刚才证明的结论有s是longest(st)的后缀。</p><p>小Hi：此外，对于一个状态st，以及任意的longest(st)的后缀s，如果s的长度满足：length(shortest(st)) &lt;= length(s) &lt;= length(longsest(st))，那么s∈substrings(st)。 证明也是比较容易，因为：length(shortest(st)) &lt;= length(s) &lt;= length(longsest(st))，所以endpos(shortest(st)) ⊇ endpos(s) ⊇ endpos(longest(st))， 又endpos(shortest(st)) = endpos(longest(st))，所以endpos(shortest(st)) = endpos(s) = endpos(longest(st))，所以s∈substrings(st)。</p><p>小Ho：这么说来，substrings(st)包含的是longest(st)的一系列连续后缀？</p><p>小Hi：没错。比如你看状态7中包含的就是aabbab的长度分别是6，5，4，3的后缀；状态6包含的是aabba的长度分别是5，4，3，2的后缀。</p><p>SAM的Suffix Links</p><p>小Hi：前面我们讲到substrings(st)包含的是longest(st)的一系列连续后缀。这连续的后缀在某个地方会“断掉”。比如状态7，包含的子串依次是aabbab,abbab,bbab,bab。按照连续的规律下一个子串应该是”ab”，但是”ab”没在状态7里，你能想到这是为什么么？</p><p>小Ho：aabbab,abbab,bbab,bab的endpos都是{6}，下一个”ab”当然也在结束位置6出现过，但是”ab”还在结束位置3出现过，所以”ab”比aabbab,abbab,bbab,bab出现次数更多，于是就被分配到一个新的状态中了。</p><p>小Hi：没错，当longest(st)的某个后缀s在新的位置出现时，就会“断掉”，s会属于新的状态。比如上例中”ab”就属于状态8，endpos(“ab”}={3,6}。当我们进一步考虑”ab”的下一个后缀”b”时，也会遇到相同的情况：”b”还在新的位置4出现过，所以endpos(“b”)={3,4,6}，b属于状态5。在接下去处理”b”的后缀我们会遇到空串，endpos(“”)={0,1,2,3,4,5,6}，状态是起始状态S。</p><p>小Hi：于是我们可以发现一条状态序列：7-&gt;8-&gt;5-&gt;S。这个序列的意义是longest(7)即aabbab的后缀依次在状态7、8、5、S中。我们用Suffix Link这一串状态链接起来，这条link就是上图中的绿色虚线。</p><p>小Ho：原来如此。</p><p>小Hi：Suffix Links后面会有妙用，我们暂且按下不表。</p><p>SAM的Transition Function</p><p>小Hi：最后我们来介绍SAM的转移函数。对于一个状态st，我们首先找到从它开始下一个遇到的字符可能是哪些。我们将st遇到的下一个字符集合记作next(st)，有next(st) = {S[i+1] | i ∈ endpos(st)}。例如next(S)={S[1], S[2], S[3], S[4], S[5], S[6], S[7]}={a, b, d}，next(8)={S[4], S[7]}={b, d}。</p><p>小Hi：对于一个状态st来说和一个next(st)中的字符c，你会发现substrings(st)中的所有子串后面接上一个字符c之后，新的子串仍然都属于同一个状态。比如对于状态4，next(4)={a}，aabb,abb,bb后面接上字符a得到aabba，abba，bba，这些子串都属于状态6。</p><p>小Hi：所以我们对于一个状态st和一个字符c∈next(st)，可以定义转移函数trans(st, c) = x | longest(st) + c ∈ substrings(x) 。换句话说，我们在longest(st)（随便哪个子串都会得到相同的结果）后面接上一个字符c得到一个新的子串s，找到包含s的状态x，那么trans(st, c)就等于x。</p><p>小Ho：吼~ 终于把SAM中各个部分搞明白了。</p><p>小Hi：SAM的构造有时空复杂度均为O(length(S))的算法，我们将在后面介绍。这一期你可以先用暴力算法依照定义构造SAM，先对SAM有个直观认识再说。</p><p>小Ho：没问题，暴力算法我最拿手了。我先写程序去了。</p><p>输入</p><p>第一行包含一个字符串S，S长度不超过50。</p><p>第二行包含一个整数N，表示询问的数目。(1 &lt;= N &lt;= 10)</p><p>以下N行每行包括一个S的子串s，s不为空串。</p><p>输出</p><p>对于每一个询问s，求出包含s的状态st，输出一行依次包含shortest(st)、longest(st)和endpos(st)。其中endpos(st)由小到大输出，之间用一个空格分割。</p><p>样例输入<br>aabbabd<br>5<br>b<br>abbab<br>aa<br>aabbab<br>bb<br>样例输出<br>b b 3 4 6<br>bab aabbab 6<br>aa aa 2<br>bab aabbab 6<br>bb aabb 4</p><p>题目链接：<a href="http://hihocoder.com/problemset/problem/1441" target="_blank" rel="noopener">hihoCoder 1441</a><br>刚学自动机那会儿就在写了，用暴力的$string::find$一直WA，然后做了<a href="https://blackops.top/2017/10/16/CF-873F/"><strong>前面那道题</strong></a>发现$parent$树的性质就是当前节点的子树下的节点就是当前节点的$endpos{}$集合啊，那我们直接自下向上传递$endpos{}$就可以了，传递的时候我们用$set$记录就OK，输出时候的连排序、去重都省了。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], fail, len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        st.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">char</span> st[N];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"><span class="built_in">string</span> mx, mi, S;</span><br><span class="line"><span class="keyword">int</span> cnt[N], x[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (top &gt; mx.size())</span><br><span class="line">            mx = st;</span><br><span class="line">        <span class="keyword">if</span> (top &lt; mi.size())</span><br><span class="line">            mi = st;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (~L[u].nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            st[top++] = i + <span class="string">'a'</span>;</span><br><span class="line">            dfs(L[u].nxt[i], t);</span><br><span class="line">            st[--top] = <span class="string">'\0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    L[u].st.insert(p);</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].fail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].fail = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[np].st.clear();</span><br><span class="line">            L[u].fail = L[v].fail = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, q;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ins(s[i] - <span class="string">'a'</span>, i + <span class="number">1</span>);</span><br><span class="line">        S = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">char</span> t[N];</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> lt = <span class="built_in">strlen</span>(t);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lt; ++i)</span><br><span class="line">                u = L[u].nxt[t[i] - <span class="string">'a'</span>];</span><br><span class="line">            mi = <span class="built_in">string</span>(<span class="number">55</span>, <span class="string">' '</span>);</span><br><span class="line">            mx = <span class="string">""</span>;</span><br><span class="line">            dfs(<span class="number">0</span>, u);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s"</span>, mi.c_str(), mx.c_str());</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">                cnt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">                ++cnt[L[i].len];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">                cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">                x[--cnt[L[i].len]] = i;</span><br><span class="line">            <span class="keyword">for</span> (i = sz - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p = x[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : L[p].st)</span><br><span class="line">                    L[L[p].fail].st.insert(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : L[u].st)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, x);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF 873F Forbidden Indices（后缀自动机+parent树）</title>
      <link href="/2017/10/16/CF-873F/"/>
      <url>/2017/10/16/CF-873F/</url>
      
        <content type="html"><![CDATA[<p>F. Forbidden Indices<br>time limit per test2 seconds<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>You are given a string s consisting of n lowercase Latin letters. Some indices in this string are marked as forbidden.<br><a id="more"></a><br>You want to find a string a such that the value of |a|·f(a) is maximum possible, where f(a) is the number of occurences of a in s such that these occurences end in non-forbidden indices. So, for example, if s is aaaa, a is aa and index 3 is forbidden, then f(a) = 2 because there are three occurences of a in s (starting in indices 1, 2 and 3), but one of them (starting in index 2) ends in a forbidden index.</p><p>Calculate the maximum possible value of |a|·f(a) you can get.</p><p>Input<br>The first line contains an integer number n (1 ≤ n ≤ 200000) — the length of s.</p><p>The second line contains a string s, consisting of n lowercase Latin letters.</p><p>The third line contains a string t, consisting of n characters 0 and 1. If i-th character in t is 1, then i is a forbidden index (otherwise i is not forbidden).</p><p>Output<br>Print the maximum possible value of |a|·f(a).</p><p>Examples<br>input<br>5<br>ababa<br>00100<br>output<br>5<br>input<br>5<br>ababa<br>00000<br>output<br>6<br>input<br>5<br>ababa<br>11111<br>output<br>0</p><p>题目链接：<a href="http://codeforces.com/problemset/problem/873/F" target="_blank" rel="noopener">CF 873F</a><br>先构造后缀自动机，然后根据parent树的性质：某一个子树的节点个数就是以这个节点作为结尾的子串的出现次数，建树的时候把可以出现的位置赋值为$1$，否则为$0$，然后对于拷贝的位置全部赋值为$0$（这点很重要），因为它只是作为拷贝，并不属于原字符串；<br>然后自下向上叠加$sum$最后遍历一遍节点更新答案：$ans = \max{L[i].sum * L[i].len}$，怎么自下向上叠加呢，代码用了按照$len$的计数排序，也可以$dfs$……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len;</span><br><span class="line">    LL v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        v = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], x[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    CLR(cnt, <span class="number">0</span>);</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    L[u].v = (LL)x;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span>(t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span>(L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[np].v = <span class="number">0</span>;</span><br><span class="line">            L[np].pre = L[v].pre;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span>(t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len, i;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%s%s"</span>, &amp;len, s[<span class="number">0</span>], s[<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ins(s[<span class="number">0</span>][i] - <span class="string">'a'</span>, (s[<span class="number">1</span>][i] - <span class="string">'0'</span>) ^ <span class="number">1</span>);</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ++cnt[L[i].len];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i = sz - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            x[--cnt[L[i].len]] = i;</span><br><span class="line">        <span class="keyword">for</span>(i = sz - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = x[i];</span><br><span class="line">            L[L[u].pre].v += L[u].v;</span><br><span class="line">            ans = max(ans, (LL)L[u].len * L[u].v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4347 The Closest M Points（KD-tree)</title>
      <link href="/2017/10/15/HDU-4347/"/>
      <url>/2017/10/15/HDU-4347/</url>
      
        <content type="html"><![CDATA[<p>The Closest M Points</p><p>Time Limit: 16000/8000 MS (Java/Others)    Memory Limit: 98304/98304 K (Java/Others)<br>Total Submission(s): 5599    Accepted Submission(s): 1780</p><a id="more"></a><p>Problem Description<br>The course of Software Design and Development Practice is objectionable. ZLC is facing a serious problem .There are many points in K-dimensional space .Given a point. ZLC need to find out the closest m points. Euclidean distance is used as the distance metric between two points. The Euclidean distance between points p and q is the length of the line segment connecting them.In Cartesian coordinates, if p = (p1, p2,…, pn) and q = (q1, q2,…, qn) are two points in Euclidean n-space, then the distance from p to q, or from q to p is given by:</p><p>Can you help him solve this problem?</p><p>Input<br>In the first line of the text file .there are two non-negative integers n and K. They denote respectively: the number of points, 1 &lt;= n &lt;= 50000, and the number of Dimensions,1 &lt;= K &lt;= 5. In each of the following n lines there is written k integers, representing the coordinates of a point. This followed by a line with one positive integer t, representing the number of queries,1 &lt;= t &lt;=10000.each query contains two lines. The k integers in the first line represent the given point. In the second line, there is one integer m, the number of closest points you should find,1 &lt;= m &lt;=10. The absolute value of all the coordinates will not be more than 10000.<br>There are multiple test cases. Process to end of file.</p><p>Output<br>For each query, output m+1 lines:<br>The first line saying :”the closest m points are:” where m is the number of the points.<br>The following m lines representing m points ,in accordance with the order from near to far<br>It is guaranteed that the answer can only be formed in one ways. The distances from the given point to all the nearest m+1 points are different. That means input like this:<br>2 2<br>1 1<br>3 3<br>1<br>2 2<br>1<br>will not exist.</p><p>Sample Input<br>3 2<br>1 1<br>1 3<br>3 4<br>2<br>2 3<br>2<br>2 3<br>1</p><p>Sample Output<br>the closest 2 points are:<br>1 3<br>3 4<br>the closest 1 points are:<br>1 3</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=4347" target="_blank" rel="noopener">HDU 4347</a><br>最后一道$KD-tree$题目，但是$WA$很久，最后发现是$build$的时候节点的$mn$和$mx$忘记赋值了……，这道是最后一道$KD-tree$了，溜了溜了<br>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> n, K, m, idx, rt, sz;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">5</span>], mn[<span class="number">5</span>], mx[<span class="number">5</span>], ls, rs;</span><br><span class="line">    LL v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> KD &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ls = rs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">            d[i] = mn[i] = mx[i] = p.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> KD &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v &lt; rhs.v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N], arr[N], temp, ans[<span class="number">20</span>];</span><br><span class="line">priority_queue&lt;KD&gt;Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> KD &amp;x, <span class="keyword">const</span> KD &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.d[idx] &lt; y.d[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[x].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[x].mn[i] = min(T[x].mn[i], T[T[x].ls].mn[i]);</span><br><span class="line">            T[x].mx[i] = max(T[x].mx[i], T[T[x].ls].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (T[x].rs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[x].mn[i] = min(T[x].mn[i], T[T[x].rs].mn[i]);</span><br><span class="line">            T[x].mx[i] = max(T[x].mx[i], T[T[x].rs].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx = dim % K;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>, cmp);</span><br><span class="line">    T[k = ++sz] = arr[mid];</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim + <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sqr</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Dis</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">        ret += sqr((LL)a[i] - (LL)b[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">partionMin</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.d[i] &lt; T[k].mn[i])</span><br><span class="line">            ret += sqr((LL)T[k].mn[i] - (LL)temp.d[i]);</span><br><span class="line">        <span class="keyword">if</span> (temp.d[i] &gt; T[k].mx[i])</span><br><span class="line">            ret += sqr((LL)temp.d[i] - (LL)T[k].mx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL dm = Dis(T[k].d, temp.d);</span><br><span class="line">    T[k].v = dm;</span><br><span class="line">    <span class="keyword">if</span> (Q.size() &lt; m)</span><br><span class="line">        Q.push(T[k]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T[k].v &lt; Q.top().v)</span><br><span class="line">    &#123;</span><br><span class="line">        Q.pop();</span><br><span class="line">        Q.push(T[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    LL dl = T[k].ls ? partionMin(T[k].ls, temp) : INF, dr = T[k].rs ? partionMin(T[k].rs, temp) : INF;</span><br><span class="line">    <span class="keyword">if</span> (dl &lt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((<span class="keyword">int</span>)Q.size() &lt; m || dl &lt; Q.top().v) &amp;&amp; dl != INF)</span><br><span class="line">            Find(T[k].ls);</span><br><span class="line">        <span class="keyword">if</span> (((<span class="keyword">int</span>)Q.size() &lt; m || dr &lt; Q.top().v) &amp;&amp; dr != INF)</span><br><span class="line">            Find(T[k].rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((<span class="keyword">int</span>)Q.size() &lt; m || dr &lt; Q.top().v) &amp;&amp; dr != INF)</span><br><span class="line">            Find(T[k].rs);</span><br><span class="line">        <span class="keyword">if</span> (((<span class="keyword">int</span>)Q.size() &lt; m || dl &lt; Q.top().v) &amp;&amp; dl != INF)</span><br><span class="line">            Find(T[k].ls);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;K))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; K; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i].d[j]);</span><br><span class="line">        build(rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">                Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; ++i)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp.d[i]);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">            Find(rt);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"the closest %d points are:\n"</span>, m);</span><br><span class="line">            <span class="keyword">for</span> (i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] = Q.top();</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; K; ++j)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i].d[j], <span class="string">" \n"</span>[j == K - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 2648 SJY摆棋子（KD-tree）</title>
      <link href="/2017/10/14/BZOJ-2648/"/>
      <url>/2017/10/14/BZOJ-2648/</url>
      
        <content type="html"><![CDATA[<p>2648: SJY摆棋子</p><p>Time Limit: 20 Sec  Memory Limit: 128 MB<br>Submit: 4766  Solved: 1646<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>这天，SJY显得无聊。在家自己玩。在一个棋盘上，有N个黑色棋子。他每次要么放到棋盘上一个黑色棋子，要么放上一个白色棋子，如果是白色棋子，他会找出距离这个白色棋子最近的黑色棋子。此处的距离是 曼哈顿距离 即(|x1-x2|+|y1-y2|) 。现在给出N&lt;=500000个初始棋子。和M&lt;=500000个操作。对于每个白色棋子，输出距离这个白色棋子最近的黑色棋子的距离。同一个格子可能有多个棋子。</p><p>Input</p><p>第一行两个数 N M<br>以后M行，每行3个数 t x y<br>如果t=1 那么放下一个黑色棋子<br>如果t=2 那么放下一个白色棋子<br>Output</p><p>对于每个T=2 输出一个最小距离</p><p>Sample Input</p><p>2 3</p><p>1 1</p><p>2 3</p><p>2 1 2</p><p>1 3 3</p><p>2 4 2</p><p>Sample Output</p><p>1</p><p>2</p><p>HINT</p><p>kdtree可以过</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2648" target="_blank" rel="noopener">BZOj 2648</a><br>题目本身输入描述有问题，第一行是已经存在$N$个黑棋，然后接下来的$M$行才是操作，因此把$N$个黑棋拿去建树，然后后面的黑棋拿去插到树上，$KD-tree$应用题之一<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs, d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>];</span><br><span class="line">&#125; T[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="keyword">int</span> sz, rt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].ls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[T[k].ls].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[T[k].ls].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (T[k].rs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[T[k].rs].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[T[k].rs].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = ++sz;</span><br><span class="line">    idx = dim;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        T[k].d[i] = T[k].mn[i] = T[k].mx[i] = arr[mid].d[i];</span><br><span class="line">    T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim ^ <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim ^ <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> *d, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">    &#123;</span><br><span class="line">        k = ++sz;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            T[k].d[i] = T[k].mn[i] = T[k].mx[i] = d[i];</span><br><span class="line">        T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[dim] &lt;= T[k].d[dim])</span><br><span class="line">            ins(T[k].ls, d, dim ^ <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ins(T[k].rs, d, dim ^ <span class="number">1</span>);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">0</span>] &gt; T[k].mx[<span class="number">0</span>])</span><br><span class="line">        dx += d[<span class="number">0</span>] - T[k].mx[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">0</span>] &lt; T[k].mn[<span class="number">0</span>])</span><br><span class="line">        dx += T[k].mn[<span class="number">0</span>] - d[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">1</span>] &gt; T[k].mx[<span class="number">1</span>])</span><br><span class="line">        dx += d[<span class="number">1</span>] - T[k].mx[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">1</span>] &lt; T[k].mn[<span class="number">1</span>])</span><br><span class="line">        dx += T[k].mn[<span class="number">1</span>] - d[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> dx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dm = <span class="built_in">abs</span>(T[k].d[<span class="number">0</span>] - d[<span class="number">0</span>]) + <span class="built_in">abs</span>(T[k].d[<span class="number">1</span>] - d[<span class="number">1</span>]);</span><br><span class="line">    ans = min(ans, dm);</span><br><span class="line">    <span class="keyword">int</span> dl = T[k].ls ? partionMin(T[k].ls, d) : <span class="number">2e9</span>, dr = T[k].rs ? partionMin(T[k].rs, d) : <span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">if</span> (dl &lt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dl &lt; ans)</span><br><span class="line">            Find(T[k].ls, d);</span><br><span class="line">        <span class="keyword">if</span> (dr &lt; ans)</span><br><span class="line">            Find(T[k].rs, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dr &lt; ans)</span><br><span class="line">            Find(T[k].rs, d);</span><br><span class="line">        <span class="keyword">if</span> (dl &lt; ans)</span><br><span class="line">            Find(T[k].ls, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, d[<span class="number">2</span>], t, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;arr[i].d[<span class="number">0</span>], &amp;arr[i].d[<span class="number">1</span>]);</span><br><span class="line">        build(rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t, &amp;d[<span class="number">0</span>], &amp;d[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">                ins(rt, d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">2e9</span>;</span><br><span class="line">                Find(rt, d);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 4066 简单题（KD-tree维护多维区间）</title>
      <link href="/2017/10/14/BZOJ-4066/"/>
      <url>/2017/10/14/BZOJ-4066/</url>
      
        <content type="html"><![CDATA[<p>4066: 简单题</p><p>Time Limit: 50 Sec  Memory Limit: 20 MB<br>Submit: 3422  Solved: 891<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>你有一个N*N的棋盘，每个格子内有一个整数，初始时的时候全部为0，现在需要维护两种操作：</p><p>命令<br>参数限制<br>内容<br>1 x y A<br>1&lt;=x,y&lt;=N，A是正整数<br>将格子x,y里的数字加上A<br>2 x1 y1 x2 y2<br>1&lt;=x1&lt;= x2&lt;=N<br>1&lt;=y1&lt;= y2&lt;=N<br>输出x1 y1 x2 y2这个矩形内的数字和<br>3<br>无<br>终止程序<br>Input</p><p>输入文件第一行一个正整数N。<br>接下来每行一个操作。每条命令除第一个数字之外，<br>均要异或上一次输出的答案last_ans，初始时last_ans=0。<br>Output</p><p>对于每个2操作，输出一个对应的答案。<br>Sample Input</p><p>4</p><p>1 2 3 3</p><p>2 1 1 3 3</p><p>1 1 1 1</p><p>2 1 1 0 7</p><p>3<br>Sample Output</p><p>3</p><p>5<br>HINT</p><p>数据规模和约定</p><p>$1&lt;=N&lt;=500000$,操作数不超过$200000$个，内存限制$20M$，保证答案在int范围内并且解码之后数据仍合法。</p><p>样例解释见OJ2683</p><p>新加数据一组，但未重测——2015.05.24</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4066" target="_blank" rel="noopener">BZOJ 4066</a><br>早上开始写的题目，结果把$n$错看成数据组数，用while (n—)来做，一直WA在8000多毫秒处。。最后发现$n$是棋盘大小。。。。<br>这题用$KD-tree$维护高维的区间询问和修改情况，据说单次查询和插入复杂度据说是$O(\sqrt N)$，然后写完发现这不还是个普通$BST$吗，编程复杂度比$treap$简单一些，但是要注意的是$pushup$的时候不能简单地$T[k].sum+=T[son].sum$，因为节点信息维护要用儿子加当前节点来算，即完全重新计算，而不是简单地用$+=$来解决，不然每一次$pushup$的时候早就出错了，然后这题由于点太多，可能导致形态太差，比如<strong>“一条链”</strong>的情况，因此要把每次插入的点记录下来，每次加入的点超过设定的点树就用这些点重新$build$一棵树即可，过程中注意先清空节点原来的信息；<br>查询的时候稍微剪枝一下，比如当前点管理的区域完全在查询区域内，那就直接返回$T[cur].sum$就好了，如果要查询的点管辖的区域跟查询区域完全没交集，那就不用往下查了，跟线段树有一些类似，反正越写越感觉像$treap$。。。。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> v, sum;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ls = rs = <span class="number">0</span>;</span><br><span class="line">        v = sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], v;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz;</span><br><span class="line"><span class="keyword">int</span> _x1, _y1, _x2, _y2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = T[k].ls, r = T[k].rs;</span><br><span class="line">    T[k].sum = T[k].v;</span><br><span class="line">    <span class="keyword">if</span> (l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[l].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[l].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        T[k].sum += T[l].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[r].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[r].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        T[k].sum += T[r].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> d[], <span class="keyword">int</span> v, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">    &#123;</span><br><span class="line">        k = ++sz;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            T[k].d[i] = T[k].mn[i] = T[k].mx[i] = d[i];</span><br><span class="line">        T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">        T[k].v = v;</span><br><span class="line">        T[k].sum = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (T[k].d[<span class="number">0</span>] == d[<span class="number">0</span>] &amp;&amp; T[k].d[<span class="number">1</span>] == d[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].v += v;</span><br><span class="line">            T[k].sum += v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[dim] &lt;= T[k].d[dim])</span><br><span class="line">                ins(T[k].ls, d, v, dim ^ <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ins(T[k].rs, d, v, dim ^ <span class="number">1</span>);</span><br><span class="line">            pushup(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inMat</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _x1 &lt;= x &amp;&amp; xx &lt;= _x2 &amp;&amp; _y1 &lt;= y &amp;&amp; yy &lt;= _y2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">outMat</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _x2 &lt; x || xx &lt; _x1 || _y2 &lt; y || yy &lt; _y1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inMat(T[k].mn[<span class="number">0</span>], T[k].mn[<span class="number">1</span>], T[k].mx[<span class="number">0</span>], T[k].mx[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> T[k].sum;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (inMat(T[k].d[<span class="number">0</span>], T[k].d[<span class="number">1</span>], T[k].d[<span class="number">0</span>], T[k].d[<span class="number">1</span>]))</span><br><span class="line">            ret += T[k].v;</span><br><span class="line">        <span class="keyword">int</span> l = T[k].ls, r = T[k].rs;</span><br><span class="line">        <span class="keyword">if</span> (l &amp;&amp; !outMat(T[l].mn[<span class="number">0</span>], T[l].mn[<span class="number">1</span>], T[l].mx[<span class="number">0</span>], T[l].mx[<span class="number">1</span>]))</span><br><span class="line">            ret += query(l);</span><br><span class="line">        <span class="keyword">if</span> (r &amp;&amp; !outMat(T[r].mn[<span class="number">0</span>], T[r].mn[<span class="number">1</span>], T[r].mx[<span class="number">0</span>], T[r].mx[<span class="number">1</span>]))</span><br><span class="line">            ret += query(r);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = ++sz;</span><br><span class="line">    idx = dim;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>);</span><br><span class="line">    T[k].init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        T[k].mn[i] = T[k].mx[i] = T[k].d[i] = arr[mid].d[i];</span><br><span class="line">    T[k].sum = T[k].v = arr[mid].v;</span><br><span class="line">    T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim ^ <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim ^ <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n, ops;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, flag = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ops) &amp;&amp; ops != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> d[<span class="number">2</span>], v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;d[<span class="number">0</span>], &amp;d[<span class="number">1</span>], &amp;v);</span><br><span class="line">            d[<span class="number">0</span>] ^= ans;</span><br><span class="line">            d[<span class="number">1</span>] ^= ans;</span><br><span class="line">            v ^= ans;</span><br><span class="line">            ins(rt, d, v, <span class="number">0</span>);</span><br><span class="line">            ++cnt, ++flag;</span><br><span class="line">            arr[cnt].d[<span class="number">0</span>] = d[<span class="number">0</span>];</span><br><span class="line">            arr[cnt].d[<span class="number">1</span>] = d[<span class="number">1</span>];</span><br><span class="line">            arr[cnt].v = v;</span><br><span class="line">            <span class="keyword">if</span> (flag &gt;= <span class="number">10000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                init();</span><br><span class="line">                build(rt, <span class="number">1</span>, cnt, <span class="number">0</span>);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;_x1, &amp;_y1, &amp;_x2, &amp;_y2);</span><br><span class="line">            _x1 ^= ans;</span><br><span class="line">            _y1 ^= ans;</span><br><span class="line">            _x2 ^= ans;</span><br><span class="line">            _y2 ^= ans;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = query(rt));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 1941 Hide and Seek（KD-tree求最远点对）</title>
      <link href="/2017/10/13/BZOJ-1941/"/>
      <url>/2017/10/13/BZOJ-1941/</url>
      
        <content type="html"><![CDATA[<p>1941: [Sdoi2010]Hide and Seek</p><p>Time Limit: 16 Sec  Memory Limit: 162 MB<br>Submit: 1453  Solved: 781<br>[Submit][Status][Discuss]<br>Description<br><a id="more"></a><br>小猪iPig在PKU刚上完了无聊的猪性代数课，天资聪慧的iPig被这门对他来说无比简单的课弄得非常寂寞，为了消除寂寞感，他决定和他的好朋友giPi（鸡皮）玩一个更加寂寞的游戏—-捉迷藏。 但是，他们觉得，玩普通的捉迷藏没什么意思，还是不够寂寞，于是，他们决定玩寂寞无比的螃蟹版捉迷藏，顾名思义，就是说他们在玩游戏的时候只能沿水平或垂直方向走。一番寂寞的剪刀石头布后，他们决定iPig去捉giPi。由于他们都很熟悉PKU的地形了，所以giPi只会躲在PKU内n个隐秘地点，显然iPig也只会在那n个地点内找giPi。游戏一开始，他们选定一个地点，iPig保持不动，然后giPi用30秒的时间逃离现场（显然，giPi不会呆在原地）。然后iPig会随机地去找giPi，直到找到为止。由于iPig很懒，所以他到总是走最短的路径，而且，他选择起始点不是随便选的，他想找一个地点，使得该地点到最远的地点和最近的地点的距离差最小。iPig现在想知道这个距离差最小是多少。 由于iPig现在手上没有电脑，所以不能编程解决这个如此简单的问题，所以他马上打了个电话，要求你帮他解决这个问题。iPig告诉了你PKU的n个隐秘地点的坐标，请你编程求出iPig的问题。</p><p>Input</p><p>第一行输入一个整数N 第2~N+1行，每行两个整数X，Y，表示第i个地点的坐标</p><p>Output</p><p>一个整数，为距离差的最小值。</p><p>Sample Input</p><p>4<br>0 0<br>1 0<br>0 1<br>1 1</p><p>Sample Output</p><p>1</p><p>HINT</p><p>对于30%的数据,$N&lt;=1000$ 对于100%的数据，$N&lt;=500000,0&lt;=X,Y&lt;=10^8$ 保证数据没有重点保证$N&gt;=2$</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1941" target="_blank" rel="noopener">BZOJ 1941</a><br>发现之前学的$KD-tree$可用性不高，于是又学了个新的模板，原理和之前学的差不多，也是在搜索时对搜索子树进行估值，然后根据估值进行剪枝，虽说写起来是个$BST$，但是时间复杂度据说还是$O(\sqrt N)$的。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>];</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz, Min, Max;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls, rs = T[k].rs;</span><br><span class="line">    <span class="keyword">if</span> (ls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[ls].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[ls].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[rs].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[rs].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = ++sz;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    idx = dim;</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>);</span><br><span class="line">    T[k].d[<span class="number">0</span>] = T[k].mn[<span class="number">0</span>] = T[k].mx[<span class="number">0</span>] = arr[mid].d[<span class="number">0</span>];</span><br><span class="line">    T[k].d[<span class="number">1</span>] = T[k].mn[<span class="number">1</span>] = T[k].mx[<span class="number">1</span>] = arr[mid].d[<span class="number">1</span>];</span><br><span class="line">    T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim ^ <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim ^ <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">partionMin</span><span class="params">(<span class="keyword">const</span> info &amp;tar, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">0</span>] &gt; T[k].mx[<span class="number">0</span>])</span><br><span class="line">        ret += tar.d[<span class="number">0</span>] - T[k].mx[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">0</span>] &lt; T[k].mn[<span class="number">0</span>])</span><br><span class="line">        ret += T[k].mn[<span class="number">0</span>] - tar.d[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">1</span>] &gt; T[k].mx[<span class="number">1</span>])</span><br><span class="line">        ret += tar.d[<span class="number">1</span>] - T[k].mx[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">1</span>] &lt; T[k].mn[<span class="number">1</span>])</span><br><span class="line">        ret += T[k].mn[<span class="number">1</span>] - tar.d[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">partionMax</span><span class="params">(<span class="keyword">const</span> info &amp;tar, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    ret += max(<span class="built_in">abs</span>(tar.d[<span class="number">0</span>] - T[k].mx[<span class="number">0</span>]), <span class="built_in">abs</span>(tar.d[<span class="number">0</span>] - T[k].mn[<span class="number">0</span>]));</span><br><span class="line">    ret += max(<span class="built_in">abs</span>(tar.d[<span class="number">1</span>] - T[k].mx[<span class="number">1</span>]), <span class="built_in">abs</span>(tar.d[<span class="number">1</span>] - T[k].mn[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">const</span> info &amp;a, <span class="keyword">const</span> KD &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.d[<span class="number">0</span>] - b.d[<span class="number">0</span>]) + <span class="built_in">abs</span>(a.d[<span class="number">1</span>] - b.d[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindMin</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">const</span> info &amp;tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dm = dis(tar, T[k]);</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls;</span><br><span class="line">    <span class="keyword">int</span> rs = T[k].rs;</span><br><span class="line">    <span class="keyword">int</span> dl = ls ? partionMin(tar, ls) : INF;</span><br><span class="line">    <span class="keyword">int</span> dr = rs ? partionMin(tar, rs) : INF;</span><br><span class="line">    <span class="keyword">if</span> (dm)</span><br><span class="line">        Min = min(Min, dm);</span><br><span class="line">    <span class="keyword">if</span> (dl &lt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dl &lt; Min)</span><br><span class="line">            FindMin(ls, tar);</span><br><span class="line">        <span class="keyword">if</span> (dr &lt; Min)</span><br><span class="line">            FindMin(rs, tar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dr &lt; Min)</span><br><span class="line">            FindMin(rs, tar);</span><br><span class="line">        <span class="keyword">if</span> (dl &lt; Min)</span><br><span class="line">            FindMin(ls, tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindMax</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">const</span> info &amp;tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dm = dis(tar, T[k]);</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls;</span><br><span class="line">    <span class="keyword">int</span> rs = T[k].rs;</span><br><span class="line">    <span class="keyword">int</span> dl = ls ? partionMax(tar, ls) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> dr = rs ? partionMax(tar, rs) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dm)</span><br><span class="line">        Max = max(Max, dm);</span><br><span class="line">    <span class="keyword">if</span> (dl &gt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dl &gt; Max)</span><br><span class="line">            FindMax(ls, tar);</span><br><span class="line">        <span class="keyword">if</span> (dr &gt; Max)</span><br><span class="line">            FindMax(rs, tar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dr &gt; Max)</span><br><span class="line">            FindMax(rs, tar);</span><br><span class="line">        <span class="keyword">if</span> (dl &gt; Max)</span><br><span class="line">            FindMax(ls, tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;arr[i].d[<span class="number">0</span>], &amp;arr[i].d[<span class="number">1</span>]);</span><br><span class="line">        build(rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Min = INF;</span><br><span class="line">            Max = <span class="number">-1</span>;</span><br><span class="line">            FindMin(<span class="number">1</span>, arr[i]);</span><br><span class="line">            FindMax(<span class="number">1</span>, arr[i]);</span><br><span class="line">            ans = min(ans, Max - Min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2966 In case of failure（二维KD-tree入门题）</title>
      <link href="/2017/10/13/HDU-2966/"/>
      <url>/2017/10/13/HDU-2966/</url>
      
        <content type="html"><![CDATA[<p>In case of failure</p><p>Time Limit: 60000/30000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 2354    Accepted Submission(s): 985</p><a id="more"></a><p>Problem Description<br>To help their clients deal with faulty Cash Machines, the board of The Planar Bank has decided to stick a label expressing sincere regret and sorrow of the bank about the failure on every ATM. The very same label would gently ask the customer to calmly head to the nearest Machine (that should hopefully<br>work fine).</p><p>In order to do so, a list of two-dimensional locations of all n ATMs has been prepared, and your task is to find for each of them the one closest with respect to the Euclidean distance.</p><p>Input<br>The input contains several test cases. The very first line contains the number of cases t (t &lt;= 15) that follow. Each test cases begin with the number of Cash Machines n (2 &lt;= n &lt;= 10^5). Each of the next n lines contain the coordinates of one Cash Machine x,y (0 &lt;= x,y &lt;=10^9) separated by a space. No two<br>points in one test case will coincide.</p><p>Output<br>For each test case output n lines. i-th of them should contain the squared distance between the i-th ATM from the input and its nearest neighbour.</p><p>Sample Input<br>2<br>10<br>17 41<br>0 34<br>24 19<br>8 28<br>14 12<br>45 5<br>27 31<br>41 11<br>42 45<br>36 27<br>15<br>0 0<br>1 2<br>2 3<br>3 2<br>4 0<br>8 4<br>7 4<br>6 3<br>6 1<br>8 0<br>11 0<br>12 2<br>13 1<br>14 2<br>15 0</p><p>Sample Output<br>200<br>100<br>149<br>100<br>149<br>52<br>97<br>52<br>360<br>97<br>5<br>2<br>2<br>2<br>5<br>1<br>1<br>2<br>4<br>5<br>5<br>2<br>2<br>2<br>5</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=2966" target="_blank" rel="noopener">HDU 2966</a><br>$KD-tree$的入门题，每一维都当成$BST$，动态开点优化空间复杂度至$O(N)$就可以直接写完1A，当然自己显然不能和自己<strong>“最邻近”</strong>，因此除了记录最短距离还要记录最短距离的另一个点是谁，只有当这点不是自己时才能更新最短距离；最后由于建树过程中会对原数组排序变动，而题目要按输入顺序输出询问，因此再用一个$rev[]$数组映射一下第$i$的点在第变动后数组下标为$rev[i]$。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, <span class="keyword">int</span> &gt; PL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs, id;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> KD &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N], arr[N];</span><br><span class="line"><span class="keyword">int</span> sz, rt, rev[N];</span><br><span class="line">PL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = idx = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls;</span><br><span class="line">    <span class="keyword">int</span> rs = T[k].rs;</span><br><span class="line">    <span class="keyword">if</span>(ls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[ls].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[ls].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[rs].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[rs].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sqr</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">dis</span><span class="params">(KD a, KD b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqr((LL)a.d[<span class="number">0</span>] - (LL)b.d[<span class="number">0</span>]) + sqr((LL)a.d[<span class="number">1</span>] - (LL)b.d[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">getMin</span><span class="params">(<span class="keyword">int</span> k, KD tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tar.d[<span class="number">0</span>] &gt; T[k].mx[<span class="number">0</span>])</span><br><span class="line">        ret += sqr(tar.d[<span class="number">0</span>] - T[k].mx[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(tar.d[<span class="number">0</span>] &lt; T[k].mn[<span class="number">0</span>])</span><br><span class="line">        ret += sqr(T[k].mn[<span class="number">0</span>] - tar.d[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(tar.d[<span class="number">1</span>] &gt; T[k].mx[<span class="number">1</span>])</span><br><span class="line">        ret += sqr(tar.d[<span class="number">1</span>] - T[k].mx[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(tar.d[<span class="number">1</span>] &lt; T[k].mn[<span class="number">1</span>])</span><br><span class="line">        ret += sqr(T[k].mn[<span class="number">1</span>] - tar.d[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = ++sz;</span><br><span class="line">    idx = dim;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>);</span><br><span class="line">    T[k] = arr[mid];</span><br><span class="line">    rev[arr[mid].id] = mid;</span><br><span class="line">    T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid - <span class="number">1</span>)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim ^ <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim ^ <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">const</span> KD &amp;tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL dm = dis(T[k], tar);</span><br><span class="line">    <span class="keyword">if</span>(dm &amp;&amp; dm &lt; ans.first)</span><br><span class="line">        ans = &#123;dm, T[k].id&#125;;</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls, rs = T[k].rs;</span><br><span class="line">    LL dl = ls ? getMin(ls, tar) : INF, dr = rs ? getMin(rs, tar) : INF;</span><br><span class="line">    <span class="keyword">if</span>(dl &lt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dl &lt; ans.first)</span><br><span class="line">            Find(ls, tar);</span><br><span class="line">        <span class="keyword">if</span>(dr &lt; ans.first)</span><br><span class="line">            Find(rs, tar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dr &lt; ans.first)</span><br><span class="line">            Find(rs, tar);</span><br><span class="line">        <span class="keyword">if</span>(dl &lt; ans.first)</span><br><span class="line">            Find(ls, tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span>(TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;arr[i].d[<span class="number">0</span>], &amp;arr[i].d[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j)</span><br><span class="line">                arr[i].mn[j] = arr[i].mx[j] = arr[i].d[j];</span><br><span class="line">            arr[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        build(rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.first = INF;</span><br><span class="line">            Find(<span class="number">1</span>, arr[rev[i]]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans.first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5992 Finding Hotels（三维KD-tree）</title>
      <link href="/2017/10/13/HDU-5992/"/>
      <url>/2017/10/13/HDU-5992/</url>
      
        <content type="html"><![CDATA[<p>Finding Hotels</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 102400/102400 K (Java/Others)<br>Total Submission(s): 1086    Accepted Submission(s): 304</p><a id="more"></a><p>Problem Description<br>There are N hotels all over the world. Each hotel has a location and a price. M guests want to find a hotel with an acceptable price and a minimum distance from their locations. The distances are measured in Euclidean metric.</p><p>Input<br>The first line is the number of test cases. For each test case, the first line contains two integers N (N ≤ 200000) and M (M ≤ 20000). Each of the following N lines describes a hotel with 3 integers x (1 ≤ x ≤ N), y (1 ≤ y ≤ N) and c (1 ≤ c ≤ N), in which x and y are the coordinates of the hotel, c is its price. It is guaranteed that each of the N hotels has distinct x, distinct y, and distinct c. Then each of the following M lines describes the query of a guest with 3 integers x (1 ≤ x ≤ N), y (1 ≤ y ≤ N) and c (1 ≤ c ≤ N), in which x and y are the coordinates of the guest, c is the maximum acceptable price of the guest.</p><p>Output<br>For each guests query, output the hotel that the price is acceptable and is nearest to the guests location. If there are multiple hotels with acceptable prices and minimum distances, output the first one.</p><p>Sample Input<br>2<br>3 3<br>1 1 1<br>3 2 3<br>2 3 2<br>2 2 1<br>2 2 2<br>2 2 3<br>5 5<br>1 4 4<br>2 1 2<br>4 5 3<br>5 2 1<br>3 3 5<br>3 3 1<br>3 3 2<br>3 3 3<br>3 3 4<br>3 3 5</p><p>Sample Output<br>1 1 1<br>2 3 2<br>3 2 3<br>5 2 1<br>2 1 2<br>2 1 2<br>1 4 4<br>3 3 5</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5992" target="_blank" rel="noopener">HDU 5992</a><br>很久以前就想学$KD-tree$来着，然而一直都看不懂直到补这题的时候发现代码简单明了，还真的跟$BST$一样<br>然后发现KD-tree其实是个真·点树，因为他一个树上的节点刚好对应一个空间里的点，即$[l,r]$自己的节点是$[mid,mid]$左子树是$[l,mid-1]$,右子树是$[mid+1,r]$，这样一来一个空间点刚好对应一个树上节点，那么如果用动态建树来构造$KD-tree$的话空间复杂度就是$O(N)$的了。<br>想到这里赶紧写了一发动态建树想一发AC，结果由于很久没写动态建树把记录节点个数的$sz$拿去当根节点$rt$来用了……WA了一个晚上，然后看了下以前写的$treap$才发现是这个低级错误（弱校选手真的惨……）<br>给一个学习$KD-tree$很好的博客：<a href="http://blog.csdn.net/acdreamers/article/details/44664645" target="_blank" rel="noopener"><strong>AC_dreamer大佬</strong></a></p><p>然后讲一下我的理解：$KD-tree$就是按照节点深度来得到这个深度应该管理的某一维度$dim(dimension)$，不用管其他的维度，正是因为这个特性，所以节点存坐标的时候最好不要分开存，就用数组代表点在空间，这样既可以当成向量，也可以用全局变量更方便地排序。用$d[0]$和$d[1]$表示两个坐标值，$d[2]$表示hotel的价格，某一深度层的节点就是按照某维度排序，当做关键字来构造$BST$，然后查询的时候先估计一下个各个子树预计最长距离为多少，然后按优先顺序去$dfs$，当然某个点管辖范围内的最低旅馆价格如果都大于接受价格，说明这个点和其管辖的点集内均不存在符合要求的点，预估计距离就是$\infty$。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs, v, id;</span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">3</span>], mn[<span class="number">3</span>], mx[<span class="number">3</span>];</span><br><span class="line">&#125; T[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">3</span>], id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d[idx] &lt; rhs.d[idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="keyword">int</span> rt, sz, rev[N];</span><br><span class="line">pair&lt;LL, <span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls, rs = T[k].rs;</span><br><span class="line">    <span class="keyword">if</span> (ls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[ls].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[ls].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k].mn[i] = min(T[k].mn[i], T[rs].mn[i]);</span><br><span class="line">            T[k].mx[i] = max(T[k].mx[i], T[rs].mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = ++sz;</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    idx = dim % <span class="number">3</span>;</span><br><span class="line">    nth_element(arr + l, arr + mid, arr + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        T[k].d[i] = T[k].mn[i] = T[k].mx[i] = arr[mid].d[i];</span><br><span class="line">    T[k].id = arr[mid].id;</span><br><span class="line">    rev[arr[mid].id] = mid;</span><br><span class="line">    T[k].ls = T[k].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid)</span><br><span class="line">        build(T[k].ls, l, mid - <span class="number">1</span>, dim + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)</span><br><span class="line">        build(T[k].rs, mid + <span class="number">1</span>, r, dim + <span class="number">1</span>);</span><br><span class="line">    pushup(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">sqr</span><span class="params">(<span class="keyword">const</span> LL &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">dis</span><span class="params">(<span class="keyword">const</span> info &amp;a, <span class="keyword">const</span> KD &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqr((LL)a.d[<span class="number">0</span>] - (LL)b.d[<span class="number">0</span>]) + sqr((LL)a.d[<span class="number">1</span>] - (LL)b.d[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">partionMin</span><span class="params">(<span class="keyword">const</span> info &amp;tar, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].mn[<span class="number">2</span>] &gt; tar.d[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">0</span>] &gt; T[k].mx[<span class="number">0</span>])</span><br><span class="line">        ret += sqr(tar.d[<span class="number">0</span>] - T[k].mx[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">0</span>] &lt; T[k].mn[<span class="number">0</span>])</span><br><span class="line">        ret += sqr(T[k].mn[<span class="number">0</span>] - tar.d[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">1</span>] &gt; T[k].mx[<span class="number">1</span>])</span><br><span class="line">        ret += sqr(tar.d[<span class="number">1</span>] - T[k].mx[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (tar.d[<span class="number">1</span>] &lt; T[k].mn[<span class="number">1</span>])</span><br><span class="line">        ret += sqr(T[k].mn[<span class="number">1</span>] - tar.d[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindMin</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">const</span> info &amp;tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL dm = dis(tar, T[k]);</span><br><span class="line">    <span class="keyword">if</span> (T[k].d[<span class="number">2</span>] &lt;= tar.d[<span class="number">2</span>] &amp;&amp; (dm &lt; ans.first || (dm == ans.first &amp;&amp; T[k].id &lt; ans.second)))</span><br><span class="line">        ans = &#123;dm, T[k].id&#125;;</span><br><span class="line">    <span class="keyword">int</span> ls = T[k].ls;</span><br><span class="line">    <span class="keyword">int</span> rs = T[k].rs;</span><br><span class="line">    LL dl = ls ? partionMin(tar, ls) : INF;</span><br><span class="line">    LL dr = rs ? partionMin(tar, rs) : INF;</span><br><span class="line">    <span class="keyword">if</span> (dl &lt; dr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dl &lt;= ans.first)</span><br><span class="line">            FindMin(ls, tar);</span><br><span class="line">        <span class="keyword">if</span> (dr &lt;= ans.first)</span><br><span class="line">            FindMin(rs, tar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dr &lt;= ans.first)</span><br><span class="line">            FindMin(rs, tar);</span><br><span class="line">        <span class="keyword">if</span> (dl &lt;= ans.first)</span><br><span class="line">            FindMin(ls, tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;arr[i].d[<span class="number">0</span>], &amp;arr[i].d[<span class="number">1</span>], &amp;arr[i].d[<span class="number">2</span>]);</span><br><span class="line">            arr[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        build(rt, <span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            info tar;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;tar.d[<span class="number">0</span>], &amp;tar.d[<span class="number">1</span>], &amp;tar.d[<span class="number">2</span>]);</span><br><span class="line">            ans.first = INF + <span class="number">1</span>;</span><br><span class="line">            FindMin(<span class="number">1</span>, tar);</span><br><span class="line">            <span class="keyword">int</span> x = rev[ans.second];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, arr[x].d[<span class="number">0</span>], arr[x].d[<span class="number">1</span>], arr[x].d[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> KD-tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KD-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5441 Travel（离线+并查集）</title>
      <link href="/2017/10/12/HDU-5441/"/>
      <url>/2017/10/12/HDU-5441/</url>
      
        <content type="html"><![CDATA[<p>Travel</p><p>Time Limit: 1500/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 4140    Accepted Submission(s): 1392</p><a id="more"></a><p>Problem Description<br>Jack likes to travel around the world, but he doesn’t like to wait. Now, he is traveling in the Undirected Kingdom. There are n cities and m bidirectional roads connecting the cities. Jack hates waiting too long on the bus, but he can rest at every city. Jack can only stand staying on the bus for a limited time and will go berserk after that. Assuming you know the time it takes to go from one city to another and that the time Jack can stand staying on a bus is x minutes, how many pairs of city (a,b) are there that Jack can travel from city a to b without going berserk?</p><p>Input<br>The first line contains one integer T,T≤5, which represents the number of test case.</p><p>For each test case, the first line consists of three integers n,m and q where n≤20000,m≤100000,q≤5000. The Undirected Kingdom has n cities and m bidirectional roads, and there are q queries.</p><p>Each of the following m lines consists of three integers a,b and d where a,b∈{1,…,n} and d≤100000. It takes Jack d minutes to travel from city a to city b and vice versa.</p><p>Then q lines follow. Each of them is a query consisting of an integer x where x is the time limit before Jack goes berserk.</p><p>Output<br>You should print q lines for each test case. Each of them contains one integer as the number of pair of cities (a,b) which Jack may travel from a to b within the time limit x.</p><p>Note that (a,b) and (b,a) are counted as different pairs and a and b must be different cities.</p><p>Sample Input<br>1<br>5 5 3<br>2 3 6334<br>1 5 15724<br>3 5 5705<br>4 3 12382<br>1 3 21726<br>6000<br>10000<br>13000</p><p>Sample Output<br>2<br>6<br>12</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5441" target="_blank" rel="noopener">HDU 5441</a><br>这题由于不强制在线，因此可以按照询问的权值依次加入符合要求的边，答案显然就是$\sum_{i=1}^{k} Size(i)*(Size(i)-1)$，其中$k$是当前集合个数，$Size(i)$表示第$i$个集合的大小，由于每一次只会改变合并集合的大小，因此不需要每次都遍历所有的集合来统计答案，只要在合并的时候减去合并前的贡献，加上合并后的贡献就可以了<br>由于一条边只会被加入一次，因此总复杂度大约是$O(MlogM+M)$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q = <span class="number">5010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> edge &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; rhs.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; E[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; rhs.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; query[Q];</span><br><span class="line"><span class="keyword">int</span> pre[N], ran[N];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> ans[Q];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">        ran[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre[n] == n ? n : pre[n] = Find(pre[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = Find(a);</span><br><span class="line">    b = Find(b);</span><br><span class="line">    <span class="keyword">if</span>(a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[b] = a;</span><br><span class="line">        sum -= ran[a] * (ran[a] - <span class="number">1</span>);</span><br><span class="line">        sum -= ran[b] * (ran[b] - <span class="number">1</span>);</span><br><span class="line">        ran[a] += ran[b];</span><br><span class="line">        ran[b] = <span class="number">0</span>;</span><br><span class="line">        sum += ran[a] * (ran[a] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">        init();</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].w);</span><br><span class="line">        sort(E, E + m);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;query[i].w);</span><br><span class="line">            query[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(query, query + q);</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; m &amp;&amp; E[cur].w &lt;= query[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                Merge(E[cur].u, E[cur].v);</span><br><span class="line">                ++cur;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[query[i].id] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 并查集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5437 Alisha’s Party（模拟+优先队列）</title>
      <link href="/2017/10/11/HDU-5437/"/>
      <url>/2017/10/11/HDU-5437/</url>
      
        <content type="html"><![CDATA[<p>Alisha’s Party</p><p>Time Limit: 3000/2000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 6516    Accepted Submission(s): 1569</p><a id="more"></a><p>Problem Description<br>Princess Alisha invites her friends to come to her birthday party. Each of her friends will bring a gift of some value v, and all of them will come at a different time. Because the lobby is not large enough, Alisha can only let a few people in at a time. She decides to let the person whose gift has the highest value enter first.</p><p>Each time when Alisha opens the door, she can decide to let p people enter her castle. If there are less than p people in the lobby, then all of them would enter. And after all of her friends has arrived, Alisha will open the door again and this time every friend who has not entered yet would enter.</p><p>If there are two friends who bring gifts of the same value, then the one who comes first should enter first. Given a query n Please tell Alisha who the n−th person to enter her castle is.</p><p>Input<br>The first line of the input gives the number of test cases, T , where 1≤T≤15.</p><p>In each test case, the first line contains three numbers k,m and q separated by blanks. k is the number of her friends invited where 1≤k≤150,000. The door would open m times before all Alisha’s friends arrive where 0≤m≤k. Alisha will have q queries where 1≤q≤100.</p><p>The i−th of the following k lines gives a string Bi, which consists of no more than 200 English characters, and an integer vi, 1≤vi≤108, separated by a blank. Bi is the name of the i−th person coming to Alisha’s party and Bi brings a gift of value vi.</p><p>Each of the following m lines contains two integers t(1≤t≤k) and p(0≤p≤k) separated by a blank. The door will open right after the t−th person arrives, and Alisha will let p friends enter her castle.</p><p>The last line of each test case will contain q numbers n1,…,nq separated by a space, which means Alisha wants to know who are the n1−th,…,nq−th friends to enter her castle.</p><p>Note: there will be at most two test cases containing n&gt;10000.</p><p>Output<br>For each test case, output the corresponding name of Alisha’s query, separated by a space.</p><p>Sample Input<br>1<br>5 2 3<br>Sorey 3<br>Rose 3<br>Maltran  3<br>Lailah 5<br>Mikleo  6<br>1 1<br>4 2<br>1 2 3</p><p>Sample Output<br>Sorey Lailah Rose</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5437" target="_blank" rel="noopener">HDU 5437</a><br>就是一到模拟题，但是题目看漏了个条件最后一定会开门导致了几次次…，加上一开始用string输入输出还T了几发（惨）<br>一看就感觉是个模拟题，但是肯定要稍微优化一下时间复杂度，那么我们肯定要顺序处理出先后到来的人然后直接回答询问，用优先队列模拟排队，然后每一次开门从队列里取出$p$个人，注意当队列为空就要$break$了，然后由于最后一定会开门，那直接在开门时间后面再加一组${n,\infty }$询问即可，$query[]$忘记映射又WA几发……阿席巴<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">int</span> val, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> info &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (val &lt; rhs.val) || (val == rhs.val &amp;&amp; id &gt; rhs.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; arr[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t, p;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> data &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; rhs.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">int</span> query[N];</span><br><span class="line">priority_queue&lt;info&gt;Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, k, m, q, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">            Q.pop();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;m, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, arr[i].name, &amp;arr[i].val);</span><br><span class="line">            arr[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T[i].t, &amp;T[i].p);</span><br><span class="line">        T[++m].p = INF;</span><br><span class="line">        T[m].t = k;</span><br><span class="line">        sort(T + <span class="number">1</span>, T + m + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> maxq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;query[i]);</span><br><span class="line">            maxq = max(maxq, query[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        CLR(ans, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m &amp;&amp; id &lt;= maxq; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt;= T[i].t &amp;&amp; cur &lt;= k)</span><br><span class="line">                Q.push(arr[cur++]);</span><br><span class="line">            <span class="keyword">if</span> (cur == k + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[++id] = Q.top().id;</span><br><span class="line">                    Q.pop();</span><br><span class="line">                    <span class="keyword">if</span> (id &gt; maxq)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (T[i].p &amp;&amp; !Q.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    --T[i].p;</span><br><span class="line">                    ans[++id] = Q.top().id;</span><br><span class="line">                    Q.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s%c"</span>, arr[ans[query[i]]].name, <span class="string">" \n"</span>[i == q]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 5442 Favorite Donut（后缀数组+RMQ|最大表示法+KMP）</title>
      <link href="/2017/10/11/HDU-5442/"/>
      <url>/2017/10/11/HDU-5442/</url>
      
        <content type="html"><![CDATA[<p>Favorite Donut</p><p>Time Limit: 1500/1000 MS (Java/Others)    Memory Limit: 131072/131072 K (Java/Others)<br>Total Submission(s): 3671    Accepted Submission(s): 919</p><a id="more"></a><p>Problem Description<br>Lulu has a sweet tooth. Her favorite food is ring donut. Everyday she buys a ring donut from the same bakery. A ring donut is consists of n parts. Every part has its own sugariness that can be expressed by a letter from a to z (from low to high), and a ring donut can be expressed by a string whose i-th character represents the sugariness of the i−th part in clockwise order. Note that z is the sweetest, and two parts are equally sweet if they have the same sugariness.</p><p>Once Lulu eats a part of the donut, she must continue to eat its uneaten adjacent part until all parts are eaten. Therefore, she has to eat either clockwise or counter-clockwise after her first bite, and there are 2n ways to eat the ring donut of n parts. For example, Lulu has 6 ways to eat a ring donut abc: abc,bca,cab,acb,bac,cba. Lulu likes eating the sweetest part first, so she actually prefer the way of the greatest lexicographic order. If there are two or more lexicographic maxima, then she will prefer the way whose starting part has the minimum index in clockwise order. If two ways start at the same part, then she will prefer eating the donut in clockwise order. Please compute the way to eat the donut she likes most.</p><p>Input<br>First line contain one integer T,T≤20, which means the number of test case.</p><p>For each test case, the first line contains one integer n,n≤20000, which represents how many parts the ring donut has. The next line contains a string consisted of n lowercase alphabets representing the ring donut.</p><p>Output<br>You should print one line for each test case, consisted of two integers, which represents the starting point (from 1 to n) and the direction (0 for clockwise and 1 for counterclockwise).</p><p>Sample Input<br>2<br>4<br>abab<br>4<br>aaab</p><p>Sample Output<br>2 0<br>4 0</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=5442" target="_blank" rel="noopener">HDU 5442</a><br>看到是最近学过的字符串就滚过来写这题了，看了下题意感觉可以做，应该是复制两倍后后缀数组然后瞎搞搞就行了，然而在最后的求逆序位置方向和判断输出上WA了好几发，惨……<br>题意就是求出给定的可循环字符串的最大字典序排列的位置和方向（逆时针或瞬时间），既然是循环字符串显然要复制一倍放到末尾，然后做一遍$SA$，然后由于字典序最大的时候要起始点最小，因此按排名逆序枚举$sa[i]$数组，当$sa[i] \lt len$或者$sa[i]$使得$lcp(pos, sa[i]) \ge len$就更新答案，如果有排名$sa[i]$使得$lcp(pos, sa[i]) \ge len$时，说明从$sa[i]$和当前答案处开始都可以得到最大字典序，那么当前答案要看情况更新一下，下面的逆序同理也要这样判断更新<br>然后求逆时针走的最大字典序的最小起始位置，先把串翻转再复制一遍做一次$SA$，然后我们还是按照排名逆序枚举，当然翻转之后我们的枚举位置为$sa[i]$，实际在原串的下标为$len - sa[i] + 1$，因此我们要让$sa[i]$尽量大。<br>最后从各自开始位置比较两个串的字典序大小，如果都一样，就看起始位置大小，如果起始位置都一样，就按顺时针走</p><p>赛后看题解发现用最大表示+$KMP$的做法更简单，顺时针的只要用最大表示法得到的就是最靠左的答案了，逆时针的先把原串翻转一下，得到此时逆时针的最大表示串$max(S’)$（此时下标是最小的，而逆时针下最大的下标才是我们要的），再复制一遍翻转串变成$S’S’$，在$S’S’$里找到最大的匹配起始位置，然后再根据题意映射回原来的下标，再和顺时针的进行比较得出答案，注意比较的时候记得$break$，这里$WA$了一发<br>后缀数组代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40050</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N], wb[N], sa[N], cnt[N], ran[N], height[N], dp[N][<span class="number">17</span>];</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> r[], <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + d] == r[b + d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gethgt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ran[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            --k;</span><br><span class="line">        <span class="keyword">int</span> j = sa[ran[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (s[j + k] == s[i + k])</span><br><span class="line">            ++k;</span><br><span class="line">        height[ran[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQinit</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        dp[i][<span class="number">0</span>] = height[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; l + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)) - <span class="number">1</span> &lt;= r; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)) - <span class="number">1</span> &lt;= r; ++i)</span><br><span class="line">            dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        swap(l, r);</span><br><span class="line">    <span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>) &lt;= len)</span><br><span class="line">        ++k;</span><br><span class="line">    <span class="keyword">return</span> min(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rl = ran[l];</span><br><span class="line">    <span class="keyword">int</span> rr = ran[r];</span><br><span class="line">    <span class="keyword">if</span> (rl &gt; rr)</span><br><span class="line">        swap(rl, rr);</span><br><span class="line">    <span class="keyword">if</span> (rl == rr)</span><br><span class="line">        <span class="keyword">return</span> n - sa[rl];</span><br><span class="line">    <span class="keyword">return</span> ST(rl + <span class="number">1</span>, rr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, *x = wa, *y = wb;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ++cnt[x[i] = s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        sa[--cnt[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = n - k; i &lt; n; ++i)</span><br><span class="line">            y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= k)</span><br><span class="line">                y[p++] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ++cnt[x[y[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            sa[--cnt[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x, y);</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            x[sa[i]] = cmp(y, sa[i - <span class="number">1</span>], sa[i], k) ? p - <span class="number">1</span> : p++;</span><br><span class="line">        m = p;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        CLR(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            s[i + n] = s[i];</span><br><span class="line">        s[n * <span class="number">2</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        DA(<span class="number">2</span> * n + <span class="number">1</span>, <span class="string">'z'</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> p = INF, rp = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = n * <span class="number">2</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &lt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p == INF || lcp(p, sa[i]) &gt;= n)</span><br><span class="line">                    p = min(p, sa[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">strcpy</span>(t, s);</span><br><span class="line">        reverse(s, s + <span class="number">2</span> * n);</span><br><span class="line">        s[n * <span class="number">2</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        DA(<span class="number">2</span> * n + <span class="number">1</span>, <span class="string">'z'</span> + <span class="number">1</span>);</span><br><span class="line">        gethgt(<span class="number">2</span> * n);</span><br><span class="line">        RMQinit(<span class="number">1</span>, <span class="number">2</span> * n);</span><br><span class="line">        <span class="keyword">for</span> (i = n * <span class="number">2</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &lt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (rp == <span class="number">-1</span> || lcp(rp, sa[i]) &gt;= n)</span><br><span class="line">                    rp = max(rp, sa[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[(p + i) % n] &gt; s[(rp + i) % n])</span><br><span class="line">            &#123;</span><br><span class="line">                c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (t[(p + i) % n] &lt; s[(rp + i) % n])</span><br><span class="line">            &#123;</span><br><span class="line">                c = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rp = n - rp;</span><br><span class="line">        ++p;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">-1</span>)<span class="comment">//字典序一样的情况</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &lt;= rp)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, p);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 1\n"</span>, rp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, p);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 1\n"</span>, rp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最大表示+$KMP$代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N], tt[N];</span><br><span class="line"><span class="keyword">int</span> nxt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = nxt[<span class="number">0</span>] =  <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || s[j] == s[k])</span><br><span class="line">            nxt[++j] = ++k;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k = nxt[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> t[], <span class="keyword">int</span> nxt[], <span class="keyword">int</span> la, <span class="keyword">int</span> lb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; la &amp;&amp; j &lt; lb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == t[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (j == lb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - lb &lt; lb)</span><br><span class="line">                last = i - lb;</span><br><span class="line">            j = nxt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPresent</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>, k = <span class="number">0</span>, t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len &amp;&amp; j &lt; len &amp;&amp; k &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        t = s[(i + k) % len ] - s[(j + k) % len ];</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            ++k;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; <span class="number">0</span>)</span><br><span class="line">                i += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                j += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                ++j;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;len, s);</span><br><span class="line">        <span class="keyword">int</span> p1 = maxPresent(s, len);</span><br><span class="line">        <span class="built_in">strcpy</span>(t, s);</span><br><span class="line">        reverse(t, t + len);</span><br><span class="line">        <span class="keyword">int</span> p2 = maxPresent(t, len);</span><br><span class="line">        t[len] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(tt, t);</span><br><span class="line">        tt[len] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(tt, t);</span><br><span class="line">        tt[len &lt;&lt; <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            t[i] = tt[p2 + i];</span><br><span class="line">        t[len] = <span class="string">'\0'</span>;</span><br><span class="line">        getnext(t, len);</span><br><span class="line">        p2 = kmp(tt, t, nxt, len &lt;&lt; <span class="number">1</span>, len);</span><br><span class="line">        <span class="keyword">int</span> big = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[(p1 + i) % len] &gt; tt[p2 + i])</span><br><span class="line">            &#123;</span><br><span class="line">                big = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[(p1 + i) % len] &lt; tt[p2 + i])</span><br><span class="line">            &#123;</span><br><span class="line">                big = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++p1;</span><br><span class="line">        p2 = (len - <span class="number">1</span> - p2);</span><br><span class="line">        ++p2;</span><br><span class="line">        <span class="keyword">if</span> (big == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 &lt;= p2)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, p1);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 1\n"</span>, p2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (big == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, p1);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d 1\n"</span>, p2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀数组 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ LCS Longest Common Substring（后缀自动机）</title>
      <link href="/2017/10/09/SPOJ-LCS/"/>
      <url>/2017/10/09/SPOJ-LCS/</url>
      
        <content type="html"><![CDATA[<p>LCS - Longest Common Substring<br>no tags<br>A string is finite sequence of characters over a non-empty finite set Σ.<br><a id="more"></a><br>In this problem, Σ is the set of lowercase letters.</p><p>Substring, also called factor, is a consecutive sequence of characters occurrences at least once in a string.</p><p>Now your task is simple, for two given strings, find the length of the longest common substring of them.</p><p>Here common substring means a substring of two or more strings.</p><p>Input</p><p>The input contains exactly two lines, each line consists of no more than 250000 lowercase letters, representing a string.</p><p>Output</p><p>The length of the longest common substring. If such string doesn’t exist, print “0” instead.</p><p>Example</p><p>Input:<br>alsdfkjfjkdsal<br>fdjskalajfkdsla</p><p>Output:<br>3</p><p>题目链接：<a href="http://www.spoj.com/problems/LCS/" target="_blank" rel="noopener">SPOJ LCS</a><br>后缀自动机是个好东西，把一串建立$SAM$后拿另一串去匹配，这样就可以$O(N)$地回答任意询问串与主串的最长公共子串，原理是利用了$SAM$中$fail$指向的是和当前遍历到的子串的最长公共后缀的结尾位置，随着$fail$的迭代，$len$必定越来越小，因此找到的第一个可以接下去的合法位置，就是可以接在当前失配字符后面条件下最长公共后缀子串即最优的答案。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span>(L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</span><br><span class="line">        <span class="keyword">int</span> ls = <span class="built_in">strlen</span>(s), lt = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ls; ++i)</span><br><span class="line">            ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lt; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = t[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(~L[u].nxt[v])</span><br><span class="line">            &#123;</span><br><span class="line">                ++len;</span><br><span class="line">                u = L[u].nxt[v];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (~u &amp;&amp; L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                    u = L[u].pre;</span><br><span class="line">                <span class="keyword">if</span>(u == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    u = <span class="number">0</span>;</span><br><span class="line">                    len = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    len = L[u].len + <span class="number">1</span>;</span><br><span class="line">                    u = L[u].nxt[v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1509 Glass Beads（后缀自动机求最小表示）</title>
      <link href="/2017/10/08/POJ-1509/"/>
      <url>/2017/10/08/POJ-1509/</url>
      
        <content type="html"><![CDATA[<p>Glass Beads<br>Time Limit: 3000MS      Memory Limit: 10000K<br>Total Submissions: 4492     Accepted: 2557<br>Description<br><a id="more"></a><br>Once upon a time there was a famous actress. As you may expect, she played mostly Antique Comedies most of all. All the people loved her. But she was not interested in the crowds. Her big hobby were beads of any kind. Many bead makers were working for her and they manufactured new necklaces and bracelets every day. One day she called her main Inspector of Bead Makers (IBM) and told him she wanted a very long and special necklace. </p><p>The necklace should be made of glass beads of different sizes connected to each other but without any thread running through the beads, so that means the beads can be disconnected at any point. The actress chose the succession of beads she wants to have and the IBM promised to make the necklace. But then he realized a problem. The joint between two neighbouring beads is not very robust so it is possible that the necklace will get torn by its own weight. The situation becomes even worse when the necklace is disjoined. Moreover, the point of disconnection is very important. If there are small beads at the beginning, the possibility of tearing is much higher than if there were large beads. IBM wants to test the robustness of a necklace so he needs a program that will be able to determine the worst possible point of disjoining the beads. </p><p>The description of the necklace is a string A = a1a2 … am specifying sizes of the particular beads, where the last character am is considered to precede character a1 in circular fashion. </p><p>The disjoint point i is said to be worse than the disjoint point j if and only if the string aiai+1 … ana1 … ai-1 is lexicografically smaller than the string ajaj+1 … ana1 … aj-1. String a1a2 … an is lexicografically smaller than the string b1b2 … bn if and only if there exists an integer i, i &lt;= n, so that aj=bj, for each j, 1 &lt;= j &lt; i and ai &lt; bi<br>Input</p><p>The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line containing necklace description. Maximal length of each description is 10000 characters. Each bead is represented by a lower-case character of the english alphabet (a—z), where a &lt; b … z.<br>Output</p><p>For each case, print exactly one line containing only one integer — number of the bead which is the first at the worst possible disjoining, i.e.\ such i, that the string A[i] is lexicographically smallest among all the n possible disjoinings of a necklace. If there are more than one solution, print the one with the lowest i.<br>Sample Input</p><p>4<br>helloworld<br>amandamanda<br>dontcallmebfu<br>aaabaaa<br>Sample Output</p><p>10<br>11<br>6<br>5</p><p>题目链接：<a href="http://poj.org/problem?id=1509" target="_blank" rel="noopener">POJ 1509</a><br>后缀自动机入门题，将原串复制一遍插入后缀自动机中，然后再自动机上从小到大地跑$|S|$个长度的位置，最后所在节点的$len - 1$就是复制的双倍串中长度为$|S|$且字典序最小的子串的结束位置<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], fail, len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].fail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].fail = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[u].fail = L[v].fail = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (len &lt;&lt; <span class="number">1</span>); ++i)</span><br><span class="line">            ins(s[i % len] - <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (~L[u].nxt[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    u = L[u].nxt[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L[u].len - len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF 869E The Untended Antiquity（二维树状数组+Hash）</title>
      <link href="/2017/10/08/CF-869E/"/>
      <url>/2017/10/08/CF-869E/</url>
      
        <content type="html"><![CDATA[<p>E. The Untended Antiquity<br>time limit per test2 seconds<br>memory limit per test512 megabytes<br>inputstandard input<br>outputstandard output<br>Adieu l’ami.<br><a id="more"></a><br>Koyomi is helping Oshino, an acquaintance of his, to take care of an open space around the abandoned Eikou Cram School building, Oshino’s makeshift residence.</p><p>The space is represented by a rectangular grid of n × m cells, arranged into n rows and m columns. The c-th cell in the r-th row is denoted by (r, c).</p><p>Oshino places and removes barriers around rectangular areas of cells. Specifically, an action denoted by “1 r1 c1 r2 c2” means Oshino’s placing barriers around a rectangle with two corners being (r1, c1) and (r2, c2) and sides parallel to squares sides. Similarly, “2 r1 c1 r2 c2” means Oshino’s removing barriers around the rectangle. Oshino ensures that no barriers staying on the ground share any common points, nor do they intersect with boundaries of the n × m area.</p><p>Sometimes Koyomi tries to walk from one cell to another carefully without striding over barriers, in order to avoid damaging various items on the ground. “3 r1 c1 r2 c2” means that Koyomi tries to walk from (r1, c1) to (r2, c2) without crossing barriers.</p><p>And you’re here to tell Koyomi the feasibility of each of his attempts.</p><p>Input<br>The first line of input contains three space-separated integers n, m and q (1 ≤ n, m ≤ 2 500, 1 ≤ q ≤ 100 000) — the number of rows and columns in the grid, and the total number of Oshino and Koyomi’s actions, respectively.</p><p>The following q lines each describes an action, containing five space-separated integers t, r1, c1, r2, c2 (1 ≤ t ≤ 3, 1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m) — the type and two coordinates of an action. Additionally, the following holds depending on the value of t:</p><p>If t = 1: 2 ≤ r1 ≤ r2 ≤ n - 1, 2 ≤ c1 ≤ c2 ≤ m - 1;<br>If t = 2: 2 ≤ r1 ≤ r2 ≤ n - 1, 2 ≤ c1 ≤ c2 ≤ m - 1, the specified group of barriers exist on the ground before the removal.<br>If t = 3: no extra restrictions.<br>Output<br>For each of Koyomi’s attempts (actions with t = 3), output one line — containing “Yes” (without quotes) if it’s feasible, and “No” (without quotes) otherwise.</p><p>Examples<br>input<br>5 6 5<br>1 2 2 4 5<br>1 3 3 3 3<br>3 4 4 1 1<br>2 2 2 4 5<br>3 1 1 4 4<br>output<br>No<br>Yes<br>input<br>2500 2500 8<br>1 549 1279 1263 2189<br>1 303 795 1888 2432<br>1 2227 622 2418 1161<br>3 771 2492 1335 1433<br>1 2017 2100 2408 2160<br>3 48 60 798 729<br>1 347 708 1868 792<br>3 1940 2080 377 1546<br>output<br>No<br>Yes<br>No<br>Note<br>For the first example, the situations of Koyomi’s actions are illustrated below.</p><p>题目链接：<a href="http://codeforces.com/problemset/problem/869/E" target="_blank" rel="noopener">CF 869E</a><br>还是好菜啊~哎，这题如果想到了用$Hash$就是很简单的二维树状数组区间更新单点求和的模板题……不过感觉题目没讲清楚，删除的矩阵一定是之前出现过的，由于题目限制矩阵之间不会存在任何交集，那么判断两个点能否连通只要看这两个点是否被框到了同一个矩阵中即可，那么给每一个矩阵映射一个唯一的值，然后用二维树状数组更新这个矩阵内的点，判断两个点被哪些矩阵套过就在$BIT$上求和看是否相等就可以了，写多维$BIT$的时候要注意除了第一维,后面的$y$不能直接拿来用，因为对于每一个$x$都要从$y$开始更新，因此要用一个变量代替$y$去更新，这里卡了好久……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2510</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line">ULL seed = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ULL T[N][N];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &gt;, ULL&gt;pos;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(T, <span class="number">0</span>);</span><br><span class="line">    pos.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, ULL v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> yy = y;</span><br><span class="line">        <span class="keyword">while</span> (yy &lt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            T[x][yy] += v;</span><br><span class="line">            yy += (yy &amp; -yy);</span><br><span class="line">        &#125;</span><br><span class="line">        x += (x &amp; -x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ULL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ULL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> yy = y;</span><br><span class="line">        <span class="keyword">while</span> (yy)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += T[x][yy];</span><br><span class="line">            yy -= (yy &amp; -yy);</span><br><span class="line">        &#125;</span><br><span class="line">        x -= (x &amp; -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, x1, y1, x2, y2, i, ops;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        ULL Hash = <span class="number">1U</span>LL;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;ops, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            <span class="keyword">if</span> (ops == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Hash *= seed;</span><br><span class="line">                add(x1, y1, Hash);</span><br><span class="line">                add(x1, y2 + <span class="number">1</span>, -Hash);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y1, -Hash);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, Hash);</span><br><span class="line">                pos[ &#123;x1, &#123;y1, &#123;x2, y2&#125;&#125;&#125;] = Hash;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ULL del = pos[ &#123;x1, &#123;y1, &#123;x2, y2&#125;&#125;&#125;];</span><br><span class="line">                add(x1, y1, -del);</span><br><span class="line">                add(x1, y2 + <span class="number">1</span>, del);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y1, del);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, -del);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(sum(x1, y1) == sum(x2, y2) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 树状数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4622 Reincarnation（后缀数组+RMQ | 后缀自动机）</title>
      <link href="/2017/10/04/HDU-4622/"/>
      <url>/2017/10/04/HDU-4622/</url>
      
        <content type="html"><![CDATA[<p>Reincarnation</p><p>Time Limit: 6000/3000 MS (Java/Others)    Memory Limit: 131072/65536 K (Java/Others)<br>Total Submission(s): 3975    Accepted Submission(s): 1573</p><a id="more"></a><p>Problem Description<br>Now you are back,and have a task to do:<br>Given you a string s consist of lower-case English letters only,denote f(s) as the number of distinct sub-string of s.<br>And you have some query,each time you should calculate f(s[l…r]), s[l…r] means the sub-string of s start from l end at r.</p><p>Input<br>The first line contains integer T(1&lt;=T&lt;=5), denote the number of the test cases.<br>For each test cases,the first line contains a string s(1 &lt;= length of s &lt;= 2000).<br>Denote the length of s by n.<br>The second line contains an integer Q(1 &lt;= Q &lt;= 10000),denote the number of queries.<br>Then Q lines follows,each lines contains two integer l, r(1 &lt;= l &lt;= r &lt;= n), denote a query.</p><p>Output<br>For each test cases,for each query,print the answer in one line.</p><p>Sample Input<br>2<br>bbaba<br>5<br>3 4<br>2 2<br>2 5<br>2 4<br>1 4<br>baaba<br>5<br>3 3<br>3 4<br>1 4<br>3 5<br>5 5</p><p>Sample Output<br>3<br>1<br>7<br>5<br>8<br>1<br>3<br>8<br>5<br>1</p><p>题目链接：<a href="http://acm.split.hdu.edu.cn/showproblem.php?pid=4622" target="_blank" rel="noopener">HDU 4622</a><br>题意就是询问某段区间形成的子串其自身不同子串的个数，显然对于每一个询问做一次后缀数组不太现实$O(Q*(NlogN+N))$，那么可以参照普通求完整串的不同子串的方法来写，完整串的求法就是将后缀按照$rank$排序，然后减去相邻后缀之间的最长公共前缀值。<br>如果放到区间呢？就是把所有$sa$值在区间内的点选出来，然后要让这些点也按照后缀字典序升序，但是如果按照原来完整串的顺序，遍历过来选出的$rank$不一定是把区间子串做一遍$SA$求得的$rank$，那怎么办呢？分类讨论来更新从而维护实际对于区间内子串$rank$值的上升性质，我是枚举$rank$值来遍历的，可以发现合法的只有两种情况：当$sa[i] \lt sa[last\_rank]$或者$(sa[i] \gt sa[last\_rank]) \&amp;\&amp; (LCP(i,last\_rank) \lt len\_i)$时$i$才会大于$last\_rank$，才能用于更新，debug了很久终于造了一组区别正确与错误的数据，可以输出选中的$SA$值看看一下：<br>2</p><p>后缀自动机的做法就是用$ans[i][j]$表示区间$(i,j)$的答案，然后两个for暴力处理出所有答案，由于每次加入一个字母后，增加的子串个数是$L[last].len-L[L[last].pre].len$；<br>那么$ans[i][j] = ans[i][j-1] + L[last].len - L[L[last].pre].len$</p><p>abacababacab<br>10<br>1 7</p><p>正确答案是21，直接更新不分类讨论是23</p><h1 id="SA代码："><a href="#SA代码：" class="headerlink" title="SA代码："></a>SA代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N], wb[N], sa[N], cnt[N], ran[N], height[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> r[], <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + d] == r[b + d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, *x = wa, *y = wb;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ++cnt[x[i] = s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        sa[--cnt[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = n - k; i &lt; n; ++i)</span><br><span class="line">            y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= k)</span><br><span class="line">                y[p++] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ++cnt[x[y[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            sa[--cnt[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x, y);</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            x[sa[i]] = cmp(y, sa[i - <span class="number">1</span>], sa[i], k) ? p - <span class="number">1</span> : p++;</span><br><span class="line">        m = p;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gethgt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ran[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            --k;</span><br><span class="line">        <span class="keyword">int</span> j = sa[ran[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (s[j + k] == s[i + k])</span><br><span class="line">            ++k;</span><br><span class="line">        height[ran[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> rmq</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[N][<span class="number">12</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CLR(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = height[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; l + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= r; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= r; ++i)</span><br><span class="line">                dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = r - l + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) &lt;= len)</span><br><span class="line">            ++k;</span><br><span class="line">        <span class="keyword">return</span> min(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> rl, <span class="keyword">int</span> rr, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rl &gt; rr)</span><br><span class="line">            swap(rl, rr);</span><br><span class="line">        <span class="keyword">if</span> (rl == rr)</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        ++rl;</span><br><span class="line">        <span class="keyword">return</span> ST(rl, rr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        DA(len + <span class="number">1</span>, <span class="string">'z'</span> + <span class="number">1</span>);</span><br><span class="line">        gethgt(len);</span><br><span class="line">        rmq::init(<span class="number">1</span>, len);</span><br><span class="line">        <span class="keyword">int</span> q, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            --l;</span><br><span class="line">            --r;</span><br><span class="line">            <span class="keyword">int</span> ans = (r - l + <span class="number">1</span>) * (r - l + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> lastrank = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sa[i] &gt;= l &amp;&amp; sa[i] &lt;= r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastrank == <span class="number">-1</span>)</span><br><span class="line">                        lastrank = i;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> lenlast = r - sa[lastrank] + <span class="number">1</span>, leni = r - sa[i] + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">int</span> lcp = rmq::lcp(lastrank, i, len);</span><br><span class="line">                        ans -= min(&#123;lcp,  lenlast, leni&#125;);</span><br><span class="line">                        <span class="keyword">if</span> (sa[i] &lt; sa[lastrank] || (sa[i] &gt; sa[lastrank] &amp;&amp; lcp &lt; leni))</span><br><span class="line">                            lastrank = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SAM代码："><a href="#SAM代码：" class="headerlink" title="SAM代码："></a>SAM代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], pre, len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        pre = <span class="number">-1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz, last;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = last = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[sz].init();</span><br><span class="line">    <span class="keyword">return</span> sz++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = newnode();</span><br><span class="line">    L[u].len = L[last].len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t = last;</span><br><span class="line">    <span class="keyword">while</span> (~t &amp;&amp; L[t].nxt[c] == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L[t].nxt[c] = u;</span><br><span class="line">        t = L[t].pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">-1</span>)</span><br><span class="line">        L[u].pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = L[t].nxt[c];</span><br><span class="line">        <span class="keyword">if</span> (L[t].len + <span class="number">1</span> == L[v].len)</span><br><span class="line">            L[u].pre = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> np = newnode();</span><br><span class="line">            L[np] = L[v];</span><br><span class="line">            L[np].len = L[t].len + <span class="number">1</span>;</span><br><span class="line">            L[u].pre = L[v].pre = np;</span><br><span class="line">            <span class="keyword">while</span> (t != <span class="number">-1</span> &amp;&amp; L[t].nxt[c] == v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[t].nxt[c] = np;</span><br><span class="line">                t = L[t].pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TC, i, m, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TC);</span><br><span class="line">    <span class="keyword">while</span> (TC--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            init();</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ins(s[j] - <span class="string">'a'</span>);</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] + L[last].len - L[L[last].pre].len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[l - <span class="number">1</span>][r - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> 后缀数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1007 Quoit Design（分治法求最近点对）</title>
      <link href="/2017/09/30/HDU-1007/"/>
      <url>/2017/09/30/HDU-1007/</url>
      
        <content type="html"><![CDATA[<p>Quoit Design</p><p>Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 55702    Accepted Submission(s): 14685</p><a id="more"></a><p>Problem Description<br>Have you ever played quoit in a playground? Quoit is a game in which flat rings are pitched at some toys, with all the toys encircled awarded.<br>In the field of Cyberground, the position of each toy is fixed, and the ring is carefully designed so it can only encircle one toy at a time. On the other hand, to make the game look more attractive, the ring is designed to have the largest radius. Given a configuration of the field, you are supposed to find the radius of such a ring.</p><p>Assume that all the toys are points on a plane. A point is encircled by the ring if the distance between the point and the center of the ring is strictly less than the radius of the ring. If two toys are placed at the same point, the radius of the ring is considered to be 0.</p><p>Input<br>The input consists of several test cases. For each case, the first line contains an integer N (2 &lt;= N &lt;= 100,000), the total number of toys in the field. Then N lines follow, each contains a pair of (x, y) which are the coordinates of a toy. The input is terminated by N = 0.</p><p>Output<br>For each test case, print in one line the radius of the ring required by the Cyberground manager, accurate up to 2 decimal places. </p><p>Sample Input<br>2<br>0 0<br>1 1<br>2<br>1 1<br>1 1<br>3<br>-1.5 0<br>0 0<br>0 1.5<br>0</p><p>Sample Output<br>0.71<br>0.00<br>0.75</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1007" target="_blank" rel="noopener">HDU 1007</a><br>题意就是叫你求平面最近点对距离，答案是最近距离除以$2$。由于上课老师又讲了这个决定重新看一下。<br>首先这题分治两边很简单，递归就行了，如果最短距离是左右两边的，则需要选出一些可能的点集合，怎么选呢？就选情况最差的，离中间点$x$距离不超过左右递归得到的答案最小值$d$的，然后由于鸽巢原理，这样选出来之后$n^2$暴力求解，但是由于鸽巢原理，对于一个点最多只会有剩下的六个点能跟它组成更优的解，随机了$1e5$个整数点测试了一下，一个点最多匹配的次数是$0$、$1$、$2$，匹配$6$个点的只出现了$189$次。</p><hr><p>实际上每次用$sort$对筛选出来的点按$y$轴排序，复杂度是$O(N{log^2}N)$的，因此可以在分治的时候用归并排序顺便把点按照$y$轴排序掉，这样复杂度才是$O(NlogN)$<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125; p[N], temp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        Point &amp;mp = p[mid];<span class="comment">//mid不能变，要先拿出来</span></span><br><span class="line">        <span class="keyword">double</span> d = min(solve(l, mid), solve(mid + <span class="number">1</span>, r));</span><br><span class="line">        <span class="comment">//begin</span></span><br><span class="line">        <span class="keyword">int</span> L = l, R = mid + <span class="number">1</span>, X = l;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= mid &amp;&amp; R &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[L].y &lt; p[R].y)</span><br><span class="line">                temp[X++] = p[L++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                temp[X++] = p[R++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= mid)</span><br><span class="line">            temp[X++] = p[L++];</span><br><span class="line">        <span class="keyword">while</span> (R &lt;= r)</span><br><span class="line">            temp[X++] = p[R++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">            p[i] = temp[i];</span><br><span class="line">        <span class="comment">//end</span></span><br><span class="line">        <span class="keyword">int</span> sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(p[i].x - mp.x) &lt;= d)</span><br><span class="line">                temp[sz++] = p[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[j].y - temp[i].y &gt;= d)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                d = min(d, dis(temp[j], temp[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        sort(p, p + n, cmpx);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, solve(<span class="number">0</span>, n - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 分治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1625 Censored!（AC自动机+DP+高精度）</title>
      <link href="/2017/09/28/POJ-1625/"/>
      <url>/2017/09/28/POJ-1625/</url>
      
        <content type="html"><![CDATA[<p>Censored!<br>Time Limit: 5000MS        Memory Limit: 10000K<br>Total Submissions: 10476        Accepted: 2874<br>Description<br><a id="more"></a><br>The alphabet of Freeland consists of exactly N letters. Each sentence of Freeland language (also known as Freish) consists of exactly M letters without word breaks. So, there exist exactly N^M different Freish sentences. </p><p>But after recent election of Mr. Grass Jr. as Freeland president some words offending him were declared unprintable and all sentences containing at least one of them were forbidden. The sentence S contains a word W if W is a substring of S i.e. exists such k &gt;= 1 that S[k] = W[1], S[k+1] = W[2], …,S[k+len(W)-1] = W[len(W)], where k+len(W)-1 &lt;= M and len(W) denotes length of W. Everyone who uses a forbidden sentence is to be put to jail for 10 years. </p><p>Find out how many different sentences can be used now by freelanders without risk to be put to jail for using it.<br>Input</p><p>The first line of the input file contains three integer numbers: N — the number of letters in Freish alphabet, M — the length of all Freish sentences and P — the number of forbidden words (1 &lt;= N &lt;= 50, 1 &lt;= M &lt;= 50, 0 &lt;= P &lt;= 10). </p><p>The second line contains exactly N different characters — the letters of the Freish alphabet (all with ASCII code greater than 32). </p><p>The following P lines contain forbidden words, each not longer than min(M, 10) characters, all containing only letters of Freish alphabet.<br>Output</p><p>Output the only integer number — the number of different sentences freelanders can safely use.<br>Sample Input</p><p>2 3 1<br>ab<br>bb<br>Sample Output</p><p>5</p><p>题目链接：<a href="http://poj.org/problem?id=1625" target="_blank" rel="noopener">POJ 1625</a><br>一开始没发现是高精度的，WA了几次，加了清华爷的大整数模板重新估计了下空间复杂度，然而还MLE了几次（弱校选手刷个水题战况惨不忍睹，哎），看看$m$这么小想想还是用普通递推型DP吧，怎么DP呢？按套路应该是用$dp[i][j]$表示构造的长度为$i$的字符串，走到了Trie上第$j$个节点，设$v$为$j$的某一个儿子节点，$G$矩阵为记录AC自动机上节点之间是否能转移的邻接矩阵</p><script type="math/tex; mode=display">dp[0][0] = 1,\\dp[i+1][v] += dp[i][j] \mid G[j][v]==1</script><p>喔据说还有最好用unsigned char作数组，数据可能有ASCII码大于$127$的数据<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_L = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bign</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> len, s[MAX_L];</span><br><span class="line">        bign();</span><br><span class="line">        bign(<span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">        bign(<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">bool</span> sign;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">toStr</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;, bign &amp;);</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;, bign &amp;);</span><br><span class="line">        bign <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">        bign <span class="keyword">operator</span>=(<span class="keyword">int</span>);</span><br><span class="line">        bign <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">string</span>);</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>+(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>++();</span><br><span class="line">        bign <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">        bign <span class="keyword">operator</span>+=(<span class="keyword">const</span> bign&amp;);</span><br><span class="line">        bign <span class="keyword">operator</span>-(<span class="keyword">const</span> bign &amp;) <span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>--();</span><br><span class="line">        bign <span class="keyword">operator</span>--(<span class="keyword">int</span>);</span><br><span class="line">        bign <span class="keyword">operator</span>-=(<span class="keyword">const</span> bign&amp;);</span><br><span class="line">        bign <span class="keyword">operator</span>*(<span class="keyword">const</span> bign &amp;)<span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">int</span> num)<span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>*=(<span class="keyword">const</span> bign&amp;);</span><br><span class="line">        bign <span class="keyword">operator</span>/(<span class="keyword">const</span> bign&amp;)<span class="keyword">const</span>;</span><br><span class="line">        bign <span class="keyword">operator</span>/=(<span class="keyword">const</span> bign&amp;);</span><br><span class="line">        bign <span class="keyword">operator</span>%(<span class="keyword">const</span> bign&amp;)<span class="keyword">const</span>;</span><br><span class="line">        <span class="function">bign <span class="title">factorial</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function">bign <span class="title">Sqrt</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function">bign <span class="title">pow</span><span class="params">(<span class="keyword">const</span> bign&amp;)</span><span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>;</span><br><span class="line">        ~bign();</span><br><span class="line">&#125;;</span><br><span class="line">bign::bign()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_L; ++i)</span><br><span class="line">        s[i] = <span class="number">0</span>;</span><br><span class="line">    len = <span class="number">1</span>;</span><br><span class="line">    sign = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign::bign(<span class="keyword">const</span> <span class="keyword">char</span> *num)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign::bign(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> bign::toStr() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        res = (<span class="keyword">char</span>)(s[i] + <span class="string">'0'</span>) + res;</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="string">""</span>)</span><br><span class="line">        res = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!sign &amp;&amp; res != <span class="string">"0"</span>)</span><br><span class="line">        res = <span class="string">"-"</span> + res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, bign &amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    in &gt;&gt; str;</span><br><span class="line">    num = str;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, bign &amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; num.toStr();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="keyword">char</span> a[MAX_L] = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] != <span class="string">'-'</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(a, num);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">strlen</span>(num); i++)</span><br><span class="line">            a[i - <span class="number">1</span>] = num[i];</span><br><span class="line">    sign = !(num[<span class="number">0</span>] == <span class="string">'-'</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">        s[i] = a[len - i - <span class="number">1</span>] - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>=(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> temp[MAX_L];</span><br><span class="line">    <span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, num);</span><br><span class="line">    *<span class="keyword">this</span> = temp;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">string</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tmp;</span><br><span class="line">    tmp = num.c_str();</span><br><span class="line">    *<span class="keyword">this</span> = tmp;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bign &amp;num) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (sign ^ num.sign)</span><br><span class="line">        <span class="keyword">return</span> num.sign;</span><br><span class="line">    <span class="keyword">if</span> (len != num.len)</span><br><span class="line">        <span class="keyword">return</span> len &lt; num.len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (s[i] != num.s[i])</span><br><span class="line">            <span class="keyword">return</span> sign ? (s[i] &lt; num.s[i]) : (!(s[i] &lt; num.s[i]));</span><br><span class="line">    <span class="keyword">return</span> !sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num &lt; *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> &gt; num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>!=(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &gt; num || *<span class="keyword">this</span> &lt; num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bign::<span class="keyword">operator</span>==(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(num != *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>+(<span class="keyword">const</span> bign &amp;num) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (sign ^ num.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        bign tmp = sign ? num : *<span class="keyword">this</span>;</span><br><span class="line">        tmp.sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> sign ? *<span class="keyword">this</span> - tmp : num - tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    bign result;</span><br><span class="line">    result.len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; temp || i &lt; (max(len, num.len)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = s[i] + num.s[i] + temp;</span><br><span class="line">        result.s[result.len++] = t % <span class="number">10</span>;</span><br><span class="line">        temp = t / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.sign = sign;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    bign old = *<span class="keyword">this</span>;</span><br><span class="line">    ++(*<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>+=(<span class="keyword">const</span> bign &amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> + num;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>-(<span class="keyword">const</span> bign &amp;num) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign b = num, a = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!num.sign &amp;&amp; !sign)</span><br><span class="line">    &#123;</span><br><span class="line">        b.sign = <span class="number">1</span>;</span><br><span class="line">        a.sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        b.sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        a.sign = <span class="number">1</span>;</span><br><span class="line">        b = bign(<span class="number">0</span>) - (a + b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        bign c = (b - a);</span><br><span class="line">        c.sign = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    bign result;</span><br><span class="line">    result.len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, g = <span class="number">0</span>; i &lt; a.len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = a.s[i] - g;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.len) x -= b.s[i];</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) g = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            g = <span class="number">1</span>;</span><br><span class="line">            x += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.s[result.len++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    result.clean();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span> * (<span class="keyword">const</span> bign &amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign result;</span><br><span class="line">    result.len = len + num.len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num.len; j++)</span><br><span class="line">            result.s[i + j] += s[i] * num.s[j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result.s[i + <span class="number">1</span>] += result.s[i] / <span class="number">10</span>;</span><br><span class="line">        result.s[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.clean();</span><br><span class="line">    result.sign = !(sign ^ num.sign);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">int</span> num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign x = num;</span><br><span class="line">    bign z = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> x * z;</span><br><span class="line">&#125;</span><br><span class="line">bign bign::<span class="keyword">operator</span>*=(<span class="keyword">const</span> bign&amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * num;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span> /(<span class="keyword">const</span> bign&amp;num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign ans;</span><br><span class="line">    ans.len = len - num.len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ans.len &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign divisor = *<span class="keyword">this</span>, divid = num;</span><br><span class="line">    divisor.sign = divid.sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = ans.len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (divisor.s[j] == <span class="number">0</span>) j--;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; j) k = j;</span><br><span class="line">        <span class="keyword">char</span> z[MAX_L];</span><br><span class="line">        <span class="built_in">memset</span>(z, <span class="number">0</span>, <span class="keyword">sizeof</span>(z));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &gt;= k; i--)</span><br><span class="line">            z[j - i] = divisor.s[i] + <span class="string">'0'</span>;</span><br><span class="line">        bign dividend = z;</span><br><span class="line">        <span class="keyword">if</span> (dividend &lt; divid)</span><br><span class="line">        &#123;</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (divid * key &lt;= dividend) key++;</span><br><span class="line">        key--;</span><br><span class="line">        ans.s[k] = key;</span><br><span class="line">        bign temp = divid * key;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            temp = temp * <span class="number">10</span>;</span><br><span class="line">        divisor = divisor - temp;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.clean();</span><br><span class="line">    ans.sign = !(sign ^ num.sign);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>/=(<span class="keyword">const</span> bign&amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> / num;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="keyword">operator</span>%(<span class="keyword">const</span> bign&amp; num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign a = *<span class="keyword">this</span>, b = num;</span><br><span class="line">    a.sign = b.sign = <span class="number">1</span>;</span><br><span class="line">    bign result, temp = a / b * b;</span><br><span class="line">    result = a - temp;</span><br><span class="line">    result.sign = sign;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::<span class="built_in">pow</span>(<span class="keyword">const</span> bign&amp; num)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (bign i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">        result = result * (*<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::factorial()<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    bign result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (bign i = <span class="number">1</span>; i &lt;= *<span class="keyword">this</span>; i++)</span><br><span class="line">        result *= i;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> bign::clean()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        len++;</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">1</span> &amp;&amp; s[len - <span class="number">1</span>] == <span class="string">'\0'</span>)</span><br><span class="line">        len--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bign bign::Sqrt()<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*<span class="keyword">this</span> &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*<span class="keyword">this</span> &lt;= <span class="number">1</span>)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    bign l = <span class="number">0</span>, r = *<span class="keyword">this</span>, mid;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid * mid &gt; *<span class="keyword">this</span>)</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">bign::~bign()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> order[<span class="number">259</span>];</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line">bign dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(order, <span class="number">-1</span>);</span><br><span class="line">    CLR(G, <span class="number">0</span>);</span><br><span class="line">    CLR(dp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (order[s[i]] == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = order[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].flag)</span><br><span class="line">                L[u].flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        ac::init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        sort(str, str + n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            order[(<span class="keyword">int</span>)str[i]] = i;</span><br><span class="line">        <span class="keyword">while</span> (p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (str[len])</span><br><span class="line">                ++len;</span><br><span class="line">            ac::ins(str, len);</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[i].nxt[j];</span><br><span class="line">                <span class="keyword">if</span> (L[v].flag)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                G[i][v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = L[j].nxt[k];</span><br><span class="line">                    <span class="keyword">if</span> (G[j][v])</span><br><span class="line">                        dp[i + <span class="number">1</span>][v] += dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bign ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ans += dp[m][i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ WPUZZLES（AC自动机水题）</title>
      <link href="/2017/09/27/SPOJ-WPUZZLES/"/>
      <url>/2017/09/27/SPOJ-WPUZZLES/</url>
      
        <content type="html"><![CDATA[<p>WPUZZLES - Word Puzzles<br>no tags<br>Word puzzles are usually simple and very entertaining for all ages. They are so entertaining that Pizza-Hut company started using table covers with word puzzles printed on them, possibly with the intent to minimise their client’s perception of any possible delay in bringing them their order.<br><a id="more"></a><br>Even though word puzzles may be entertaining to solve by hand, they may become boring when they get very large. Computers do not yet get bored in solving tasks, therefore we thought you could devise a program to speedup (hopefully!) solution finding in such puzzles.</p><p>The following figure illustrates the PizzaHut puzzle. The names of the pizzas to be found in the puzzle are: MARGARITA, ALEMA, BARBECUE, TROPICAL, SUPREMA, LOUISIANA, CHEESEHAM, EUROPA, HAVAIANA, CAMPONESA.</p><script type="math/tex; mode=display">\begin{array}{c|lcr}    & 0 &1    &2    &3    &4    &5    &6    &7    &8    &9    &10    &11    &12    &13    &14    &15    &16    &17    &18    &19\\\hlineend{array}</script><p>Problem</p><p>Your task is to produce a program that given the word puzzle and words to be found in the puzzle, determines, for each word, the position of the first letter and its orientation in the puzzle.</p><p>You can assume that the left upper corner of the puzzle is the origin, (0,0). Furthemore, the orientation of the word is marked clockwise starting with letter A for north (note: there are 8 possible directions in total).</p><p>Input</p><p>The first line of the input contains a number T ≤ 10 which indicates the number of test cases to follow. Each test case starts with a line consisting of three positive numbers: The number of lines of the word puzzle, 0 &lt; L ≤ 1000, the number of columns, 0 &lt; C ≤ 1000, and the number of words to be found, 0 &lt; W ≤ 1000. The following L input lines, each consisting of C uppercase letters, contain the word puzzle. Then at last the W words are input one per line. You can assume that each word can be found exactly once in the word puzzle.</p><p>Output</p><p>For each test case your program should output W lines: For each word (using the same order as the words were input) print a triplet defining the coordinates, line and column, where the first letter of the word appears, followed by a letter indicating the orientation of the word according to the rules defined above. Each value in the triplet must be separated by one space only.<br>Print one blank line between test cases.</p><p>Example</p><p>Input:</p><p>1<br>20 20 10<br>QWSPILAATIRAGRAMYKEI<br>AGTRCLQAXLPOIJLFVBUQ<br>TQTKAZXVMRWALEMAPKCW<br>LIEACNKAZXKPOTPIZCEO<br>FGKLSTCBTROPICALBLBC<br>JEWHJEEWSMLPOEKORORA<br>LUPQWRNJOAAGJKMUSJAE<br>KRQEIOLOAOQPRTVILCBZ<br>QOPUCAJSPPOUTMTSLPSF<br>LPOUYTRFGMMLKIUISXSW<br>WAHCPOIYTGAKLMNAHBVA<br>EIAKHPLBGSMCLOGNGJML<br>LDTIKENVCSWQAZUAOEAL<br>HOPLPGEJKMNUTIIORMNC<br>LOIUFTGSQACAXMOPBEIO<br>QOASDHOPEPNBUYUYOBXB<br>IONIAELOJHSWASMOUTRK<br>HPOIYTJPLNAQWDRIBITG<br>LPOINUYMRTEMPTMLMNBO<br>PAFCOPLHAVAIANALBPFS<br>MARGARITA<br>ALEMA<br>BARBECUE<br>TROPICAL<br>SUPREMA<br>LOUISIANA<br>CHEESEHAM<br>EUROPA<br>HAVAIANA<br>CAMPONESA</p><p>Output:</p><p>0 15 G<br>2 11 C<br>7 18 A<br>4 8 C<br>16 13 B<br>4 15 E<br>10 3 D<br>5 1 E<br>19 7 C<br>11 11 H</p><p>题目链接：<a href="http://www.spoj.com/problems/WPUZZLES/" target="_blank" rel="noopener">SPOJ WPUZZLES</a><br>把询问的串加入字典树建立AC自动机，节点末位标上询问$id$，然后把输入的表拿各个起点的各个合法方向去匹配，然后把对应$id$的$ans$数组更新一下即可，方向数组$0-7$代表了从$12$点方向即$A～H$开始顺时针的八个方向<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">0</span>;</span><br><span class="line">        id = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1010</span>][<span class="number">1010</span>], temp[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1010</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, Len[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].id = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[L[u].fail].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[L[u].fail].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[x][y] - <span class="string">'A'</span>;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">            <span class="keyword">if</span> (L[u].id != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> id = L[u].id;</span><br><span class="line">                ans[id][<span class="number">0</span>] = x - (Len[id] - <span class="number">1</span>) * dir[k][<span class="number">0</span>];</span><br><span class="line">                ans[id][<span class="number">1</span>] = y - (Len[id] - <span class="number">1</span>) * dir[k][<span class="number">1</span>];</span><br><span class="line">                ans[id][<span class="number">2</span>] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            x += dir[k][<span class="number">0</span>];</span><br><span class="line">            y += dir[k][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, i, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">        ac::init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, temp);</span><br><span class="line">            Len[i] = <span class="built_in">strlen</span>(temp);</span><br><span class="line">            ac::ins(temp, Len[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ac::query(i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            ac::query(i, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            ac::query(i, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">            ac::query(i, m - <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">            ac::query(i, m - <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">            ac::query(i, m - <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ac::query(<span class="number">0</span>, i, <span class="number">5</span>);</span><br><span class="line">            ac::query(<span class="number">0</span>, i, <span class="number">4</span>);</span><br><span class="line">            ac::query(<span class="number">0</span>, i, <span class="number">3</span>);</span><br><span class="line">            ac::query(n - <span class="number">1</span>, i, <span class="number">7</span>);</span><br><span class="line">            ac::query(n - <span class="number">1</span>, i, <span class="number">0</span>);</span><br><span class="line">            ac::query(n - <span class="number">1</span>, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %c\n"</span>, ans[i][<span class="number">0</span>], ans[i][<span class="number">1</span>], ans[i][<span class="number">2</span>] + <span class="string">'A'</span>);</span><br><span class="line">        <span class="keyword">if</span>(T)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELOJ 014 War-cry（AC自动机+DP+滚动数组优化）</title>
      <link href="/2017/09/27/ELOJ-014/"/>
      <url>/2017/09/27/ELOJ-014/</url>
      
        <content type="html"><![CDATA[<p>War-cry<br>Time limit = 4<br><a id="more"></a><br>Chieftains of Mumba-Lumba decided make up new war-cry to increase martial spirit and to frighten enemy.<br>Alphabet B of Mumba-Lumba consists of M letters. War-cry should be word in this alphabet of length N. Scientists of Mumba-Lumba found out set of different elementary screams (words in the alphabet B) {s1 s2 … sk} which arouse fear in enemy equal to {f1 f2 … fk} correspondingly. Number fi is nonnegative integer less than 10000.</p><p>Each instance of word si in war-cry adds to its fearness number fi.</p><p>Number fi may not be equal to fierness of the word si, because si may contains one or more other elementary screams as subwords.</p><p>Input First line contains three numbers N, M and K delimited with space. K is the number of elementary screams. 1 ≤ N ≤ 100, 1 ≤ M ≤ 25, 1 &lt; K ≤ 100. Next line contains Mubma-Lubma alphabet — different lowcase latin letters. Next lines contain information about elementary screams. Each line has format of</p><p>&lt; word &gt; &lt; it’s fearness &gt;</p><p>Output Maximum value of fearness among words of length N and example of word of length N with this fearness in the next line.</p><p>Input#1<br>4 3 4<br>abc<br>a 1<br>b 1<br>ab 3<br>caa 6<br>Output#1<br>12<br>caab</p><p>Input#2<br>7 10 4<br>abcdefghij<br>a 1<br>b 1<br>ab 4<br>bac 8<br>Output#2<br>25<br>bacabac</p><p>题目链接：<a href="http://acm.mipt.ru/judge/problems.pl?problem=014&amp;CGISESSID=8a1a7a942f462bf46e60dfe50db1bb5b" target="_blank" rel="noopener">ELOJ 014</a><br>不得不吐槽这神奇的评测网站，第一次见，而且注册的时候似乎还会默认把每一次的评测结果发送到你邮箱，然后在更改资料前我的邮箱就爆炸了……。提交了11发<br>这题初看显然就是个简单的AC自动机上的DP嘛……按套路建立的时候传递叠加fail指针的价值，然后估计是$dp[i][j]$表示构造长度为$i$的字符窜且此时在节点$j$上的最大值，由于合法性问题，$dp$数组要初始化为$-\infty$然后转移方程就是</p><script type="math/tex; mode=display">dp[0][0] = 0,\\dp[i+1][v] = max(dp[i + 1][v], dp[i][j] + L[v].value)</script><p>嗯妥了妥了，然后发现这题空间不好估计啊，也没找到内存限制在哪里，然后就开始瞎搞，发现不是WA就是MLE……然后发现这转移方程不是显然可以用滚动数组优化的嘛XD，然后感觉WA的情况应该是一开始输入的字符集没映射好，当没用的数组扔掉了……先在前面映射一发就可以了。。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, v;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">char</span> dps[<span class="number">2</span>][<span class="number">10010</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">90</span>], order[<span class="string">'z'</span> + <span class="number">1</span>], revmap[<span class="number">28</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (order[(<span class="keyword">int</span>)s[i]] == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = order[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].v += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(v);</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            L[u].v += L[uf].v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">char</span> tt[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        CLR(vis, <span class="number">0</span>);</span><br><span class="line">        CLR(dp, -INF);</span><br><span class="line">        CLR(dps, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tt);</span><br><span class="line">        sort(tt, tt + m);</span><br><span class="line">        CLR(order, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            order[(<span class="keyword">int</span>)tt[i]] = i;</span><br><span class="line">            revmap[i] = tt[i] - <span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, tt, &amp;w);</span><br><span class="line">            ac::ins(tt, <span class="built_in">strlen</span>(tt), w);</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nxt = <span class="number">1</span>;</span><br><span class="line">        dp[cur][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;, ans_str[<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            CLR(dp[nxt], -INF);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[cur][j] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; m; ++s)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = L[j].nxt[s];</span><br><span class="line">                    <span class="keyword">int</span> tv = dp[cur][j] + L[v].v;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp, dps[cur][j]);</span><br><span class="line">                    temp[i] = <span class="string">'a'</span> + revmap[s];</span><br><span class="line">                    temp[i + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (tv &gt; dp[nxt][v])</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[nxt][v] = tv;</span><br><span class="line">                        <span class="built_in">strcpy</span>(dps[nxt][v], temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(cur, nxt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[cur][i] &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = dp[cur][i];</span><br><span class="line">                <span class="built_in">strcpy</span>(ans_str, dps[cur][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%s\n"</span>, ans, ans_str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 3247 Resource Archiver（AC自动机+BFS+状压DP）</title>
      <link href="/2017/09/26/HDU-3247/"/>
      <url>/2017/09/26/HDU-3247/</url>
      
        <content type="html"><![CDATA[<p>Resource Archiver</p><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 100000/100000 K (Java/Others)<br>Total Submission(s): 2925    Accepted Submission(s): 950</p><a id="more"></a><p>Problem Description<br>Great! Your new software is almost finished! The only thing left to do is archiving all your n resource files into a big one.<br>Wait a minute… you realized that it isn’t as easy as you thought. Think about the virus killers. They’ll find your software suspicious, if your software contains one of the m predefined virus codes. You absolutely don’t want this to happen.<br>Technically, resource files and virus codes are merely 01 strings. You’ve already convinced yourself that none of the resource strings contain a virus code, but if you make the archive arbitrarily, virus codes can still be found somewhere.<br>Here comes your task (formally): design a 01 string that contains all your resources (their occurrences can overlap), but none of the virus codes. To make your software smaller in size, the string should be as short as possible.</p><p>Input<br>There will be at most 10 test cases, each begins with two integers in a single line: n and m (2 &lt;= n &lt;= 10, 1 &lt;= m &lt;= 1000). The next n lines contain the resources, one in each line. The next m lines contain the virus codes, one in each line. The resources and virus codes are all non-empty 01 strings without spaces inside. Each resource is at most 1000 characters long. The total length of all virus codes is at most 50000. The input ends with n = m = 0.</p><p>Output<br>For each test case, print the length of shortest string.</p><p>Sample Input<br>2 2<br>1110<br>0111<br>101<br>1001<br>0 0</p><p>Sample Output<br>5</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3247" target="_blank" rel="noopener">HDU 3247</a><br>题意就是构造最短的串使得不仅覆盖了n个resource串，还不能含有m个病毒串,这题是看<a href="http://www.cnblogs.com/kuangbin/p/3164106.html" target="_blank" rel="noopener">kuangbin大佬博客</a>才会写的，由于只有10个resource串，因此把resource和virus插入字典树并就建立AC自动机，由于要求最小的长度，因此只有安全节点有用的，最多只有$11$个，显然virus串的结束点都是危险节点，赋值为$-1$，其他resourse串用状压表示，最后建立AC自动机的时候传递一下fail指针的状态就可以了，然后说一下DP，用$dp[i][j]$表示当前走到了第$i$个安全节点节点，包含的resourse串的二进制状态为$j$，考虑合法性问题，$dp$数组要初始化为$\infty$<br>转移方程就是：</p><script type="math/tex; mode=display">dp[0][0] = 0,\\dp[k][j|L[k].flag] = min(dp[k][j|L[k].flag],dp[i][j] + dis[i][k])</script><p>为什么是这样的呢，因为题目要求包含所有的串，那么我们就BFS的时候只走非危险节点，然后把到各个resourse串末尾节点的距离表示出来，其距离就是所需增加的长度，然后$dis$数组就这样BFS预处理出来就优化了转移时间<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">11</span>][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> G[<span class="number">11</span>][<span class="number">11</span>], d[N], st[<span class="number">11</span>], cnt;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(dp, INF);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    CLR(G, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        Q.pop();</span><br><span class="line">    CLR(d, INF);</span><br><span class="line">    Q.push(st[x]);</span><br><span class="line">    d[st[x]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + <span class="number">1</span> &amp;&amp; L[v].flag &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">        G[x][i] = d[st[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[sz].init();</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                L[u].nxt[v] = newnode();</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x != <span class="number">-1</span> &amp;&amp; L[u].flag != <span class="number">-1</span>)</span><br><span class="line">            L[u].flag |= (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            L[u].flag = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                v = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].flag == <span class="number">-1</span>)</span><br><span class="line">                L[u].flag = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[u].flag |= L[uf].flag;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> &amp;v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                    v = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, j, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; (n || m))</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            ac::ins(s, <span class="built_in">strlen</span>(s), i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            ac::ins(s, <span class="built_in">strlen</span>(s), <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        st[cnt++] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            <span class="keyword">if</span> (L[i].flag &gt; <span class="number">0</span>)</span><br><span class="line">                st[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">            BFS(i);</span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cnt; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j][i] != INF)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; cnt; ++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (j == k || G[j][k] &gt;= INF)</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        dp[k][i | L[st[k]].flag] = min(dp[k][i | L[st[k]].flag], dp[j][i] + G[j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">            ans = min(ans, dp[i][R - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 3341 Lost&#39;s revenge（AC自动机+DP+地址偏移量）</title>
      <link href="/2017/09/26/HDU-3341/"/>
      <url>/2017/09/26/HDU-3341/</url>
      
        <content type="html"><![CDATA[<p>Lost’s revenge</p><p>Time Limit: 15000/5000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)<br>Total Submission(s): 4543    Accepted Submission(s): 1271</p><a id="more"></a><p>Problem Description<br>Lost and AekdyCoin are friends. They always play “number game”(A boring game based on number theory) together. We all know that AekdyCoin is the man called “nuclear weapon of FZU,descendant of Jingrun”, because of his talent in the field of number theory. So Lost had never won the game. He was so ashamed and angry, but he didn’t know how to improve his level of number theory.</p><p>One noon, when Lost was lying on the bed, the Spring Brother poster on the wall(Lost is a believer of Spring Brother) said hello to him! Spring Brother said, “I’m Spring Brother, and I saw AekdyCoin shames you again and again. I can’t bear my believers were being bullied. Now, I give you a chance to rearrange your gene sequences to defeat AekdyCoin!”.</p><p>It’s soooo crazy and unbelievable to rearrange the gene sequences, but Lost has no choice. He knows some genes called “number theory gene” will affect one “level of number theory”. And two of the same kind of gene in different position in the gene sequences will affect two “level of number theory”, even though they overlap each other. There is nothing but revenge in his mind. So he needs you help to calculate the most “level of number theory” after rearrangement.</p><p>Input<br>There are less than 30 testcases.<br>For each testcase, first line is number of “number theory gene” N(1&lt;=N&lt;=50). N=0 denotes the end of the input file.<br>Next N lines means the “number theory gene”, and the length of every “number theory gene” is no more than 10.<br>The last line is Lost’s gene sequences, its length is also less or equal 40.<br>All genes and gene sequences are only contains capital letter ACGT.</p><p>Output<br>For each testcase, output the case number(start with 1) and the most “level of number theory” with format like the sample output.</p><p>Sample Input<br>3<br>AC<br>CG<br>GT<br>CGAT<br>1<br>AA<br>AAA<br>0</p><p>Sample Output<br>Case 1: 3<br>Case 2: 2</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3341" target="_blank" rel="noopener">HDU 3341</a><br>起初很容易想到用$dp[i][j][k][s][u]$表示当前构造的字符串有$i$个$\mathbf A$，$j$个$\mathbf C$，$k$个$\mathbf G$，$s$个$\mathbf T$，且当前字符串结尾在节点$u$上，由于存在合法性问题，一开始$dp$数组可以初始化成$-\infty$<br>转移方程就是</p><script type="math/tex; mode=display">dp[0][0][0][0][0] = 0,\\dp[i+(c==0)][j+(c==1)][k+(c==2)][s+(c==3)][v]  = \\max(dp[i+(c==0)][j+(c==1)][k+(c==2)][s+(c==3)][v], dp[i][j][k][s] + L[v].value)</script><p>但是这样的空间复杂度是$40^4*500$数组开不下，但是题目里显然四种字符加起来也就$40$个，那么可以考虑把前四维压缩到一维，可以压掉大部分情况下用不到的空间。<br>如果知道地址偏移量这个概念，那么就可以知道高维数组都可以通过计算其偏移量压缩成一维数组，公式如下：<br>设四维数组$A[a][b][c][d]$，下标均从$0$开始，此时如果要求$A[i][j][x][y]$，那么在压缩之后$A[i][j][x][y] = A+i*(b*c*d)+j*(c*d)+x*d+y*1$<br>然后大概前四维压缩需要$10*11^3+10*11^2+10*11^1+10*11^0 = 14640$，算上后面记录节点的一维，五六百万的数组刚好可以用，最后过程中注意减少地址计算的次数，否则容易超时<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">42</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">4</span>], id[<span class="number">90</span>], sz;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">14650</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = id[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        ++L[u].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt += L[uf].cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j, k;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'C'</span>] = <span class="number">1</span>;</span><br><span class="line">    id[<span class="string">'G'</span>] = <span class="number">2</span>;</span><br><span class="line">    id[<span class="string">'T'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            ac::ins(s, <span class="built_in">strlen</span>(s));</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            ++cnt[id[(<span class="keyword">int</span>)s[i]]];</span><br><span class="line">        CLR(dp, -INF);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> Base[<span class="number">4</span>] =</span><br><span class="line">        &#123;</span><br><span class="line">            (cnt[<span class="number">1</span>] + <span class="number">1</span>) * (cnt[<span class="number">2</span>] + <span class="number">1</span>) * (cnt[<span class="number">3</span>] + <span class="number">1</span>),</span><br><span class="line">            (cnt[<span class="number">2</span>] + <span class="number">1</span>) * (cnt[<span class="number">3</span>] + <span class="number">1</span>),</span><br><span class="line">            (cnt[<span class="number">3</span>] + <span class="number">1</span>),</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= cnt[<span class="number">0</span>]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= cnt[<span class="number">1</span>]; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= cnt[<span class="number">2</span>]; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= cnt[<span class="number">3</span>]; ++s)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; sz; ++u)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> st = i * Base[<span class="number">0</span>] + j * Base[<span class="number">1</span>] + k * Base[<span class="number">2</span>] + s * Base[<span class="number">3</span>];</span><br><span class="line">                            <span class="keyword">if</span> (dp[st][u] &lt; <span class="number">0</span>)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; ++l)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; i &gt;= cnt[<span class="number">0</span>])</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                <span class="keyword">if</span> (l == <span class="number">1</span> &amp;&amp; j &gt;= cnt[<span class="number">1</span>])</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                <span class="keyword">if</span> (l == <span class="number">2</span> &amp;&amp; k &gt;= cnt[<span class="number">2</span>])</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                <span class="keyword">if</span> (l == <span class="number">3</span> &amp;&amp; s &gt;= cnt[<span class="number">3</span>])</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                <span class="keyword">int</span> v = L[u].nxt[l];</span><br><span class="line">                                <span class="keyword">int</span> &amp;dp_nxt = dp[st + Base[l]][v];</span><br><span class="line">                                dp_nxt = max(dp_nxt, dp[st][u] + L[v].cnt);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> F = cnt[<span class="number">0</span>] * Base[<span class="number">0</span>] + cnt[<span class="number">1</span>] * Base[<span class="number">1</span>] + cnt[<span class="number">2</span>] * Base[<span class="number">2</span>] + cnt[<span class="number">3</span>] * Base[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ans = max(ans, dp[F][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++T, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZOJ 3228 Searching the String（AC自动机）</title>
      <link href="/2017/09/26/ZOJ-3228/"/>
      <url>/2017/09/26/ZOJ-3228/</url>
      
        <content type="html"><![CDATA[<p>Searching the String<br>Time Limit: 7 Seconds      Memory Limit: 129872 KB<br>Little jay really hates to deal with string. But moondy likes it very much, and she’s so mischievous that she often gives jay some dull problems related to string. And one day, moondy gave jay another problem, poor jay finally broke out and cried, “ Who can help me? I’ll bg him! “<br><a id="more"></a><br>So what is the problem this time?</p><p>First, moondy gave jay a very long string A. Then she gave him a sequence of very short substrings, and asked him to find how many times each substring appeared in string A. What’s more, she would denote whether or not founded appearances of this substring are allowed to overlap.</p><p>At first, jay just read string A from begin to end to search all appearances of each given substring. But he soon felt exhausted and couldn’t go on any more, so he gave up and broke out this time.</p><p>I know you’re a good guy and will help with jay even without bg, won’t you?</p><p>Input</p><p>Input consists of multiple cases( &lt;= 20 ) and terminates with end of file.</p><p>For each case, the first line contains string A ( length &lt;= 10^5 ). The second line contains an integer N ( N &lt;= 10^5 ), which denotes the number of queries. The next N lines, each with an integer type and a string a ( length &lt;= 6 ), type = 0 denotes substring a is allowed to overlap and type = 1 denotes not. Note that all input characters are lowercase.</p><p>There is a blank line between two consecutive cases.</p><p>Output</p><p>For each case, output the case number first ( based on 1 , see Samples ).</p><p>Then for each query, output an integer in a single line denoting the maximum times you can find the substring under certain rules.</p><p>Output an empty line after each case.</p><p>Sample Input</p><p>ab<br>2<br>0 ab<br>1 ab</p><p>abababac<br>2<br>0 aba<br>1 aba</p><p>abcdefghijklmnopqrstuvwxyz<br>3<br>0 abc<br>1 def<br>1 jmn<br>Sample Output</p><p>Case 1<br>1<br>1</p><p>Case 2<br>3<br>2</p><p>Case 3<br>1<br>1<br>0</p><p>Hint</p><p>In Case 2,you can find the first substring starting in position (indexed from 0) 0,2,4, since they’re allowed to overlap. The second substring starts in position 0 and 4, since they’re not allowed to overlap.</p><p>For C++ users, kindly use scanf to avoid TLE for huge inputs.</p><p>题目链接：<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=3441" target="_blank" rel="noopener">ZOJ 3228</a><br>就是给定一系列询问，求询问所给的子串在主串中出现的次数，由于fail指针的特性，可以把子串加入字典树后建立AC自动机，然后拿主串在上面跑一遍AC自动机，然后把字典树上的节点被遍历次数记录下来，就是对应可覆盖的答案了。<br>不可覆盖的话就记录一下上一次跑过的那个点在主串中的下标，<br>如果$当前节点对应下标 - 上一次下标 \ge 这个节点对应字符串长度$，就说明不可覆盖的出现了$1$次。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>], fail;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> cnt[N][<span class="number">2</span>], End[N], Len[N], last[N];</span><br><span class="line"><span class="keyword">char</span> s[N], t[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ops[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(cnt, <span class="number">0</span>);</span><br><span class="line">    CLR(last, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">            Len[u] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        End[id] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">            <span class="keyword">int</span> tu = u;</span><br><span class="line">            <span class="keyword">while</span> (tu)</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt[tu][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (i - last[tu] &gt;= Len[tu])</span><br><span class="line">                &#123;</span><br><span class="line">                    ++cnt[tu][<span class="number">1</span>];</span><br><span class="line">                    last[tu] = i;</span><br><span class="line">                &#125;</span><br><span class="line">                tu = L[tu].fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">0</span>, i, n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;ops[i], t);</span><br><span class="line">            ac::ins(t, <span class="built_in">strlen</span>(t), i);</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        ac::query(s, <span class="built_in">strlen</span>(s));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d\n"</span>, ++T);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt[End[i]][ops[i]]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2296 Ring（AC自动机+DP）</title>
      <link href="/2017/09/25/HDU-2296/"/>
      <url>/2017/09/25/HDU-2296/</url>
      
        <content type="html"><![CDATA[<p>Ring</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 3970    Accepted Submission(s): 1318</p><a id="more"></a><p>Problem Description<br>For the hope of a forever love, Steven is planning to send a ring to Jane with a romantic string engraved on. The string’s length should not exceed N. The careful Steven knows Jane so deeply that he knows her favorite words, such as “love”, “forever”. Also, he knows the value of each word. The higher value a word has the more joy Jane will get when see it.<br>The weight of a word is defined as its appeared times in the romantic string multiply by its value, while the weight of the romantic string is defined as the sum of all words’ weight. You should output the string making its weight maximal. </p><p>Input<br>The input consists of several test cases. The first line of input consists of an integer T, indicating the number of test cases. Each test case starts with a line consisting of two integers: N, M, indicating the string’s length and the number of Jane’s favorite words. Each of the following M lines consists of a favorite word Si. The last line of each test case consists of M integers, while the i-th number indicates the value of Si.<br>Technical Specification</p><ol><li>T ≤ 15</li><li>0 &lt; N ≤ 50, 0 &lt; M ≤ 100.</li><li>The length of each word is less than 11 and bigger than 0.</li><li>1 ≤ Hi ≤ 100. </li><li>All the words in the input are different.</li><li>All the words just consist of ‘a’ - ‘z’.</li></ol><p>Output<br>For each test case, output the string to engrave on a single line.<br>If there’s more than one possible answer, first output the shortest one. If there are still multiple solutions, output the smallest in lexicographically order.</p><p>The answer may be an empty string. </p><p>Sample Input<br>2<br>7 2<br>love<br>ever<br>5 5<br>5 1<br>ab<br>5</p><p>Sample Output<br>lovever<br>abab</p><p>Hint</p><p>Sample 1: weight(love) = 5, weight(ever) = 5, so weight(lovever) = 5 + 5 = 10<br>Sample 2: weight(ab) = 2 * 5 = 10, so weight(abab) = 10 </p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2296" target="_blank" rel="noopener">HDU 2296</a><br>题意就是让你构造长度不大于$n$的字符串，使得其总价值最大，其中总价值的定义为所有题中所给$子串的价值*子串在构造串中出现次数$，那么显然用$dp[i][j]$表示当前构造长度为$i$，走到了第$j$个节点的最大总价值，由于题目还要求了长度尽量短、字典序尽量小，因此用$dps[i][j]$记录$dp[i][j]$的最优方案，这里有一个问题，如果fail指针指向的位置也是结束位置也要将它的价值传递到当前串的价值里即：$L[u].value+=L[L[u].fail].value$，因为一旦存在$fail$指向结束位置，说明指向的串是当前串的后缀的前缀（子串的定义不就是后缀的前缀或者前缀的后缀吗），因此要把价值累加上去。<br>转移方程很显然，然后一开始要将$dp$初始化为$-\infty$，考虑到合法性的问题，因为不是所有的位置都可以进行转移，不然所有长度大于$1$的字符串都会在枚举的长度小于当前长度的时候就被考虑了，实际上这是不可能存在的，最后要特判一下空串：当最大总价值为$0$的时候，空串显然是长度和字典序都最优的解<br>转移方程：</p><script type="math/tex; mode=display">dp[0][0] = 0, \\dp[i + 1][v] = max(dp[i + 1][v], dp[i][j] + L[v].value)</script><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> v, fail;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = v = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">55</span>][N], val[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">char</span> S[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> dps[<span class="number">55</span>][N][<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].v += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].v)</span><br><span class="line">                L[u].v += L[uf].v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _lt(<span class="keyword">char</span> a[], <span class="keyword">char</span> b[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> la = <span class="built_in">strlen</span>(a), lb = <span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (la &lt; lb)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (la &gt; lb)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; la; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; b[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, m, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ac::init();</span><br><span class="line">        CLR(dps, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            ac::ins(S[i], <span class="built_in">strlen</span>(S[i]), val[i]);</span><br><span class="line">        ac::build();</span><br><span class="line">        CLR(dp, -INF);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">55</span>], ans_str[N];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = L[j].nxt[k];</span><br><span class="line">                    <span class="keyword">int</span> R =  dp[i][j] + L[v].v;</span><br><span class="line">                    <span class="built_in">strcpy</span>(temp, dps[i][j]);</span><br><span class="line">                    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(dps[i][j]);</span><br><span class="line">                    temp[len] = <span class="string">'a'</span> + k;</span><br><span class="line">                    temp[len + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i + <span class="number">1</span>][v] &lt; R  || (R == dp[i + <span class="number">1</span>][v] &amp;&amp; _lt(temp, dps[i + <span class="number">1</span>][v])))</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i + <span class="number">1</span>][v] = R;</span><br><span class="line">                        <span class="built_in">strcpy</span>(dps[i + <span class="number">1</span>][v], temp);</span><br><span class="line">                        <span class="keyword">if</span> (ans &lt; dp[i + <span class="number">1</span>][v] || (ans == dp[i + <span class="number">1</span>][v] &amp;&amp; _lt(temp, ans_str)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans = dp[i + <span class="number">1</span>][v];</span><br><span class="line">                            <span class="built_in">strcpy</span>(ans_str, temp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans ? ans_str : <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 2434 阿狸的打字机（AC自动机构造fail树+DFS序+离线树状数组）</title>
      <link href="/2017/09/25/BZOJ-2434/"/>
      <url>/2017/09/25/BZOJ-2434/</url>
      
        <content type="html"><![CDATA[<p>2434: [Noi2011]阿狸的打字机</p><p>Time Limit: 10 Sec  Memory Limit: 256 MB<br>Submit: 3491  Solved: 1907<br>Description<br><a id="more"></a><br>阿狸喜欢收藏各种稀奇古怪的东西，最近他淘到一台老式的打字机。打字机上只有28个按键，分别印有26个小写英文字母和’B’、’P’两个字母。</p><p>经阿狸研究发现，这个打字机是这样工作的：</p><p>| 输入小写字母，打字机的一个凹槽中会加入这个字母(这个字母加在凹槽的最后)。</p><p>| 按一下印有’B’的按键，打字机凹槽中最后一个字母会消失。</p><p>| 按一下印有’P’的按键，打字机会在纸上打印出凹槽中现有的所有字母并换行，但凹槽中的字母不会消失。<br>例如，阿狸输入aPaPBbP，纸上被打印的字符如下：<br>a<br>aa<br>ab<br>我们把纸上打印出来的字符串从1开始顺序编号，一直到n。打字机有一个非常有趣的功能，在打字机中暗藏一个带数字的小键盘，在小键盘上输入两个数(x,y)（其中1≤x,y≤n），打字机会显示第x个打印的字符串在第y个打印的字符串中出现了多少次。<br>阿狸发现了这个功能以后很兴奋，他想写个程序完成同样的功能，你能帮助他么？</p><p>Input<br>输入的第一行包含一个字符串，按阿狸的输入顺序给出所有阿狸输入的字符。<br>第二行包含一个整数m，表示询问个数。<br>接下来m行描述所有由小键盘输入的询问。其中第i行包含两个整数x, y，表示第i个询问为(x, y)。</p><p>Output<br>输出m行，其中第i行包含一个整数，表示第i个询问的答案。</p><p>Sample Input</p><p>aPaPBbP<br>3<br>1 2<br>1 3<br>2 3</p><p>Sample Output</p><p>2<br>1<br>0</p><p>题目链接：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2434" target="_blank" rel="noopener">BZOJ 2434</a><br>这题由于是存在子串的关系，可以容易想到用fail树，然后先考虑暴力做法：对于某一询问，将$y$串在字典树中的$|y|$个节点位置都加上$1$，然后此询问的答案就是以$x$串在字典树中的结束节点$u$为根的子树中$1$的个数，那么单点更新，子树求和肯定用$BIT$喽，那么暴力的伪代码差不多是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">....此处省略用一些估计很麻烦的方法记录每一个串在trie中的节点位置的操作.....</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(str[y]); ++j)</span><br><span class="line">&#123;</span><br><span class="line">add(L[str[y][j]的对应节点位置], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans[i] = querysum(L[lastpos_u],R[lastpos_u]);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(str[y]); ++j)<span class="comment">//统计完肯定要撤销前面的操作</span></span><br><span class="line">&#123;</span><br><span class="line">add(L[str[y][j]的对应节点位置], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这么一看复杂度还是不行，观察一下统计的过程可以发现在$query$的时候总是仅有一个$y$串是生效的，因此我们为什么不枚举$y$串，然后把跟$y$相关的询问一次性处理掉呢？那么可以发现离线是可以的，但是也不是随便离线的啊，然后又可以发现按照我们插入字典树的顺序，$y$串的顺序是正序递增的，这个性质挺好，那如果每一次$\mathbf P$操作的时候我们都保证当前只有$\mathbf P$出来的这一串留在树中就好了。<br>那么可以想到每一次插入新节点时对该位置加$1$；$\mathbf B$操作时返回父节点前把当前节点$-1$，$\mathbf P$时处理当前可能存在的查询就好了<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;;</span><br><span class="line">&#125; E[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;Q[N];</span><br><span class="line"><span class="keyword">int</span> sz, pos[N], id;</span><br><span class="line"><span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="keyword">int</span> in[N], out[N], idx, T[N], pre[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    id = <span class="number">0</span>;</span><br><span class="line">    CLR(head, <span class="number">-1</span>);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    CLR(T, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!Q[i].empty())</span><br><span class="line">            Q[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in[u] = ++idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'P'</span>)</span><br><span class="line">                pos[++id] = u;<span class="comment">//pos记录了第i个串的结束节点位置</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'B'</span>)</span><br><span class="line">                u = pre[u];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[sz].init();</span><br><span class="line">                    L[u].nxt[v] = sz++;</span><br><span class="line">                &#125;</span><br><span class="line">                pre[L[u].nxt[v]] = u;</span><br><span class="line">                u = L[u].nxt[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> bit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; N)</span><br><span class="line">        &#123;</span><br><span class="line">            T[k] += v;</span><br><span class="line">            k += (k &amp; -k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += T[k];</span><br><span class="line">            k -= (k &amp; -k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum(r) - sum(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        ac::ins(s, len);</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; sz; ++i)</span><br><span class="line">            add(L[i].fail, i);</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            Q[y].push_back((Node) &#123;x, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'P'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++Y;</span><br><span class="line">                <span class="keyword">int</span> m = Q[Y].size();</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> qid = Q[Y][j].id;</span><br><span class="line">                    <span class="keyword">int</span> x = pos[Q[Y][j].x];</span><br><span class="line">                    ans[qid] = bit::query(in[x], out[x]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'B'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                bit::add(in[u], <span class="number">-1</span>);</span><br><span class="line">                u = pre[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                u = L[u].nxt[s[i] - <span class="string">'a'</span>];</span><br><span class="line">                bit::add(in[u], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4117 GRE Words（AC自动机构造fail树+线段树|后缀数组+DP）</title>
      <link href="/2017/09/24/HDU-4117/"/>
      <url>/2017/09/24/HDU-4117/</url>
      
        <content type="html"><![CDATA[<p>GRE Words</p><p>Time Limit: 30000/15000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 4539    Accepted Submission(s): 446</p><a id="more"></a><p>Problem Description<br>Recently George is preparing for the Graduate Record Examinations (GRE for short). Obviously the most important thing is reciting the words.<br>Now George is working on a word list containing N words.<br>He has so poor a memory that it is too hard for him to remember all of the words on the list. But he does find a way to help him to remember. He finds that if a sequence of words has a property that for all pairs of neighboring words, the previous one is a substring of the next one, then the sequence of words is easy to remember.<br>So he decides to eliminate some words from the word list first to make the list easier for him. Meantime, he doesn’t want to miss the important words. He gives each word an importance, which is represented by an integer ranging from -1000 to 1000, then he wants to know which words to eliminate to maximize the sum of the importance of remaining words. Negative importance just means that George thought it useless and is a waste of time to recite the word.<br>Note that although he can eliminate any number of words from the word list, he can never change the order between words. In another word, the order of words appeared on the word list is consistent with the order in the input. In addition, a word may have different meanings, so it can appear on the list more than once, and it may have different importance in each occurrence.</p><p>Input<br>The first line contains an integer T(1 &lt;= T &lt;= 50), indicating the number of test cases.<br>Each test case contains several lines.<br>The first line contains an integer N(1 &lt;= N &lt;= 2 <em> 104), indicating the number of words.<br>Then N lines follows, each contains a string Si and an integer Wi, representing the word and its importance. Si contains only lowercase letters.<br>You can assume that the total length of all words will not exceeded 3 </em> 105.</p><p>Output<br>For each test case in the input, print one line: “Case #X: Y”, where X is the test case number (starting with 1) and Y is the largest importance of the remaining sequence of words.</p><p>Sample Input<br>1<br>5<br>a 1<br>ab 2<br>abb 3<br>baba 5<br>abbab 8</p><p>Sample Output<br>Case #1: 14</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4117" target="_blank" rel="noopener">HDU 4117</a><br>后缀数组：据说题目是随机数据，后缀数组是碰巧能过，否则人造数据肯定T；<br>还是用AC自动机比较的好（这题AC自动机简直是噩梦，debug了一天，最后发现是各种小错误引起的不是ME就是WA，果然还是太太太蒻了）<br>题意就是类似于带权的最长上升子序列，而这里的最长上升自序列的条件是前者是后者的子串，用$dp[i]$表示以第$i$个字符串结尾的最大权值；<br>由于可以利用区间最小值与区间长度之间的单调性关系优化一点复杂度，从小到大枚举当前位置的$rank<em>i$，然后在$1～rank</em>{i-1}$与$rank<em>{i+1}～rank</em>{len}$之间找到顺序在$i$之后的字符串$str_j$，判断$str_i$是否是$str_j$是其子串，当$LCP(str_i,str_j)&lt;Len[i]$时说明当前字符串已经不能作为子串了，直接break,否则就有:</p><script type="math/tex; mode=display">dp[j]=max(dp[j],dp[i]+value[j])</script><p>说说AC自动机吧，没做这道题之前还不知道fail指针还有这种用法，先想想fail指针指向的两头有什么关系？显然如果从节点$u$指向$v$，记根节点到某一个点$x$路径所形成的字符串为$str_x$，那么$str_u$的最长公共后缀是$str_v$，那如果把fail指针反一下，可以发现$str_v$是所有指向的$str_u$的后缀，即$v$的子树都是它可以成为子串的目标，那如果当$v$是结束点时，它就是所指向的$str_u$的子串了，那么状态可以这样转移：从成为结尾节点的$str_v$转移到$str_u$，但是这样会漏掉重复字符串的情况，即路径上可能有多个结束节点，那么就要把整个路径遍历一遍，然后把它的价值转移下去，遍历某一个字符串的时候维护$L \rightarrow u$的最大价值，最后结尾时更新到结尾节点的子树里<br>后缀数组代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">7</span> + <span class="number">2e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> wa[N], wb[N], sa[N], cnt[N];</span><br><span class="line"><span class="keyword">int</span> ran[N], height[N], ID[N];</span><br><span class="line"><span class="keyword">int</span> st[M], val[M], Len[M];</span><br><span class="line"><span class="keyword">int</span> dp[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> r[], <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + d] == r[b + d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, *x = wa, *y = wb;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ++cnt[x[i] = s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        sa[--cnt[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = n - k; i &lt; n; ++i)</span><br><span class="line">            y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= k)</span><br><span class="line">                y[p++] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ++cnt[x[y[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            sa[--cnt[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x, y);</span><br><span class="line">        x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            x[sa[i]] = cmp(y, sa[i - <span class="number">1</span>], sa[i], k) ? p - <span class="number">1</span> : p++;</span><br><span class="line">        m = p;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gethgt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ran[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k)</span><br><span class="line">            --k;</span><br><span class="line">        <span class="keyword">int</span> j = sa[ran[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (s[j + k] == s[i + k])</span><br><span class="line">            ++k;</span><br><span class="line">        height[ran[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= T; ++q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s + sum, &amp;val[i]);</span><br><span class="line">            dp[i] = val[i];</span><br><span class="line">            Len[i] = <span class="built_in">strlen</span>(s + sum);</span><br><span class="line">            st[i] = sum;</span><br><span class="line">            s[sum + Len[i]] = <span class="string">'$'</span>;</span><br><span class="line">            <span class="keyword">int</span> ed = sum + Len[i];</span><br><span class="line">            <span class="keyword">for</span> (j = sum; j &lt;= ed; ++j)</span><br><span class="line">                ID[j] = i;</span><br><span class="line">            sum += Len[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s[sum] = <span class="string">'\0'</span>;</span><br><span class="line">        DA(sum + <span class="number">1</span>, <span class="string">'z'</span> + <span class="number">1</span>);</span><br><span class="line">        gethgt(sum);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mh = INF;</span><br><span class="line">            <span class="keyword">for</span> (j = ran[st[i]] - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                mh = min(mh, height[j + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (mh &lt; Len[i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> v = ID[sa[j]];</span><br><span class="line">                <span class="keyword">if</span> (v &gt; i)</span><br><span class="line">                    dp[v] = max(dp[v], dp[i] + val[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            mh = INF;</span><br><span class="line">            <span class="keyword">for</span> (j = ran[st[i]] + <span class="number">1</span>; j &lt;= sum; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                mh = min(mh, height[j]);</span><br><span class="line">                <span class="keyword">if</span> (mh &lt; Len[i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> v = ID[sa[j]];</span><br><span class="line">                <span class="keyword">if</span> (v &gt; i)</span><br><span class="line">                    dp[v] = max(dp[v], dp[i] + val[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans = max(ans, dp[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, q, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AC自动机代码（注意pushdown不要写错）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, mid, r;</span><br><span class="line">    <span class="keyword">int</span> v, flag;</span><br><span class="line">&#125; T[M * <span class="number">4</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _nxt): to(_to), nxt(_nxt) &#123;&#125;;</span><br><span class="line">&#125; E[M];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> head[M], tot;</span><br><span class="line"><span class="keyword">int</span> in[M], out[M], idx, w[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    L[sz++].init();</span><br><span class="line">    str.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = L[<span class="number">0</span>].nxt[i];</span><br><span class="line">            <span class="keyword">if</span> (~v)</span><br><span class="line">            &#123;</span><br><span class="line">                L[v].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (~v)</span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].l = l;</span><br><span class="line">    T[k].r = r;</span><br><span class="line">    T[k].mid = MID(l, r);</span><br><span class="line">    T[k].v = <span class="number">0</span>;</span><br><span class="line">    T[k].flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    build(LC(k), l, T[k].mid);</span><br><span class="line">    build(RC(k), T[k].mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T[k].v = max(T[LC(k)].v, T[RC(k)].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].flag)</span><br><span class="line">    &#123;</span><br><span class="line">        T[LC(k)].flag = max(T[LC(k)].flag, T[k].flag);</span><br><span class="line">        T[RC(k)].flag = max(T[RC(k)].flag, T[k].flag);</span><br><span class="line">        T[LC(k)].v = max(T[LC(k)].v, T[k].flag);</span><br><span class="line">        T[RC(k)].v = max(T[RC(k)].v, T[k].flag);</span><br><span class="line">        T[k].flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= T[k].l &amp;&amp; T[k].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        T[k].v = max(T[k].v, v);</span><br><span class="line">        T[k].flag = max(T[k].flag, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= T[k].mid)</span><br><span class="line">            update(LC(k), l, r, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; T[k].mid)</span><br><span class="line">            update(RC(k), l, r, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update(LC(k), l, T[k].mid, v), update(RC(k), T[k].mid + <span class="number">1</span>, r, v);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T[k].l == T[k].r)</span><br><span class="line">        <span class="keyword">return</span> T[k].v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(k);</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= T[k].mid)</span><br><span class="line">            <span class="keyword">return</span> query(LC(k), x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> query(RC(k), x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    E[tot] = edge(t, head[s]);</span><br><span class="line">    head[s] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in[u] = ++idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = E[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != f)</span><br><span class="line">            dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tcase, n, i, j, u, maxv;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tcase);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= tcase; ++q)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">string</span> Str;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; Str &gt;&gt; w[i];</span><br><span class="line">            str.emplace_back(Str);</span><br><span class="line">            ac::ins(Str, Str.length());</span><br><span class="line">        &#125;</span><br><span class="line">        ac::build();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; sz; ++i)</span><br><span class="line">            add(L[i].fail, i);</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, idx);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (w[i] &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            maxv = <span class="number">0</span>;</span><br><span class="line">            u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> len = str[i].length();</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                u = L[u].nxt[str[i][j] - <span class="string">'a'</span>];</span><br><span class="line">                maxv = max(maxv, query(<span class="number">1</span>, in[u]));</span><br><span class="line">            &#125;</span><br><span class="line">            update(<span class="number">1</span>, in[u], out[u], maxv + w[i]);</span><br><span class="line">            ans = max(ans, maxv + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, q, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4348 To the moon（主席树+区间操作）</title>
      <link href="/2017/09/23/HDU-4348/"/>
      <url>/2017/09/23/HDU-4348/</url>
      
        <content type="html"><![CDATA[<p>To the moon</p><p>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 6373    Accepted Submission(s): 1481</p><a id="more"></a><p>Problem Description<br>Background<br>To The Moon is a independent game released in November 2011, it is a role-playing adventure game powered by RPG Maker.<br>The premise of To The Moon is based around a technology that allows us to permanently reconstruct the memory on dying man. In this problem, we’ll give you a chance, to implement the logic behind the scene.</p><p>You‘ve been given N integers A[1], A[2],…, A[N]. On these integers, you need to implement the following operations:</p><ol><li>C l r d: Adding a constant d for every {Ai | l &lt;= i &lt;= r}, and increase the time stamp by 1, this is the only operation that will cause the time stamp increase. </li><li>Q l r: Querying the current sum of {Ai | l &lt;= i &lt;= r}.</li><li>H l r t: Querying a history sum of {Ai | l &lt;= i &lt;= r} in time t.</li><li>B t: Back to time t. And once you decide return to a past, you can never be access to a forward edition anymore.<br>.. N, M ≤ 105, |A[i]| ≤ 109, 1 ≤ l ≤ r ≤ N, |d| ≤ 104 .. the system start from time 0, and the first modification is in time 1, t ≥ 0, and won’t introduce you to a future state.</li></ol><p>Input<br>n m<br>A1 A2 … An<br>… (here following the m operations. )</p><p>Output<br>… (for each query, simply print the result. )</p><p>Sample Input<br>10 5<br>1 2 3 4 5 6 7 8 9 10<br>Q 4 4<br>Q 1 10<br>Q 2 4<br>C 3 6 3<br>Q 2 4</p><p>2 4<br>0 0<br>C 1 1 1<br>C 2 2 -1<br>Q 1 2<br>H 1 2 1</p><p>Sample Output<br>4<br>55<br>9<br>15</p><p>0<br>1</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4348" target="_blank" rel="noopener">HDU 4348</a><br>函数式线段树，照着网上的代码，自己改了一份可以对两个历史版本$history_L ～ history_R$之间的区间操作的代码，不知道有没有BUG，其实最普通的主席树就是动态开点的线段树，但是它的版本是一直依靠第$0$个版本，那么我们可以改成让它依靠前一个版本，这样就可以进行区间差分操作，然后由于build本身占用$O(NlogN)$的空间，修改也是$O(NlogN)$的空间，那么实际上数组要开$2*NlogN$大小，大约开$40$倍应该够了。由于对$(l,r)$区间操作，实际上用的差分是$L-1$与$R$，因此要让一开始的版本成为$root[1]$，然后后面的版本从$2$开始更新，历史版本也要往后推一个位置<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    LL v, add;</span><br><span class="line">&#125; T[N * <span class="number">34</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], arr[N], sz;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++sz;</span><br><span class="line">    T[x].ls = T[x].rs = <span class="number">0</span>;</span><br><span class="line">    T[x].add = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        T[x].v = arr[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        build(T[x].ls, l, mid);</span><br><span class="line">        build(T[x].rs, mid + <span class="number">1</span>, r);</span><br><span class="line">        T[x].v = T[T[x].ls].v + T[T[x].rs].v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++sz;</span><br><span class="line">    T[x] = T[y];</span><br><span class="line">    T[x].v += (LL)(qr - ql + <span class="number">1</span>) * (LL)v;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        T[x].add += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            update(T[x].ls, T[y].ls, l, mid, ql, qr, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            update(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, ql, qr, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update(T[x].ls, T[y].ls, l, mid, ql, mid, v), update(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> T[x].v - T[y].v;</span><br><span class="line">    LL add = (LL)(qr - ql + <span class="number">1</span>) * (T[x].add - T[y].add);</span><br><span class="line">    <span class="keyword">int</span> mid = MID(l, r);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(T[x].ls, T[y].ls, l, mid, ql, qr) + add;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, ql, qr) + add;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(T[x].ls, T[y].ls, l, mid, ql, mid) + query(T[x].rs, T[y].rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr) + add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i;</span><br><span class="line">    <span class="keyword">char</span> ops[N];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">        build(root[<span class="number">1</span>], <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ops);</span><br><span class="line">            <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'C'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l, r, d;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;d);</span><br><span class="line">                ++idx;</span><br><span class="line">                update(root[idx], root[idx - <span class="number">1</span>], <span class="number">1</span>, n, l, r, d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l, r;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, query(root[idx], root[<span class="number">0</span>], <span class="number">1</span>, n, l, r));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ops[<span class="number">0</span>] == <span class="string">'H'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l, r, h;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;h);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, query(root[h + <span class="number">1</span>], root[<span class="number">0</span>], <span class="number">1</span>, n, l, r));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;idx), ++idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4758 Walk Through Squares（AC自动机+状压DP）</title>
      <link href="/2017/09/23/HDU-4758/"/>
      <url>/2017/09/23/HDU-4758/</url>
      
        <content type="html"><![CDATA[<p>Walk Through Squares</p><p>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65535/65535 K (Java/Others)<br>Total Submission(s): 1523    Accepted Submission(s): 507</p><a id="more"></a><p>Problem Description</p><p>  On the beaming day of 60th anniversary of NJUST, as a military college which was Second Artillery Academy of Harbin Military Engineering Institute before, queue phalanx is a special landscape.</p><p>  Here is a M<em>N rectangle, and this one can be divided into M</em>N squares which are of the same size. As shown in the figure below:<br>  01—02—03—04<br>  || || || ||<br>  05—06—07—08<br>  || || || ||<br>  09—10—11—12<br>  Consequently, we have (M+1)<em>(N+1) nodes, which are all connected to their adjacent nodes. And actual queue phalanx will go along the edges.<br>  The ID of the first node,the one in top-left corner,is 1. And the ID increases line by line first ,and then by column in turn ,as shown in the figure above.<br>  For every node,there are two viable paths:<br>  (1)go downward, indicated by ‘D’;<br>  (2)go right, indicated by ‘R’;<br>  The current mission is that, each queue phalanx has to walk from the left-top node No.1 to the right-bottom node whose id is (M+1)</em>(N+1).<br>In order to make a more aesthetic marching, each queue phalanx has to conduct two necessary actions. Let’s define the action:<br>  An action is started from a node to go for a specified travel mode.<br>  So, two actions must show up in the way from 1 to (M+1)*(N+1).</p><p>  For example, as to a 3*2 rectangle, figure below:<br>    01—02—03—04<br>    || || || ||<br>    05—06—07—08<br>    || || || ||<br>    09—10—11—12<br>  Assume that the two actions are (1)RRD (2)DDR</p><p>  As a result , there is only one way : RRDDR. Briefly, you can not find another sequence containing these two strings at the same time.<br>  If given the N, M and two actions, can you calculate the total ways of walking from node No.1 to the right-bottom node ?</p><p>Input<br>  The first line contains a number T,(T is about 100, including 90 small test cases and 10 large ones) denoting the number of the test cases.<br>  For each test cases,the first line contains two positive integers M and N(For large test cases,1&lt;=M,N&lt;=100, and for small ones 1&lt;=M,N&lt;=40). M denotes the row number and N denotes the column number.<br>  The next two lines each contains a string which contains only ‘R’ and ‘D’. The length of string will not exceed 100. We ensure there are no empty strings and the two strings are different.</p><p>Output<br>  For each test cases,print the answer MOD 1000000007 in one line.</p><p>Sample Input<br>2<br>3 2<br>RRD<br>DDR<br>3 2<br>R<br>D</p><p>Sample Output<br>1<br>10</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4758" target="_blank" rel="noopener">HDU 4758</a><br>题意就是让构造只含$\mathbf R$和$\mathbf D$的字符串，使得其只含$m$个$\mathbf R$和$n$个$\mathbf D$且题目给的两个字符串是其子串，求构造方案数。<br>首先肯定构造AC自动机，然后同时记得把fail的标记传递，记向$\mathbf R$走为$0$，向$\mathbf D$走为$1$，然后用$dp[u][j][k][s]$表示当前在AC自动机的第$u$个节点上，构造出的字符串含$j$个$\mathbf R$,$k$个$\mathbf D$，包含的字符串二进制状态为$s$，设$v$为$u$下一个可到达的节点，$l$为走的方向（向$\mathbf R$或$\mathbf D$走）那么可以发现：</p><script type="math/tex; mode=display">\begin{cases}dp[0][0][0][0]=1,\\dp[v][j+(l==0)][k+(l==1)][s|L[v].state]+=dp[u][j][k][s]\end{cases}</script><p>这题枚举的顺序很重要，要在内层循环枚举所在节点，因为一个节点可能会被多次更新，一开始先枚举节点发现后面会漏算很多情况导致样例都出不来<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">90</span>];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">105</span>][<span class="number">105</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = id[(<span class="keyword">int</span>)s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt |= (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt |= L[uf].cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, i, n, m, j, u, l, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    id[<span class="string">'R'</span>] = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'D'</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        AC::ins(str, <span class="built_in">strlen</span>(str), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        AC::ins(str, <span class="built_in">strlen</span>(str), <span class="number">1</span>);</span><br><span class="line">        AC::build();</span><br><span class="line">        CLR(dp, <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (u = <span class="number">0</span>; u &lt; sz; ++u)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">4</span>; ++s)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!dp[u][i][j][s])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; <span class="number">2</span>; ++l)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> v = L[u].nxt[l];</span><br><span class="line">                            dp[v][i + !l][j + l][s | L[v].cnt] = (dp[v][i + !l][j + l][s | L[v].cnt] + dp[u][i][j][s]) % mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ans = (ans + dp[i][m][n][<span class="number">3</span>]) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 4057 Rescue the Rabbit（AC自动机+状压DP）</title>
      <link href="/2017/09/22/HDU-4057/"/>
      <url>/2017/09/22/HDU-4057/</url>
      
        <content type="html"><![CDATA[<p>Rescue the Rabbit</p><p>Time Limit: 20000/10000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 2273    Accepted Submission(s): 667</p><a id="more"></a><p>Problem Description<br>Dr. X is a biologist, who likes rabbits very much and can do everything for them. 2012 is coming, and Dr. X wants to take some rabbits to Noah’s Ark, or there are no rabbits any more.</p><p>A rabbit’s genes can be expressed as a string whose length is l (1 ≤ l ≤ 100) containing only ‘A’, ‘G’, ‘T’, ‘C’. There is no doubt that Dr. X had a in-depth research on the rabbits’ genes. He found that if a rabbit gene contained a particular gene segment, we could consider it as a good rabbit, or sometimes a bad rabbit. And we use a value W to measure this index.</p><p>We can make a example, if a rabbit has gene segment “ATG”, its W would plus 4; and if has gene segment “TGC”, its W plus -3. So if a rabbit’s gene string is “ATGC”, its W is 1 due to ATGC contains both “ATG”(+4) and “TGC”(-3). And if another rabbit’s gene string is “ATGATG”, its W is 4 due to one gene segment can be calculate only once.</p><p>Because there are enough rabbits on Earth before 2012, so we can assume we can get any genes with different structure. Now Dr. X want to find a rabbit whose gene has highest W value. There are so many different genes with length l, and Dr. X is not good at programming, can you help him to figure out the W value of the best rabbit.</p><p>Input<br>There are multiple test cases. For each case the first line is two integers n (1 ≤ n ≤ 10)，l (1 ≤ l ≤ 100), indicating the number of the particular gene segment and the length of rabbits’ genes.</p><p>The next n lines each line contains a string DNAi and an integer wi (|wi| ≤ 100), indicating this gene segment and the value it can contribute to a rabbit’s W.</p><p>Output<br>For each test case, output an integer indicating the W value of the best rabbit. If we found this value is negative, you should output “No Rabbit after 2012!”.</p><p>Sample Input<br>2 4<br>ATG 4<br>TGC -3</p><p>1 6<br>TGC 4</p><p>4 1<br>A -1<br>T -2<br>G -3<br>C -4</p><p>Sample Output<br>4<br>4<br>No Rabbit after 2012!</p><p>Hint</p><p>case 1：we can find a rabbit whose gene string is ATGG(4), or ATGA(4) etc.<br>case 2：we can find a rabbit whose gene string is TGCTGC(4), or TGCCCC(4) etc.<br>case 3：any gene string whose length is 1 has a negative W.</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4057" target="_blank" rel="noopener">HDU 4057</a><br>题意就是构造长度为$l$的字符串，如果包含给定的基因片段$str_i$，那么字符串的权值要加上$w_i$，而且一个基因片段最多只能算一次，求能构造出的最大权值。<br>考虑AC自动机上的DP，可以用$dp[i][j][s]$表示当前构造的字符串长度为$i$，走到AC自动机上第$j$个节点，包含的字符串二进制状态为$s$，设$j$可以走一步到下一个节点$v$，那么显然有：</p><script type="math/tex; mode=display">dp[0][0][0]=0,\\dp[i+1][v][s|L[v].state]=max(dp[i+1][v][s|L[v].state],dp[i][j][s]+val[s|L[v].state]-val[s])</script><p>由于是一个基因片段只能算一次，因此可以用前后变化值来求真正新增的权值，另外这题从转移方程来看显然是可以优化一下空间复杂度，用滚动数组即可（滚动之前一定要记得把下一个状态数组初始化，否则会出问题），否则内存占用巨大，当然还有速度比我这种做法快的即去更新可达状态，最后从可达状态中选出最优解<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">90</span>], w[<span class="number">10</span>], dp[<span class="number">2</span>][N][<span class="number">1</span> &lt;&lt; <span class="number">10</span>], sz, val[<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n, l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = id[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt |= (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt |= L[uf].cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getval</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">            ret += w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[<span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'T'</span>] = <span class="number">1</span>;</span><br><span class="line">    id[<span class="string">'G'</span>] = <span class="number">2</span>;</span><br><span class="line">    id[<span class="string">'C'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;l))</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, s, &amp;w[i]);</span><br><span class="line">            AC::ins(s, <span class="built_in">strlen</span>(s), i);</span><br><span class="line">        &#125;</span><br><span class="line">        AC::build();</span><br><span class="line">        CLR(dp, -INF);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> R = (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">            val[i] = getval(i);</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>, nxt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; ++i) <span class="comment">//100</span></span><br><span class="line">        &#123;</span><br><span class="line">            CLR(dp[nxt], -INF);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j) <span class="comment">//1000</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; R; ++s)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[now][j][s] == -INF)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> v = L[j].nxt[k];</span><br><span class="line">                        <span class="keyword">int</span> news = (s | L[v].cnt);</span><br><span class="line">                        dp[nxt][v][news] = max(dp[nxt][v][news], dp[now][j][s] + val[news] - val[s]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(now, nxt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; R; ++j)</span><br><span class="line">                <span class="keyword">if</span> (dp[now][i][j] &gt; ans)</span><br><span class="line">                    ans = dp[now][i][j];</span><br><span class="line">        ans &lt; <span class="number">0</span> ? <span class="built_in">puts</span>(<span class="string">"No Rabbit after 2012!"</span>) : <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2825 Wireless Password（AC自动机+状压DP）</title>
      <link href="/2017/09/22/HDU-2825/"/>
      <url>/2017/09/22/HDU-2825/</url>
      
        <content type="html"><![CDATA[<p>Wireless Password</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 7127    Accepted Submission(s): 2339</p><a id="more"></a><p>Problem Description<br>Liyuan lives in a old apartment. One day, he suddenly found that there was a wireless network in the building. Liyuan did not know the password of the network, but he got some important information from his neighbor. He knew the password consists only of lowercase letters ‘a’-‘z’, and he knew the length of the password. Furthermore, he got a magic word set, and his neighbor told him that the password included at least k words of the magic word set (the k words in the password possibly overlapping).</p><p>For instance, say that you know that the password is 3 characters long, and the magic word set includes ‘she’ and ‘he’. Then the possible password is only ‘she’.</p><p>Liyuan wants to know whether the information is enough to reduce the number of possible passwords. To answer this, please help him write a program that determines the number of possible passwords.</p><p>Input<br>There will be several data sets. Each data set will begin with a line with three integers n m k. n is the length of the password (1&lt;=n&lt;=25), m is the number of the words in the magic word set(0&lt;=m&lt;=10), and the number k denotes that the password included at least k words of the magic set. This is followed by m lines, each containing a word of the magic set, each word consists of between 1 and 10 lowercase letters ‘a’-‘z’. End of input will be marked by a line with n=0 m=0 k=0, which should not be processed.</p><p>Output<br>For each test case, please output the number of possible passwords MOD 20090717.</p><p>Sample Input<br>10 2 2<br>hello<br>world<br>4 1 1<br>icpc<br>10 0 0<br>0 0 0</p><p>Sample Output<br>2<br>1<br>14195065</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2825" target="_blank" rel="noopener">HDU 2825</a><br>题意就是求构造长度为$n$，至少包含$k$个给定字符串的字符串方案数。<br>考虑AC自动机上的dp，$dp[i][j][s]$表示当前构造的字符串长度为$i$，走到了AC自动机第$j$个节点，包含的字符串二进制状态为$s$，然后设$j$的下一步走到$v$那么可以发现：</p><script type="math/tex; mode=display">dp[0][0][0]=1,\\dp[i+1][j][s|L[v].state]+=dp[i][j][s]</script><p>最后从$dp[len]$中选出二进制状态的$1$大于等于$k$的方案数求和即可，另外这题由于无用的状态太多因此最好用当前状态更新下一个状态，而不是用上一个状态更新当前状态，否则很容易TLE<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">20090717</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][N][<span class="number">1</span> &lt;&lt; <span class="number">10</span>], one[<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt |= (<span class="number">1</span> &lt;&lt; id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt |= L[uf].cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; ++i)</span><br><span class="line">        one[i] = <span class="built_in">bitset</span>&lt;<span class="number">11</span>&gt;(i).count();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k) &amp;&amp; (n || m || k))</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        CLR(dp, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            AC::ins(s, <span class="built_in">strlen</span>(s), i);</span><br><span class="line">        &#125;</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="keyword">int</span> R = (<span class="number">1</span> &lt;&lt; m);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> st = <span class="number">0</span>; st &lt; R; ++st)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][j][st])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">26</span>; ++l)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> v = L[j].nxt[l];</span><br><span class="line">                            dp[i + <span class="number">1</span>][v][st | L[v].cnt] += dp[i][j][st];</span><br><span class="line">                            <span class="keyword">if</span> (dp[i + <span class="number">1</span>][v][st | L[v].cnt] &gt;= mod)</span><br><span class="line">                                dp[i + <span class="number">1</span>][v][st | L[v].cnt] %= mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; R; ++s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (one[s] &gt;= k)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = ans + dp[n][i][s];</span><br><span class="line">                    <span class="keyword">if</span> (ans &gt; mod)</span><br><span class="line">                        ans %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2457 DNA repair（AC自动机+DP）</title>
      <link href="/2017/09/22/HDU-2457/"/>
      <url>/2017/09/22/HDU-2457/</url>
      
        <content type="html"><![CDATA[<p>DNA repair</p><p>Time Limit: 5000/2000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 2789    Accepted Submission(s): 1493</p><a id="more"></a><p>Problem Description<br>Biologists finally invent techniques of repairing DNA that contains segments causing kinds of inherited diseases. For the sake of simplicity, a DNA is represented as a string containing characters ‘A’, ‘G’ , ‘C’ and ‘T’. The repairing techniques are simply to change some characters to eliminate all segments causing diseases. For example, we can repair a DNA “AAGCAG” to “AGGCAC” to eliminate the initial causing disease segments “AAG”, “AGC” and “CAG” by changing two characters. Note that the repaired DNA can still contain only characters ‘A’, ‘G’, ‘C’ and ‘T’.</p><p>You are to help the biologists to repair a DNA by changing least number of characters.</p><p>Input<br>The input consists of multiple test cases. Each test case starts with a line containing one integers N (1 ≤ N ≤ 50), which is the number of DNA segments causing inherited diseases.<br>The following N lines gives N non-empty strings of length not greater than 20 containing only characters in “AGCT”, which are the DNA segments causing inherited disease.<br>The last line of the test case is a non-empty string of length not greater than 1000 containing only characters in “AGCT”, which is the DNA to be repaired.</p><p>The last test case is followed by a line containing one zeros.</p><p>Output<br>For each test case, print a line containing the test case number( beginning with 1) followed by the<br>number of characters which need to be changed. If it’s impossible to repair the given DNA, print -1.</p><p>Sample Input<br>2<br>AAA<br>AAG<br>AAAG<br>2<br>A<br>TG<br>TGAATG<br>4<br>A<br>G<br>C<br>T<br>AGT<br>0</p><p>Sample Output<br>Case 1: 1<br>Case 2: 4<br>Case 3: -1</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2457" target="_blank" rel="noopener">HDU 2457</a><br>题意就是将长度为$l$的字符串修改为不包含任何给定字符串的最少修改的字符个数，可以在AC自动机上进行DP，$dp[i][j]$表示当前的字符串长度为$i$，走到了AC自动机上第$j$个节点，不包含任意给定字符串的最少修改的字符个数；然后考虑下一步，肯定不能走到危险节点处，因此对于$j$的下一步安全节点$v$，显然有</p><script type="math/tex; mode=display">dp[0][0]=0,\\dp[i+1][v]=min(dp[i+1][v],dp[i][j]+(ch[v]!=s[i+1]))|节点v是安全的</script><p>最后从$dp[len]$安全节点选出最小的修改数就是答案了<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz, M;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> id[N], dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = id[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j, k;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'T'</span>] = <span class="number">1</span>;</span><br><span class="line">    id[<span class="string">'G'</span>] = <span class="number">2</span>;</span><br><span class="line">    id[<span class="string">'C'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            AC::ins(s, <span class="built_in">strlen</span>(s));</span><br><span class="line">        &#125;</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        CLR(dp, INF);</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = L[j].nxt[k];</span><br><span class="line">                    <span class="keyword">if</span> (!L[v].cnt)</span><br><span class="line">                        dp[i][v] = min(dp[i - <span class="number">1</span>][j] + (id[s[i]] == k ? <span class="number">0</span> : <span class="number">1</span>), dp[i][v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!L[i].cnt)</span><br><span class="line">                ans = min(dp[len][i], ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++T, ans == INF ? <span class="number">-1</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2243 考研路茫茫——单词情结（AC自动机+矩阵快速幂）</title>
      <link href="/2017/09/21/HDU-2243/"/>
      <url>/2017/09/21/HDU-2243/</url>
      
        <content type="html"><![CDATA[<p>考研路茫茫——单词情结</p><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 6018    Accepted Submission(s): 2042</p><a id="more"></a><p>Problem Description<br>背单词，始终是复习英语的重要环节。在荒废了3年大学生涯后，Lele也终于要开始背单词了。<br>一天，Lele在某本单词书上看到了一个根据词根来背单词的方法。比如”ab”,放在单词前一般表示”相反，变坏，离去”等。</p><p>于是Lele想，如果背了N个词根，那这些词根到底会不会在单词里出现呢。更确切的描述是：长度不超过L，只由小写字母组成的，至少包含一个词根的单词，一共可能有多少个呢？这里就不考虑单词是否有实际意义。</p><p>比如一共有2个词根 aa 和 ab ，则可能存在104个长度不超过3的单词，分别为<br>(2个) aa,ab,<br>(26个)aaa,aab,aac…aaz,<br>(26个)aba,abb,abc…abz,<br>(25个)baa,caa,daa…zaa,<br>(25个)bab,cab,dab…zab。</p><p>这个只是很小的情况。而对于其他复杂点的情况，Lele实在是数不出来了，现在就请你帮帮他。</p><p>Input<br>本题目包含多组数据，请处理到文件结束。<br>每组数据占两行。<br>第一行有两个正整数N和L。(0&lt;N&lt;6,0&lt;L&lt;2^31)<br>第二行有N个词根，每个词根仅由小写字母组成，长度不超过5。两个词根中间用一个空格分隔开。</p><p>Output<br>对于每组数据，请在一行里输出一共可能的单词数目。<br>由于结果可能非常巨大，你只需要输出单词总数模2^64的值。</p><p>Sample Input<br>2 3<br>aa ab<br>1 2<br>a</p><p>Sample Output<br>104<br>52</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2243" target="_blank" rel="noopener">HDU 2243</a><br>题目要求至少出现一次的方案数，这样显然不好求我们可以转换成总方案数减去一次都不出现的方案数，然后将题目的字符串改用AC自动机建立邻接矩阵，假设当前长度为i，那么对答案的贡献就是$26^i$-(长度为$i$的字符串中一次都不出现给定串的方案数)，后者可以像<a href="http://poj.org/problem?id=2778" target="_blank" rel="noopener">POJ 2778</a>一样用矩阵快速幂算，也就是说我们只要算出前者的前$l$项和，后者的前$l$项和然后作差就是答案了，但是前者实际上用等比数列求和公式会错，估计是取模是不支持除法的，由于前者是等比数列，根据其递推公式，用2*2的矩阵快速幂也可以算，也就是说全程矩阵快速幂就可以了。<br>以下式子中$S_i$为等比矩阵数列的前$i$项和，其首项是$A$，公比是$A$</p><script type="math/tex; mode=display">  第一项递推式：  \begin{pmatrix}  26 & 26 \\  0 & 0 \\  \end{pmatrix}  \times  \begin{pmatrix}  26 & 0 \\  1 & 1 \\  \end{pmatrix}^{n-1}  =  \begin{pmatrix}  \sum_{i=1}^{n}{26^i} & 26 \\  0 & 0 \\  \end{pmatrix}\\第二项递推式：  \begin{pmatrix}  S_1 & A \\  O & O \\  \end{pmatrix}  \times  \begin{pmatrix}  A & O \\  E & E \\  \end{pmatrix}^{n-1}  =  \begin{pmatrix}  S_n & A \\  O & O \\  \end{pmatrix}</script><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">70</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">int</span> sz, M;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (L[u].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[L[u].nxt[i]].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(L[u].nxt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULL A[N][N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                A[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">one</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            A[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span>*(<span class="keyword">const</span> Mat &amp;rhs)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; M; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (rhs.A[k][j])</span><br><span class="line">                            c.A[i][j] = c.A[i][j] + A[i][k] * rhs.A[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span>^(Mat a, ULL b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat r;</span><br><span class="line">        r.one();</span><br><span class="line">        <span class="keyword">while</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                r = r * a;</span><br><span class="line">            a = a * a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    LL l;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>, &amp;n, &amp;l))</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="keyword">while</span> (n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            AC::ins(s, len);</span><br><span class="line">        &#125;</span><br><span class="line">        Mat ans, mid;</span><br><span class="line">        ans.zero();</span><br><span class="line">        mid.zero();</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="comment">//计算前l项等比数列的和</span></span><br><span class="line">        M = <span class="number">2</span>;</span><br><span class="line">        ULL sum = <span class="number">0</span>;</span><br><span class="line">        ans.A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">        ans.A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">26</span>;</span><br><span class="line">        mid.A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">        mid.A[<span class="number">1</span>][<span class="number">0</span>] = mid.A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        ans  = ans * (mid ^ (l - <span class="number">1</span>));</span><br><span class="line">        sum = ans.A[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        ans.zero();</span><br><span class="line">        mid.zero();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算前l项矩阵幂的和</span></span><br><span class="line">        M = sz * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[i].nxt[j];</span><br><span class="line">                <span class="keyword">if</span> (L[v].cnt)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                ++ans.A[i][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = sz; j &lt; M; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.A[i][j] = ans.A[i][j - sz];</span><br><span class="line">                mid.A[i][j - sz] = ans.A[i][j - sz];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            mid.A[i + sz][i] = mid.A[i + sz][i + sz] = <span class="number">1</span>;</span><br><span class="line">        ans  = ans * (mid ^ (l - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            sum -= ans.A[<span class="number">0</span>][i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64u\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2778 DNA Sequence(AC自动机+矩阵快速幂)</title>
      <link href="/2017/09/21/POJ-2778/"/>
      <url>/2017/09/21/POJ-2778/</url>
      
        <content type="html"><![CDATA[<p>DNA Sequence<br>Time Limit: 1000MS        Memory Limit: 65536K<br>Total Submissions: 17760        Accepted: 6834<br><a id="more"></a><br>Description</p><p>It’s well known that DNA Sequence is a sequence only contains A, C, T and G, and it’s very useful to analyze a segment of DNA Sequence，For example, if a animal’s DNA sequence contains segment ATC then it may mean that the animal may have a genetic disease. Until now scientists have found several those segments, the problem is how many kinds of DNA sequences of a species don’t contain those segments. </p><p>Suppose that DNA sequences of a species is a sequence that consist of A, C, T and G，and the length of sequences is a given integer n.<br>Input</p><p>First line contains two integer m (0 &lt;= m &lt;= 10), n (1 &lt;= n &lt;=2000000000). Here, m is the number of genetic disease segment, and n is the length of sequences. </p><p>Next m lines each line contain a DNA genetic disease segment, and length of these segments is not larger than 10.<br>Output</p><p>An integer, the number of DNA sequences, mod 100000.<br>Sample Input</p><p>4 3<br>AT<br>AC<br>AG<br>AA<br>Sample Output</p><p>36</p><p>题目链接：<a href="http://poj.org/problem?id=2778" target="_blank" rel="noopener">POJ 2778</a></p><p>其实题目可以转化为从Trie树根节点走n步所形成的不同的合法路径种类，其中合法路径是指输入的这几个字符串均不能出现。<br>把AC自动机上的路径和fail指针看成一幅图，可以沿着这两种边走n次，最后求出到达各个点的方案数之和即可，这显然是用邻接矩阵+快速幂就可以了，要注意的是上一个fail指向的是单词的末尾节点，那么当前的节点也将成为末尾节点，因为fail走的是当前路径后缀与指向路径的最长前缀末尾，因此如果走fail这个点，那么前面的前缀必然会在当前路径的后缀中出现，因此要考虑进去<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">100000L</span>L;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> fail, cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fill(nxt, nxt + <span class="number">4</span>, <span class="number">-1</span>);</span><br><span class="line">        fail = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N * N];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> id[<span class="number">150</span>];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL A[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">                A[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">one</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            A[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span>*(Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.zero();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; sz; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!A[i][k])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!b.A[k][j])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    c.A[i][j] = (c.A[i][j] + A[i][k] * b.A[k][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mat <span class="keyword">operator</span>^(Mat a, LL b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat ret;</span><br><span class="line">        ret.one();</span><br><span class="line">        <span class="keyword">while</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                ret = ret * a;</span><br><span class="line">            a = a * a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Aho</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        L[sz++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = id[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[sz].init();</span><br><span class="line">                L[u].nxt[v] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        L[u].cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">if</span> (L[uf].cnt)</span><br><span class="line">                L[u].cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[<span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">    id[<span class="string">'G'</span>] = <span class="number">1</span>;</span><br><span class="line">    id[<span class="string">'T'</span>] = <span class="number">2</span>;</span><br><span class="line">    id[<span class="string">'C'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> m, n, i, j;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        Aho::init();</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            Aho::ins(s);</span><br><span class="line">        &#125;</span><br><span class="line">        Aho::build();</span><br><span class="line">        A.zero();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[i].nxt[j];</span><br><span class="line">                <span class="keyword">if</span> (L[v].cnt)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                ++A.A[i][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A = A ^ n;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">            ans = (ans + A.A[<span class="number">0</span>][i]) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 6208 The Dominator of Strings（AC自动机）</title>
      <link href="/2017/09/21/HDU-6208/"/>
      <url>/2017/09/21/HDU-6208/</url>
      
        <content type="html"><![CDATA[<p>The Dominator of Strings</p><p>Time Limit: 3000/3000 MS (Java/Others)    Memory Limit: 65535/32768 K (Java/Others)<br>Total Submission(s): 2830    Accepted Submission(s): 1010</p><a id="more"></a><p>Problem Description<br>Here you have a set of strings. A dominator is a string of the set dominating all strings else. The string S is dominated by T if S is a substring of T.</p><p>Input<br>The input contains several test cases and the first line provides the total number of cases.<br>For each test case, the first line contains an integer N indicating the size of the set.<br>Each of the following N lines describes a string of the set in lowercase.<br>The total length of strings in each case has the limit of 100000.<br>The limit is 30MB for the input file.</p><p>Output<br>For each test case, output a dominator if exist, or No if not.</p><p>Sample Input<br>3<br>10<br>you<br>better<br>worse<br>richer<br>poorer<br>sickness<br>health<br>death<br>faithfulness<br>youbemyweddedwifebetterworsericherpoorersicknesshealthtilldeathdouspartandpledgeyoumyfaithfulness<br>5<br>abc<br>cde<br>abcde<br>abcde<br>bcde<br>3<br>aaaaa<br>aaaab<br>aaaac</p><p>Sample Output<br>youbemyweddedwifebetterworsericherpoorersicknesshealthtilldeathdouspartandpledgeyoumyfaithfulness<br>abcde<br>No</p><p>Source<br>2017 ACM/ICPC Asia Regional Qingdao Online</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6208" target="_blank" rel="noopener">HDU 6208</a><br>检测你的AC自动机是否正确以及优化是否优秀的模板题，每一次把路径上的节点累加个数置为-1或者把走过的节点标记一下均可达到优化效果<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt, fail;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        cnt = fail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; L[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> st[N], Len[N];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        L[tot++].init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                L[tot].init();</span><br><span class="line">                L[u].nxt[v] = tot++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        ++L[u].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[<span class="number">0</span>].nxt[i] == <span class="number">-1</span>)</span><br><span class="line">                L[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                L[L[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">                Q.push(L[<span class="number">0</span>].nxt[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> uf = L[u].fail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = L[u].nxt[i];</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="number">-1</span>)</span><br><span class="line">                    L[u].nxt[i] = L[uf].nxt[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    L[v].fail = L[uf].nxt[i];</span><br><span class="line">                    Q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            u = L[u].nxt[v];</span><br><span class="line">            <span class="keyword">while</span> (u &amp;&amp; L[u].nxt[v] == <span class="number">-1</span>)</span><br><span class="line">                u = L[u].fail;</span><br><span class="line">            <span class="keyword">int</span> t = u;</span><br><span class="line">            <span class="keyword">while</span> (t &amp;&amp; L[t].cnt != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret += L[t].cnt;</span><br><span class="line">                L[t].cnt = <span class="number">-1</span>;</span><br><span class="line">                t = L[t].fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        AC::init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> Maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ID = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + sum);</span><br><span class="line">            Len[i] = <span class="built_in">strlen</span>(s + sum);</span><br><span class="line">            AC::insert(s + sum, Len[i]);</span><br><span class="line">            st[i] = sum;</span><br><span class="line">            sum += Len[i];</span><br><span class="line">            <span class="keyword">if</span> (Len[i] &gt; Maxlen)</span><br><span class="line">            &#123;</span><br><span class="line">                ID = i;</span><br><span class="line">                Maxlen = Len[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AC::build();</span><br><span class="line">        <span class="keyword">if</span> (AC::query(s + st[ID], Len[ID]) == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ed = st[ID] + Len[ID];</span><br><span class="line">            <span class="keyword">for</span> (i = st[ID]; i &lt; ed; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 字符串 </category>
          
          <category> AC自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPOJ HIGH(生成树计数，高斯消元求行列式)</title>
      <link href="/2017/09/20/SPOJ-HIGH/"/>
      <url>/2017/09/20/SPOJ-HIGH/</url>
      
        <content type="html"><![CDATA[<p>HIGH - Highways<br>no tags<br><a id="more"></a><br>In some countries building highways takes a lot of time… Maybe that’s because there are many possiblities to construct a network of highways and engineers can’t make up their minds which one to choose. Suppose we have a list of cities that can be connected directly. Your task is to count how many ways there are to build such a network that between every two cities there exists exactly one path. Two networks differ if there are two cities that are connected directly in the first case and aren’t in the second case. At most one highway connects two cities. No highway connects a city to itself. Highways are two-way.</p><p>Input</p><p>The input begins with the integer t, the number of test cases (equal to about 1000). Then t test cases follow. The first line of each test case contains two integers, the number of cities (1&lt;=n&lt;=12) and the number of direct connections between them. Each next line contains two integers a and b, which are numbers of cities that can be connected. Cities are numbered from 1 to n. Consecutive test cases are separated with one blank line.</p><p>Output</p><p>The number of ways to build the network, for every test case in a separate line. Assume that when there is only one city, the answer should be 1. The answer will fit in a signed 64-bit integer.</p><p>Example</p><p>Sample input:<br>4<br>4 5<br>3 4<br>4 2<br>2 3<br>1 2<br>1 3</p><p>2 1<br>2 1</p><p>1 0</p><p>3 3<br>1 2<br>2 3<br>3 1</p><p>Sample output:<br>8<br>1<br>1<br>3<br><!-- more --><br>题目链接：<a href="https://vjudge.net/problem/32352/origin" target="_blank" rel="noopener">SPOJ HIGH</a></p><p>矩阵树定理，用D矩阵和A矩阵作差得到G，然后求G的任意一个$n-1$阶矩阵行列式，其中用到高斯消元<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) ((x&lt;&lt;1)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(x,y) ((x+y)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin(name) freopen(name,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout(name) freopen(name,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(arr,val) memset(arr,val,sizeof(arr))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAST_IO ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">double</span> Mat[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLR(Mat, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Gaussian</span><span class="params">(<span class="keyword">int</span> ne, <span class="keyword">int</span> nv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ce = <span class="number">1</span>, cv = <span class="number">1</span>; ce &lt;= ne &amp;&amp; cv &lt;= nv; ++ce, ++cv)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> te = ce;</span><br><span class="line">        <span class="keyword">for</span> (i = ce + <span class="number">1</span>; i &lt;= ne; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(Mat[i][cv]) &gt; <span class="built_in">fabs</span>(Mat[ce][cv]))</span><br><span class="line">                te = ce;</span><br><span class="line">        <span class="keyword">if</span> (Mat[te][cv] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (te != ce)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = cv; i &lt;= nv; ++i)</span><br><span class="line">                swap(Mat[ce][i], Mat[te][i]);</span><br><span class="line">            ans *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans *= Mat[ce][cv];</span><br><span class="line">        <span class="keyword">for</span> (j = cv + <span class="number">1</span>; j &lt;= nv; ++j)</span><br><span class="line">            Mat[ce][j] /= Mat[ce][cv];</span><br><span class="line">        <span class="keyword">for</span> (i = ce + <span class="number">1</span>; i &lt;= ne; ++i)</span><br><span class="line">            <span class="keyword">for</span> (j = cv + <span class="number">1</span>; j &lt;= nv; ++j)</span><br><span class="line">                Mat[i][j] -= Mat[i][cv] * Mat[ce][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n, m, u, v, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            ++Mat[u][u];</span><br><span class="line">            ++Mat[v][v];</span><br><span class="line">            Mat[u][v] = <span class="number">-1</span>;</span><br><span class="line">            Mat[v][u] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>, Gaussian(n - <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> 数学 </category>
          
          <category> 高斯消元 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
